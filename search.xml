<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Intro_Math.md</title>
    <url>/2022/10/20/1.Intro_Math/</url>
    <content><![CDATA[<h1 id="introduction">Introduction</h1>
<p>对概率的诠释有两大学派，一种是频率派另一种是贝叶斯派。后面我们对观测集采用下面记号： <span class="math display">\[
X_{N\times p}=(x_{1},x_{2},\cdots,x_{N})^{T},x_{i}=(x_{i1},x_{i2},\cdots,x_{ip})^{T}
\]</span> 这个记号表示有 <span class="math inline">\(N\)</span> 个样本，每个样本都是 <span class="math inline">\(p\)</span> 维向量。其中每个观测都是由 <span class="math inline">\(p(x|\theta)\)</span> 生成的。</p>
<h2 id="频率派的观点">频率派的观点</h2>
<p><span class="math inline">\(p(x|\theta)\)</span>中的 <span class="math inline">\(\theta\)</span> 是一个常量。对于 <span class="math inline">\(N\)</span> 个观测来说观测集的概率为 <span class="math inline">\(p(X|\theta)\mathop{=}\limits _{iid}\prod\limits _{i=1}^{N}p(x_{i}|\theta))\)</span> 。为了求 <span class="math inline">\(\theta\)</span> 的大小，我们采用最大对数似然MLE的方法：</p>
<p><span class="math display">\[
\theta_{MLE}=\mathop{argmax}\limits _{\theta}\log p(X|\theta)\mathop{=}\limits _{iid}\mathop{argmax}\limits _{\theta}\sum\limits _{i=1}^{N}\log p(x_{i}|\theta)
\]</span></p>
<h2 id="贝叶斯派的观点">贝叶斯派的观点</h2>
<p>贝叶斯派认为 <span class="math inline">\(p(x|\theta)\)</span> 中的 <span class="math inline">\(\theta\)</span> 不是一个常量。这个 <span class="math inline">\(\theta\)</span> 满足一个预设的先验的分布 <span class="math inline">\(\theta\sim p(\theta)\)</span> 。于是根据贝叶斯定理依赖观测集参数的后验可以写成：</p>
<p><span class="math display">\[
p(\theta|X)=\frac{p(X|\theta)\cdot p(\theta)}{p(X)}=\frac{p(X|\theta)\cdot p(\theta)}{\int\limits _{\theta}p(X|\theta)\cdot p(\theta)d\theta}
\]</span> 为了求 <span class="math inline">\(\theta\)</span> 的值，我们要最大化这个参数后验MAP：</p>
<p><span class="math display">\[
\theta_{MAP}=\mathop{argmax}\limits _{\theta}p(\theta|X)=\mathop{argmax}\limits _{\theta}p(X|\theta)\cdot p(\theta)
\]</span> 其中第二个等号是由于分母和 <span class="math inline">\(\theta\)</span> 没有关系。求解这个 <span class="math inline">\(\theta\)</span> 值后计算<span class="math inline">\(\frac{p(X|\theta)\cdot p(\theta)}{\int\limits _{\theta}p(X|\theta)\cdot p(\theta)d\theta}\)</span> ，就得到了参数的后验概率。其中 <span class="math inline">\(p(X|\theta)\)</span> 叫似然，是我们的模型分布。得到了参数的后验分布后，我们可以将这个分布用于预测贝叶斯预测： <span class="math display">\[
p(x_{new}|X)=\int\limits _{\theta}p(x_{new}|\theta)\cdot p(\theta|X)d\theta
\]</span> 其中积分中的被乘数是模型，乘数是后验分布。</p>
<h2 id="小结">小结</h2>
<p>频率派和贝叶斯派分别给出了一系列的机器学习算法。频率派的观点导出了一系列的统计机器学习算法而贝叶斯派导出了概率图理论。在应用频率派的 MLE 方法时最优化理论占有重要地位。而贝叶斯派的算法无论是后验概率的建模还是应用这个后验进行推断时积分占有重要地位。因此采样积分方法如 MCMC 有很多应用。</p>
<h1 id="mathbasics">MathBasics</h1>
<h2 id="高斯分布">高斯分布</h2>
<h3 id="一维情况-mle">一维情况 MLE</h3>
<p>高斯分布在机器学习中占有举足轻重的作用。在 MLE 方法中：</p>
<p><span class="math display">\[
\theta=(\mu,\Sigma)=(\mu,\sigma^{2}),\theta_{MLE}=\mathop{argmax}\limits _{\theta}\log p(X|\theta)\mathop{=}\limits _{iid}\mathop{argmax}\limits _{\theta}\sum\limits _{i=1}^{N}\log p(x_{i}|\theta)
\]</span> 一般地，高斯分布的概率密度函数PDF写为：</p>
<p><span class="math display">\[
p(x|\mu,\Sigma)=\frac{1}{(2\pi)^{p/2}|\Sigma|^{1/2}}e^{-\frac{1}{2}(x-\mu)^{T}\Sigma^{-1}(x-\mu)}
\]</span> 带入 MLE 中我们考虑一维的情况</p>
<p><span class="math display">\[
\log p(X|\theta)=\sum\limits _{i=1}^{N}\log p(x_{i}|\theta)=\sum\limits _{i=1}^{N}\log\frac{1}{\sqrt{2\pi}\sigma}\exp(-(x_{i}-\mu)^{2}/2\sigma^{2})
\]</span> 首先对 <span class="math inline">\(\mu\)</span> 的极值可以得到 ： <span class="math display">\[
\mu_{MLE}=\mathop{argmax}\limits _{\mu}\log p(X|\theta)=\mathop{argmax}\limits _{\mu}\sum\limits _{i=1}^{N}(x_{i}-\mu)^{2}
\]</span> 于是： <span class="math display">\[
\frac{\partial}{\partial\mu}\sum\limits _{i=1}^{N}(x_{i}-\mu)^{2}=0\longrightarrow\mu_{MLE}=\frac{1}{N}\sum\limits _{i=1}^{N}x_{i}
\]</span> 其次对 <span class="math inline">\(\theta\)</span> 中的另一个参数 <span class="math inline">\(\sigma\)</span> ，有： <span class="math display">\[
\begin{align}
\sigma_{MLE}=\mathop{argmax}\limits _{\sigma}\log p(X|\theta)&amp;=\mathop{argmax}\limits _{\sigma}\sum\limits _{i=1}^{N}[-\log\sigma-\frac{1}{2\sigma^{2}}(x_{i}-\mu)^{2}]\nonumber\\
&amp;=\mathop{argmin}\limits _{\sigma}\sum\limits _{i=1}^{N}[\log\sigma+\frac{1}{2\sigma^{2}}(x_{i}-\mu)^{2}]
\end{align}
\]</span> 于是： <span class="math display">\[
\frac{\partial}{\partial\sigma}\sum\limits _{i=1}^{N}[\log\sigma+\frac{1}{2\sigma^{2}}(x_{i}-\mu)^{2}]=0\longrightarrow\sigma_{MLE}^{2}=\frac{1}{N}\sum\limits _{i=1}^{N}(x_{i}-\mu)^{2}
\]</span> 值得注意的是，上面的推导中，首先对 <span class="math inline">\(\mu\)</span> 求 MLE， 然后利用这个结果求 <span class="math inline">\(\sigma_{MLE}\)</span> ，因此可以预期的是对数据集求期望时 <span class="math inline">\(\mathbb{E}_{\mathcal{D}}[\mu_{MLE}]\)</span> 是无偏差的： <span class="math display">\[
\mathbb{E}_{\mathcal{D}}[\mu_{MLE}]=\mathbb{E}_{\mathcal{D}}[\frac{1}{N}\sum\limits _{i=1}^{N}x_{i}]=\frac{1}{N}\sum\limits _{i=1}^{N}\mathbb{E}_{\mathcal{D}}[x_{i}]=\mu
\]</span> 但是当对 <span class="math inline">\(\sigma_{MLE}\)</span> 求 期望的时候由于使用了单个数据集的 <span class="math inline">\(\mu_{MLE}\)</span>，因此对所有数据集求期望的时候我们会发现 <span class="math inline">\(\sigma_{MLE}\)</span> 是 有偏的：</p>
<p><span class="math display">\[
\begin{align}
\mathbb{E}_{\mathcal{D}}[\sigma_{MLE}^{2}]&amp;=\mathbb{E}_{\mathcal{D}}[\frac{1}{N}\sum\limits _{i=1}^{N}(x_{i}-\mu_{MLE})^{2}]=\mathbb{E}_{\mathcal{D}}[\frac{1}{N}\sum\limits _{i=1}^{N}(x_{i}^{2}-2x_{i}\mu_{MLE}+\mu_{MLE}^{2})\nonumber
\\&amp;=\mathbb{E}_{\mathcal{D}}[\frac{1}{N}\sum\limits _{i=1}^{N}x_{i}^{2}-\mu_{MLE}^{2}]=\mathbb{E}_{\mathcal{D}}[\frac{1}{N}\sum\limits _{i=1}^{N}x_{i}^{2}-\mu^{2}+\mu^{2}-\mu_{MLE}^{2}]\nonumber\\
&amp;= \mathbb{E}_{\mathcal{D}}[\frac{1}{N}\sum\limits _{i=1}^{N}x_{i}^{2}-\mu^{2}]-\mathbb{E}_{\mathcal{D}}[\mu_{MLE}^{2}-\mu^{2}]=\sigma^{2}-(\mathbb{E}_{\mathcal{D}}[\mu_{MLE}^{2}]-\mu^{2})\nonumber\\&amp;=\sigma^{2}-(\mathbb{E}_{\mathcal{D}}[\mu_{MLE}^{2}]-\mathbb{E}_{\mathcal{D}}^{2}[\mu_{MLE}])=\sigma^{2}-Var[\mu_{MLE}]\nonumber\\&amp;=\sigma^{2}-Var[\frac{1}{N}\sum\limits _{i=1}^{N}x_{i}]=\sigma^{2}-\frac{1}{N^{2}}\sum\limits _{i=1}^{N}Var[x_{i}]=\frac{N-1}{N}\sigma^{2}
\end{align}
\]</span> 所以： <span class="math display">\[
\hat{\sigma}^{2}=\frac{1}{N-1}\sum\limits _{i=1}^{N}(x_{i}-\mu)^{2}
\]</span></p>
<h3 id="多维情况">多维情况</h3>
<p>多维高斯分布表达式为： <span class="math display">\[
p(x|\mu,\Sigma)=\frac{1}{(2\pi)^{p/2}|\Sigma|^{1/2}}e^{-\frac{1}{2}(x-\mu)^{T}\Sigma^{-1}(x-\mu)}
\]</span> 其中 <span class="math inline">\(x,\mu\in\mathbb{R}^{p},\Sigma\in\mathbb{R}^{p\times p}\)</span> ，<span class="math inline">\(\Sigma\)</span> 为协方差矩阵，一般而言也是半正定矩阵。这里我们只考虑正定矩阵。首先我们处理指数上的数字，指数上的数字可以记为 <span class="math inline">\(x\)</span> 和 <span class="math inline">\(\mu\)</span> 之间的马氏距离。对于对称的协方差矩阵可进行特征值分解，<span class="math inline">\(\Sigma=U\Lambda U^{T}=(u_{1},u_{2},\cdots,u_{p})diag(\lambda_{i})(u_{1},u_{2},\cdots,u_{p})^{T}=\sum\limits _{i=1}^{p}u_{i}\lambda_{i}u_{i}^{T}\)</span> ，于是：</p>
<p><span class="math display">\[
\Sigma^{-1}=\sum\limits _{i=1}^{p}u_{i}\frac{1}{\lambda_{i}}u_{i}^{T}
\]</span></p>
<p><span class="math display">\[
\Delta=(x-\mu)^{T}\Sigma^{-1}(x-\mu)=\sum\limits _{i=1}^{p}(x-\mu)^{T}u_{i}\frac{1}{\lambda_{i}}u_{i}^{T}(x-\mu)=\sum\limits _{i=1}^{p}\frac{y_{i}^{2}}{\lambda_{i}}
\]</span></p>
<p>我们注意到 <span class="math inline">\(y_{i}\)</span> 是 <span class="math inline">\(x-\mu\)</span> 在特征向量 <span class="math inline">\(u_{i}\)</span> 上的投影长度，因此上式子就是 <span class="math inline">\(\Delta\)</span> 取不同值时的同心椭圆。</p>
<p>下面我们看多维高斯模型在实际应用时的两个问题</p>
<ol type="1">
<li><p>参数 <span class="math inline">\(\Sigma,\mu\)</span> 的自由度为 <span class="math inline">\(O(p^{2})\)</span> 对于维度很高的数据其自由度太高。解决方案：高自由度的来源是 <span class="math inline">\(\Sigma\)</span> 有 <span class="math inline">\(\frac{p(p+1)}{2}\)</span> 个自由参数，可以假设其是对角矩阵，甚至在各向同性假设中假设其对角线上的元素都相同。前一种的算法有 Factor Analysis，后一种有概率 PCA(p-PCA) 。</p></li>
<li><p>第二个问题是单个高斯分布是单峰的，对有多个峰的数据分布不能得到好的结果。解决方案：高斯混合GMM 模型。</p></li>
</ol>
<p>下面对多维高斯分布的常用定理进行介绍。</p>
<p>我们记 <span class="math inline">\(x=(x_1, x_2,\cdots,x_p)^T=(x_{a,m\times 1}, x_{b,n\times1})^T,\mu=(\mu_{a,m\times1}, \mu_{b,n\times1}),\Sigma=\begin{pmatrix}\Sigma_{aa}&amp;\Sigma_{ab}\\\Sigma_{ba}&amp;\Sigma_{bb}\end{pmatrix}\)</span>，已知 <span class="math inline">\(x\sim\mathcal{N}(\mu,\Sigma)\)</span>。</p>
<p>首先是一个高斯分布的定理：</p>
<blockquote>
<p>定理：已知 <span class="math inline">\(x\sim\mathcal{N}(\mu,\Sigma), y\sim Ax+b\)</span>，那么 <span class="math inline">\(y\sim\mathcal{N}(A\mu+b, A\Sigma A^T)\)</span>。</p>
<p>证明：<span class="math inline">\(\mathbb{E}[y]=\mathbb{E}[Ax+b]=A\mathbb{E}[x]+b=A\mu+b\)</span>，<span class="math inline">\(Var[y]=Var[Ax+b]=Var[Ax]=A\cdot Var[x]\cdot A^T\)</span>。</p>
</blockquote>
<p>下面利用这个定理得到 <span class="math inline">\(p(x_a),p(x_b),p(x_a|x_b),p(x_b|x_a)\)</span> 这四个量。</p>
<ol type="1">
<li><p><span class="math inline">\(x_a=\begin{pmatrix}\mathbb{I}_{m\times m}&amp;\mathbb{O}_{m\times n})\end{pmatrix}\begin{pmatrix}x_a\\x_b\end{pmatrix}\)</span>，代入定理中得到： <span class="math display">\[
\mathbb{E}[x_a]=\begin{pmatrix}\mathbb{I}&amp;\mathbb{O}\end{pmatrix}\begin{pmatrix}\mu_a\\\mu_b\end{pmatrix}=\mu_a\\
Var[x_a]=\begin{pmatrix}\mathbb{I}&amp;\mathbb{O}\end{pmatrix}\begin{pmatrix}\Sigma_{aa}&amp;\Sigma_{ab}\\\Sigma_{ba}&amp;\Sigma_{bb}\end{pmatrix}\begin{pmatrix}\mathbb{I}\\\mathbb{O}\end{pmatrix}=\Sigma_{aa}
\]</span> 所以 <span class="math inline">\(x_a\sim\mathcal{N}(\mu_a,\Sigma_{aa})\)</span>。</p></li>
<li><p>同样的，<span class="math inline">\(x_b\sim\mathcal{N}(\mu_b,\Sigma_{bb})\)</span>。</p></li>
<li><p>对于两个条件概率，我们引入三个量： <span class="math display">\[
x_{b\cdot a}=x_b-\Sigma_{ba}\Sigma_{aa}^{-1}x_a\\
\mu_{b\cdot a}=\mu_b-\Sigma_{ba}\Sigma_{aa}^{-1}\mu_a\\
\Sigma_{bb\cdot a}=\Sigma_{bb}-\Sigma_{ba}\Sigma_{aa}^{-1}\Sigma_{ab}
\]</span> 特别的，最后一个式子叫做 <span class="math inline">\(\Sigma_{bb}\)</span> 的 Schur Complementary。可以看到： <span class="math display">\[
x_{b\cdot a}=\begin{pmatrix}-\Sigma_{ba}\Sigma_{aa}^{-1}&amp;\mathbb{I}_{n\times n}\end{pmatrix}\begin{pmatrix}x_a\\x_b\end{pmatrix}
\]</span> 所以： <span class="math display">\[
\mathbb{E}[x_{b\cdot a}]=\begin{pmatrix}-\Sigma_{ba}\Sigma_{aa}^{-1}&amp;\mathbb{I}_{n\times n}\end{pmatrix}\begin{pmatrix}\mu_a\\\mu_b\end{pmatrix}=\mu_{b\cdot a}\\
Var[x_{b\cdot a}]=\begin{pmatrix}-\Sigma_{ba}\Sigma_{aa}^{-1}&amp;\mathbb{I}_{n\times n}\end{pmatrix}\begin{pmatrix}\Sigma_{aa}&amp;\Sigma_{ab}\\\Sigma_{ba}&amp;\Sigma_{bb}\end{pmatrix}\begin{pmatrix}-\Sigma_{aa}^{-1}\Sigma_{ba}^T\\\mathbb{I}_{n\times n}\end{pmatrix}=\Sigma_{bb\cdot a}
\]</span> 利用这三个量可以得到 <span class="math inline">\(x_b=x_{b\cdot a}+\Sigma_{ba}\Sigma_{aa}^{-1}x_a\)</span>。因此： <span class="math display">\[
\mathbb{E}[x_b|x_a]=\mu_{b\cdot a}+\Sigma_{ba}\Sigma_{aa}^{-1}x_a
\]</span></p>
<p><span class="math display">\[
Var[x_b|x_a]=\Sigma_{bb\cdot a}
\]</span></p>
<p>这里同样用到了定理。</p></li>
<li><p>同样： <span class="math display">\[
x_{a\cdot b}=x_a-\Sigma_{ab}\Sigma_{bb}^{-1}x_b\\
\mu_{a\cdot b}=\mu_a-\Sigma_{ab}\Sigma_{bb}^{-1}\mu_b\\
\Sigma_{aa\cdot b}=\Sigma_{aa}-\Sigma_{ab}\Sigma_{bb}^{-1}\Sigma_{ba}
\]</span> 所以： <span class="math display">\[
\mathbb{E}[x_a|x_b]=\mu_{a\cdot b}+\Sigma_{ab}\Sigma_{bb}^{-1}x_b
\]</span></p>
<p><span class="math display">\[
Var[x_a|x_b]=\Sigma_{aa\cdot b}
\]</span></p></li>
</ol>
<p>下面利用上边四个量，求解线性模型：</p>
<blockquote>
<p>已知：<span class="math inline">\(p(x)=\mathcal{N}(\mu,\Lambda^{-1}),p(y|x)=\mathcal{N}(Ax+b,L^{-1})\)</span>，求解：<span class="math inline">\(p(y),p(x|y)\)</span>。</p>
<p>解：令 <span class="math inline">\(y=Ax+b+\epsilon,\epsilon\sim\mathcal{N}(0,L^{-1})\)</span>，所以 <span class="math inline">\(\mathbb{E}[y]=\mathbb{E}[Ax+b+\epsilon]=A\mu+b\)</span>，<span class="math inline">\(Var[y]=A \Lambda^{-1}A^T+L^{-1}\)</span>，因此： <span class="math display">\[
  p(y)=\mathcal{N}(A\mu+b,L^{-1}+A\Lambda^{-1}A^T)
  \]</span> 引入 <span class="math inline">\(z=\begin{pmatrix}x\\y\end{pmatrix}\)</span>，我们可以得到 <span class="math inline">\(Cov[x,y]=\mathbb{E}[(x-\mathbb{E}[x])(y-\mathbb{E}[y])^T]\)</span>。对于这个协方差可以直接计算： <span class="math display">\[
  \begin{align}
  Cov(x,y)&amp;=\mathbb{E}[(x-\mu)(Ax-A\mu+\epsilon)^T]=\mathbb{E}[(x-\mu)(x-\mu)^TA^T]=Var[x]A^T=\Lambda^{-1}A^T
  \end{align}
  \]</span> 注意到协方差矩阵的对称性，所以 <span class="math inline">\(p(z)=\mathcal{N}\begin{pmatrix}\mu\\A\mu+b\end{pmatrix},\begin{pmatrix}\Lambda^{-1}&amp;\Lambda^{-1}A^T\\A\Lambda^{-1}&amp;L^{-1}+A\Lambda^{-1}A^T\end{pmatrix})\)</span>。根据之前的公式，我们可以得到： <span class="math display">\[
  \mathbb{E}[x|y]=\mu+\Lambda^{-1}A^T(L^{-1}+A\Lambda^{-1}A^T)^{-1}(y-A\mu-b)
  \]</span></p>
<p><span class="math display">\[
  Var[x|y]=\Lambda^{-1}-\Lambda^{-1}A^T(L^{-1}+A\Lambda^{-1}A^T)^{-1}A\Lambda^{-1}
  \]</span></p>
</blockquote>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
  </entry>
  <entry>
    <title>线性回归.md</title>
    <url>/2022/10/20/2.LinearRegression/</url>
    <content><![CDATA[<h1 id="线性回归">线性回归</h1>
<p>假设数据集为： <span class="math display">\[
\mathcal{D}=\{(x_1, y_1),(x_2, y_2),\cdots,(x_N, y_N)\}
\]</span> 后面我们记： <span class="math display">\[
X=(x_1,x_2,\cdots,x_N)^T,Y=(y_1,y_2,\cdots,y_N)^T
\]</span> 线性回归假设： <span class="math display">\[
f(w)=w^Tx
\]</span></p>
<h2 id="最小二乘法">最小二乘法</h2>
<p>对这个问题，采用二范数定义的平方误差来定义损失函数： <span class="math display">\[
L(w)=\sum\limits_{i=1}^N||w^Tx_i-y_i||^2_2
\]</span> 展开得到： <span class="math display">\[
\begin{align}
L(w)&amp;=(w^Tx_1-y_1,\cdots,w^Tx_N-y_N)\cdot (w^Tx_1-y_1,\cdots,w^Tx_N-y_N)^T\nonumber\\
&amp;=(w^TX^T-Y^T)\cdot (Xw-Y)=w^TX^TXw-Y^TXw-w^TX^TY+Y^TY\nonumber\\
&amp;=w^TX^TXw-2w^TX^TY+Y^TY
\end{align}
\]</span> 最小化这个值的 $ $ ： <span class="math display">\[
\begin{align}
\hat{w}=\mathop{argmin}\limits_wL(w)&amp;\longrightarrow\frac{\partial}{\partial w}L(w)=0\nonumber\\
&amp;\longrightarrow2X^TX\hat{w}-2X^TY=0\nonumber\\
&amp;\longrightarrow \hat{w}=(X^TX)^{-1}X^TY=X^+Y
\end{align}
\]</span> 这个式子中 <span class="math inline">\((X^TX)^{-1}X^T\)</span> 又被称为伪逆。对于行满秩或者列满秩的 <span class="math inline">\(X\)</span>，可以直接求解，但是对于非满秩的样本集合，需要使用奇异值分解（SVD）的方法，对 <span class="math inline">\(X\)</span> 求奇异值分解，得到 <span class="math display">\[
X=U\Sigma V^T
\]</span> 于是： <span class="math display">\[
X^+=V\Sigma^{-1}U^T
\]</span> 在几何上，最小二乘法相当于模型（这里就是直线）和试验值的距离的平方求和，假设我们的试验样本张成一个 <span class="math inline">\(p\)</span> 维空间（满秩的情况）：<span class="math inline">\(X=Span(x_1,\cdots,x_N)\)</span>，而模型可以写成 <span class="math inline">\(f(w)=X\beta\)</span>，也就是 <span class="math inline">\(x_1,\cdots,x_N\)</span> 的某种组合，而最小二乘法就是说希望 <span class="math inline">\(Y\)</span> 和这个模型距离越小越好，于是它们的差应该与这个张成的空间垂直： <span class="math display">\[
X^T\cdot(Y-X\beta)=0\longrightarrow\beta=(X^TX)^{-1}X^TY
\]</span></p>
<h2 id="噪声为高斯分布的-mle">噪声为高斯分布的 MLE</h2>
<p>对于一维的情况，记 <span class="math inline">\(y=w^Tx+\epsilon,\epsilon\sim\mathcal{N}(0,\sigma^2)\)</span>，那么 <span class="math inline">\(y\sim\mathcal{N}(w^Tx,\sigma^2)\)</span>。代入极大似然估计中： <span class="math display">\[
\begin{align}
L(w)=\log p(Y|X,w)&amp;=\log\prod\limits_{i=1}^Np(y_i|x_i,w)\nonumber\\
&amp;=\sum\limits_{i=1}^N\log(\frac{1}{\sqrt{2\pi\sigma}}e^{-\frac{(y_i-w^Tx_i)^2}{2\sigma^2}})\\
\mathop{argmax}\limits_wL(w)&amp;=\mathop{argmin}\limits_w\sum\limits_{i=1^N}(y_i-w^Tx_i)^2
\end{align}
\]</span> 这个表达式和最小二乘估计得到的结果一样。</p>
<h2 id="权重先验也为高斯分布的-map">权重先验也为高斯分布的 MAP</h2>
<p>取先验分布 <span class="math inline">\(w\sim\mathcal{N}(0,\sigma_0^2)\)</span>。于是：  <span class="math display">\[
\begin{align}
\hat{w}=\mathop{argmax}\limits_wp(w|Y)&amp;=\mathop{argmax}\limits_wp(Y|w)p(w)\nonumber\\
&amp;=\mathop{argmax}\limits_w\log p(Y|w)p(w)\nonumber\\
&amp;=\mathop{argmax}\limits_w(\log p(Y|w)+\log p(w))\nonumber\\
&amp;=\mathop{argmin}\limits_w[(y-w^Tx)^2+\frac{\sigma^2}{\sigma_0^2}w^Tw]
\end{align}
\]</span> 这里省略了 <span class="math inline">\(X\)</span>，<span class="math inline">\(p(Y)\)</span>和 <span class="math inline">\(w\)</span> 没有关系，同时也利用了上面高斯分布的 MLE的结果。</p>
<p>我们将会看到，超参数 <span class="math inline">\(\sigma_0\)</span>的存在和下面会介绍的 Ridge 正则项可以对应，同样的如果将先验分布取为 Laplace 分布，那么就会得到和 L1 正则类似的结果。</p>
<h2 id="正则化">正则化</h2>
<p>在实际应用时，如果样本容量不远远大于样本的特征维度，很可能造成过拟合，对这种情况，我们有下面三个解决方式：</p>
<ol type="1">
<li>加数据</li>
<li>特征选择（降低特征维度）如 PCA 算法。</li>
<li>正则化</li>
</ol>
<p>正则化一般是在损失函数（如上面介绍的最小二乘损失）上加入正则化项（表示模型的复杂度对模型的惩罚），下面我们介绍一般情况下的两种正则化框架。 <span class="math display">\[
\begin{align}
L1&amp;:\mathop{argmin}\limits_wL(w)+\lambda||w||_1,\lambda\gt0\\
L2&amp;:\mathop{argmin}\limits_wL(w)+\lambda||w||^2_2,\lambda \gt 0
\end{align}
\]</span> 下面对最小二乘误差分别分析这两者的区别。</p>
<h3 id="l1-lasso">L1 Lasso</h3>
<p>L1正则化可以引起稀疏解。</p>
<p>从最小化损失的角度看，由于 L1 项求导在0附近的左右导数都不是0，因此更容易取到0解。</p>
<p>从另一个方面看，L1 正则化相当于： <span class="math display">\[
\mathop{argmin}\limits_wL(w)\\
s.t. ||w||_1\lt C
\]</span> 我们已经看到平方误差损失函数在 <span class="math inline">\(w\)</span> 空间是一个椭球，因此上式求解就是椭球和 <span class="math inline">\(||w||_1=C\)</span>的切点，因此更容易相切在坐标轴上。</p>
<h3 id="l2-ridge">L2 Ridge</h3>
<p><span class="math display">\[
\begin{align}
\hat{w}=\mathop{argmin}\limits_wL(w)+\lambda w^Tw&amp;\longrightarrow\frac{\partial}{\partial w}L(w)+2\lambda w=0\nonumber\\
&amp;\longrightarrow2X^TX\hat{w}-2X^TY+2\lambda \hat w=0\nonumber\\
&amp;\longrightarrow \hat{w}=(X^TX+\lambda \mathbb{I})^{-1}X^TY
\end{align}
\]</span></p>
<p>可以看到，这个正则化参数和前面的 MAP 结果不谋而合。利用2范数进行正则化不仅可以是模型选择 <span class="math inline">\(w\)</span> 较小的参数，同时也避免 $ X^TX$不可逆的问题。</p>
<h2 id="小结">小结</h2>
<p>线性回归模型是最简单的模型，但是麻雀虽小，五脏俱全，在这里，我们利用最小二乘误差得到了闭式解。同时也发现，在噪声为高斯分布的时候，MLE 的解等价于最小二乘误差，而增加了正则项后，最小二乘误差加上 L2 正则项等价于高斯噪声先验下的 MAP解，加上 L1 正则项后，等价于 Laplace 噪声先验。</p>
<p>传统的机器学习方法或多或少都有线性回归模型的影子：</p>
<ol type="1">
<li>线性模型往往不能很好地拟合数据，因此有三种方案克服这一劣势：
<ol type="1">
<li>对特征的维数进行变换，例如多项式回归模型就是在线性特征的基础上加入高次项。</li>
<li>在线性方程后面加入一个非线性变换，即引入一个非线性的激活函数，典型的有线性分类模型如感知机。</li>
<li>对于一致的线性系数，我们进行多次变换，这样同一个特征不仅仅被单个系数影响，例如多层感知机（深度前馈网络）。</li>
</ol></li>
<li>线性回归在整个样本空间都是线性的，我们修改这个限制，在不同区域引入不同的线性或非线性，例如线性样条回归和决策树模型。</li>
<li>线性回归中使用了所有的样本，但是对数据预先进行加工学习的效果可能更好（所谓的维数灾难，高维度数据更难学习），例如 PCA 算法和流形学习。</li>
</ol>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
  </entry>
  <entry>
    <title>Back Propagation</title>
    <url>/2022/10/21/BP/</url>
    <content><![CDATA[

	<div class="row">
    <embed src="BP.pdf" width="100%" height="550" type="application/pdf">
	</div>



<!-- 

	<div class="row">
    <embed src="https://cloud.tsinghua.edu.cn/f/952edbd1e02d409cbd01/" width="100%" height="550" type="application/pdf">
	</div>



<p>--&gt;</p>
<!-- <iframe src="BP.pdf" width="800px" height="800px" frameborder="0" scrolling="no"></iframe> -->
<h2 id="梯度下降">梯度下降</h2>
<ol type="1">
<li><a href="https://blog.csdn.net/qq_41800366/article/details/86583789">梯度下降算法原理讲解——机器学习_zhangpaopao0609的博客-CSDN博客_梯度下降</a></li>
</ol>
<p><a href="https://so.csdn.net/so/search?q=梯度下降&amp;spm=1001.2101.3001.7020">梯度下降</a>（gradient descent）在机器学习中应用十分的广泛，不论是在线性回归还是Logistic回归中，它的主要目的是通过迭代找到目标函数的最小值，或者收敛到最小值。</p>
<h3 id="思想">思想</h3>
<p><strong>梯度下降法的基本思想可以类比为一个下山的过程。</strong> 假设这样一个场景：一个人被困在山上，需要从山上下来(找到山的最低点，也就是山谷)。但此时山上的浓雾很大，导致可视度很低；因此，下山的路径就无法确定，必须利用自己周围的信息一步一步地找到下山的路。这个时候，便可利用梯度下降算法来帮助自己下山。怎么做呢，<strong>首先以他当前的所处的位置为基准，寻找这个位置最陡峭的地方，然后朝着下降方向走一步，然后又继续以当前位置为基准，再找最陡峭的地方，再走直到最后到达最低处；同理上山也是如此，只是这时候就变成梯度上升算法了。</strong></p>
<p>梯度下降的基本过程就和下山的场景很类似。</p>
<p>首先，我们有一个可微分的函数。这个函数就代表着一座山。我们的目标就是找到这个函数的最小值，也就是山底。根据之前的场景假设，最快的下山的方式就是找到当前位置最陡峭的方向，然后沿着此方向向下走，对应到函数中，就是找到给定点的梯度 ，然后朝着梯度相反的方向，就能让函数值下降的最快！<strong>因为梯度的方向就是函数之变化最快的方向。</strong></p>
<h3 id="数学表示">数学表示</h3>
<p><span class="math display">\[Θ^1=Θ^0+α▽J(Θ)→ evaluated at Θ^0\]</span></p>
<p><img src="https://img-blog.csdnimg.cn/20190121203434245.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODAwMzY2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:67%;"></p>
<p>此公式的意义是：<span class="math inline">\(J\)</span>是关于<span class="math inline">\(Θ\)</span>的一个函数，我们当前所处的位置为<span class="math inline">\(Θ^0\)</span>点，要从这个点走到J的最小值点，也就是山底。首先我们先确定前进的方向，也就是梯度的反向，然后走一段距离的步长，也就是<span class="math inline">\(α\)</span>，走完这个段步长，就到达了<span class="math inline">\(Θ^1\)</span>这个点！</p>
<p><strong><mark>α</mark></strong></p>
<p><strong>α</strong> 在梯度下降算法中被称作为<strong>学习率</strong>或者<strong>步长</strong>，意味着我们可以通过α来控制每一步走的距离，<strong><u>其实就是不要走太快，错过了最低点。同时也要保证不要走的太慢，导致太阳下山了，还没有走到山下。</u></strong> 所以α的选择在梯度下降法中往往是很重要的！α不能太大也不能太小，太小的话，可能导致迟迟走不到最低点，太大的话，会导致错过最低点！</p>
<p><strong><mark>梯度要乘以一个负号</mark></strong></p>
<p>梯度前加一个负号，就意味着朝着梯度相反的方向前进！我们在前文提到，<strong>梯度的方向实际就是函数在此点上升最快的方向</strong>！而我们需要朝着下降最快的方向走，自然就是负的梯度的方向，所以此处需要加上负号；那么如果时上坡，也就是梯度上升算法，当然就不需要添加负号了。</p>
<p><img src="https://cdn.staticaly.com/gh/peirsist/blog_img@master/bp算法.webp" style="zoom:150%;"></p>
<p>第 <span class="math inline">\(l\)</span> 层的误差项可以通过第 <span class="math inline">\(l + 1\)</span> 层的误差项计算得到，这就是误差的反向传播（BackPropagation，BP）。反向传播算法的含义是：第 <span class="math inline">\(l\)</span> 层的一个神经元的误差项（或敏感性）是所有与该神经元相连的第 <span class="math inline">\(l + 1\)</span> 层的神经元的误差项的权重和．然后，再乘上该神经元激活函数的梯度</p>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/10/20/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="quick-start">Quick Start</h2>
<h3 id="create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="run-server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>test.md</title>
    <url>/2022/10/20/test-md/</url>
    <content><![CDATA[<h2 id="测试latex">测试latex</h2>
]]></content>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title>学习链接</title>
    <url>/2022/10/19/tolearn/</url>
    <content><![CDATA[<h1 id="一专业类"><strong>一、专业类</strong></h1>
<h2 id="机器学习"><strong>机器学习</strong></h2>
<h2 id="数学基础"><strong>1. 数学基础</strong></h2>
<ol type="1">
<li><a href="https://www.bilibili.com/video/BV1pb411u7t1?spm_id_from=333.999.0.0">线性代数基础课程【小元老师】【超级0基础入门】</a></li>
<li><a href="https://www.bilibili.com/video/BV1ib411t7YR?spm_id_from=333.999.0.0">线性代数的本质</a></li>
<li><a href="https://www.bilibili.com/video/BV14b411M7Jn?spm_id_from=333.999.0.0">概率论与数理统计知识详解【小元老师】【考研数学】</a></li>
<li><a href="https://www.bilibili.com/video/BV1ys411472E?spm_id_from=333.999.0.0">【官方双语/合集】线性代数的本质 - 系列合集</a></li>
</ol>
<h2 id="机器学习-1"><strong>2. 机器学习</strong></h2>
<ol type="1">
<li><strong>🔗<a href="机器学习/00Tra_ML/02.线性回归.md">线性回归</a></strong></li>
</ol>
<ul>
<li><a href="https://blog.csdn.net/gongxifacai_believe/category_6834186.html">Machine Learning_魏晓蕾的博客-CSDN博客</a><mark>前辈们做的机器学习笔记</mark></li>
<li><a href="https://www.bilibili.com/video/BV1jS4y1j74C?spm_id_from=333.999.0.0">机器学习之路【b站UP主】</a></li>
</ul>
<ol type="1">
<li><a href="https://www.bilibili.com/video/BV1Cx411i7op?spm_id_from=333.999.0.0">林轩田机器学习基石(国语)</a></li>
<li><strong><a href="https://www.bilibili.com/video/BV1aE411o7qd?spm_id_from=333.337.search-card.all.click">【白板推导系列】【合集 1～33】</a></strong></li>
<li><a href="https://www.bilibili.com/video/BV1eT4y1E73x?spm_id_from=333.999.0.0">【手推机器学习】矩阵求导7--最小二乘法举例</a></li>
<li><a href="https://www.bilibili.com/video/BV1ZM4y1w75P?spm_id_from=333.999.0.0">【神经网络】BP误差逆传播算法数学推导</a></li>
<li><a href="https://www.bilibili.com/video/BV13J41157Wq?spm_id_from=333.999.0.0">5字诀搞定BP反向传播算法推导</a></li>
<li><a href="https://github.com/dragen1860/Deep-Learning-with-TensorFlow-book">dragen1860/Deep-Learning-with-TensorFlow-book: 深度学习入门开源书，基于TensorFlow 2.0案例实战。</a></li>
<li><a href="https://christophm.github.io/interpretable-ml-book/preface-by-the-author.html">【英文】机器学习可解释性| Interpretable Machine Learning (christophm.github.io)</a></li>
<li></li>
</ol>
<h2 id="深度学习"><strong>3. 深度学习</strong></h2>
<ol type="1">
<li><strong><a href="https://www.bilibili.com/video/BV1if4y147hS?spm_id_from=333.999.0.0">动手学深度学习【李沐大神】</a></strong></li>
<li><strong>🔗<a href="机器学习/05DL/CNN.md">CNN</a></strong></li>
</ol>
<h2 id="强化学习"><strong>4. 强化学习</strong></h2>
<ol type="1">
<li><strong>🔗<a href="机器学习/03RL/02RL介绍.md">第1节什么是强化学习?-北邮-鲁鹏老师</a></strong></li>
<li><a href="https://blog.csdn.net/SMALL_RL/article/details/123380320">强化学习 (Reinforcement Learning) 基础及论文资料汇总</a></li>
<li><a href="https://www.bilibili.com/video/BV13W411Y75P?spm_id_from=333.999.0.0">【莫烦Python】强化学习 Reinforcement Learning</a></li>
<li><a href="https://www.bilibili.com/video/BV16Y4y1M7DX?spm_id_from=333.999.0.0">强化学习基础 （本科生课程） 北京邮电大学 鲁鹏</a></li>
<li><a href="https://www.bilibili.com/video/BV1XP4y1d7Bk?spm_id_from=333.999.0.0">李宏毅</a></li>
<li><a href="https://www.bilibili.com/video/BV1rv41167yx/?spm_id_from=333.1007.top_right_bar_window_history.content.click&amp;vd_source=83831fc0970a6c8704479f7cfc679937">深度强化学习（全）_哔哩哔哩_bilibili</a></li>
<li><a href="https://www.bilibili.com/video/BV1CB4y1G777/?spm_id_from=333.1007.top_right_bar_window_history.content.click&amp;vd_source=83831fc0970a6c8704479f7cfc679937">【RLChina 2022】前沿进展五：应用多智能体强化学习解决现实问题——机遇和挑战 方飞_哔哩哔哩_bilibili</a></li>
<li><a href="https://www.bilibili.com/video/BV1vG4y1n7Rp/?spm_id_from=333.880.my_history.page.click&amp;vd_source=83831fc0970a6c8704479f7cfc679937">强化学习论文分享2022-10-13_哔哩哔哩_bilibili</a></li>
<li></li>
</ol>
<h2 id="计算机系统"><strong>计算机系统</strong></h2>
<ol type="1">
<li><strong><a href="https://www.bilibili.com/video/BV1cD4y1D7uR/?spm_id_from=333.337.search-card.all.click&amp;vd_source=83831fc0970a6c8704479f7cfc679937&amp;t=42.5">【CSAPP-深入理解计算机系统】</a></strong></li>
<li><a href="https://www.bilibili.com/video/BV17K4y1N7Q2/?spm_id_from=333.337.search-card.all.click&amp;vd_source=83831fc0970a6c8704479f7cfc679937">深入理解计算机系统合集（周更中）_哔哩哔哩_bilibili</a>
<ul>
<li><a href="https://github.com/yangminz/bcst_csapp">yangminz/bcst_csapp: A C language repo to implement CSAPP (github.com)</a></li>
<li>Hello 观众朋友们大家好，这个Repo是我在做《深入理解计算机系统》（CSAPP）视频时所用到的代码，还包括一本设计手册，设计手册还在慢慢更新。代码、手册以及视频都是为了给大家介绍CSAPP这本书，帮助大家阅读和理解最基础的计算机系统知识。特别是本科低年级的同学（大一大二），准备转专业的同学，以及跨专业考研的同学，<strong>通常会掌握一些基本的编程语言，但是可能对计算机系统本身并不足够了解。</strong>我的视频、代码以及手册就是希望帮助大家学习，尽量通过代码实现CSAPP上的知识点，然后再通过视频讲解，<strong>将基础的计算机系统知识连贯起来。</strong></li>
</ul></li>
<li><a href="https://www.bilibili.com/video/BV1Vh411r7ef/?spm_id_from=333.337.search-card.all.click&amp;vd_source=83831fc0970a6c8704479f7cfc679937">深入理解计算机系统_哔哩哔哩_bilibili</a></li>
<li><a href="https://www.bilibili.com/video/BV1gN411975F?p=16&amp;vd_source=83831fc0970a6c8704479f7cfc679937">第九章 虚拟内存_哔哩哔哩_bilibili</a></li>
<li><strong><a href="https://www.bilibili.com/video/BV1r4411s7Hj/?vd_source=83831fc0970a6c8704479f7cfc679937">【计算机结构 Computer Architecture】-台湾清华大学-黄婷婷教授_哔哩哔哩_bilibili</a></strong></li>
<li><strong><a href="https://www.bilibili.com/video/BV1554y1s7LS?p=1&amp;vd_source=83831fc0970a6c8704479f7cfc679937">【强烈推荐】深入浅出计算机组成原理 - 源自台湾 - 非常值得一看 哔哩哔哩_bilibili</a></strong></li>
</ol>
<h1 id="二软能力"><strong>二、软能力</strong></h1>
<h2 id="羽毛球"><strong>羽毛球</strong></h2>
<ol type="1">
<li><strong><a href="https://www.bilibili.com/video/BV12t4y1e7L4/?spm_id_from=333.788.recommend_more_video.11&amp;vd_source=83831fc0970a6c8704479f7cfc679937">羽毛球改怎么练力量，为什么和健身不一样呢？爆发力和耐力怎么练？_哔哩哔哩_bilibili</a></strong></li>
<li><strong><a href="https://www.bilibili.com/video/BV1n94y127z9/?spm_id_from=333.999.0.0&amp;vd_source=83831fc0970a6c8704479f7cfc679937">【李宇轩】单打最佳套路，国际球员常用的（转身球套路），学上这套路，不只是限制对方进攻而且还是限制对方回球位置_哔哩哔哩_bilibili</a></strong></li>
<li><a href="https://www.bilibili.com/video/BV1yT411T78Y/?spm_id_from=333.880.my_history.page.click&amp;vd_source=83831fc0970a6c8704479f7cfc679937">【李宇轩】我发了短球对方总推我底线就特别难受！怎么解决？_哔哩哔哩_bilibili</a></li>
<li><a href="https://www.bilibili.com/video/BV1pN4y1F72H/?spm_id_from=333.999.0.0&amp;vd_source=83831fc0970a6c8704479f7cfc679937">羽毛球反手训练，让你获得更大的反手击球力量，轻松将球打到后场_哔哩哔哩_bilibili</a></li>
<li><strong><a href="https://www.bilibili.com/video/BV1PG41187Vq/?spm_id_from=333.999.0.0&amp;vd_source=83831fc0970a6c8704479f7cfc679937">羽毛球初学者常见错误_哔哩哔哩_bilibili</a></strong></li>
<li><a href="https://www.bilibili.com/video/BV1vU4y1r7Vf/?spm_id_from=333.999.0.0&amp;vd_source=83831fc0970a6c8704479f7cfc679937">羽毛球高级动作，提升你的羽毛球技能_哔哩哔哩_bilibili</a></li>
<li><a href="https://www.bilibili.com/video/BV19d4y1o75Z/?spm_id_from=333.999.0.0&amp;vd_source=83831fc0970a6c8704479f7cfc679937">羽毛球步法，轻松应对网前及后场球_哔哩哔哩_bilibili</a></li>
<li><a href="https://www.bilibili.com/video/BV1hT411w7fL/?spm_id_from=333.999.0.0&amp;vd_source=83831fc0970a6c8704479f7cfc679937">羽毛球挑球常出现的错误_哔哩哔哩_bilibili</a></li>
<li><strong><a href="https://www.bilibili.com/video/BV1LP4y1a7HH/?spm_id_from=333.880.my_history.page.click&amp;vd_source=83831fc0970a6c8704479f7cfc679937">【高清低视角】林丹vs薛松 剪辑版 享受丹神的球速吧_哔哩哔哩_bilibili</a></strong>
<ul>
<li>看完这个视频，感觉林丹很轻松的原因。
<ul>
<li>一是，回球到位，所以让对手很难受，因为回球到位，对手难受，自己才很轻松。无论是接杀，还是什么，回球都让对方很难受</li>
</ul></li>
</ul></li>
</ol>
<p><strong><mark>控制自己的情绪，积极向上生活</mark></strong></p>
<ol type="1">
<li><a href="https://www.bilibili.com/video/BV1U5411K7KP/?spm_id_from=333.880.my_history.page.click&amp;vd_source=83831fc0970a6c8704479f7cfc679937">陈铭 内卷到底是什么_哔哩哔哩_bilibili</a></li>
<li><a href="https://www.bilibili.com/video/BV1j14y1Y7dB/?spm_id_from=333.880.my_history.page.click&amp;vd_source=83831fc0970a6c8704479f7cfc679937">【陈铭】“我们有这个习惯，越是有负面情绪，越是伤害至亲的人”_哔哩哔哩_bilibili</a></li>
<li><a href="https://www.bilibili.com/video/BV1ug4y167Cq/?spm_id_from=333.880.my_history.page.click&amp;vd_source=83831fc0970a6c8704479f7cfc679937">【非正式会谈】致 还不想恋爱的自己和屏幕前的你们_哔哩哔哩_bilibili</a></li>
<li><a href="https://www.bilibili.com/video/BV11o4y1Q7bJ/?spm_id_from=333.880.my_history.page.click&amp;vd_source=83831fc0970a6c8704479f7cfc679937">陈铭：为什么我不建议年轻人摸鱼？_哔哩哔哩_bilibili</a></li>
<li><a href="https://www.bilibili.com/video/BV1ft411779h/?spm_id_from=333.880.my_history.page.click&amp;vd_source=83831fc0970a6c8704479f7cfc679937">【非正式会谈5】陈铭传授当代青年人如何应对和抵抗焦虑_哔哩哔哩_bilibili</a></li>
<li><a href="https://www.bilibili.com/video/BV1TA411A7M4/?spm_id_from=333.880.my_history.page.click&amp;vd_source=83831fc0970a6c8704479f7cfc679937">拒绝焦虑！拒绝内卷！非正式会谈这个片段真的好喜欢，宝藏综艺！_哔哩哔哩_bilibili</a></li>
</ol>
<p><strong><mark>宗教、中国人信仰的到底是什么</mark></strong></p>
<ol type="1">
<li><a href="https://www.bilibili.com/video/BV1te4y1v79b/?spm_id_from=333.880.my_history.page.click&amp;vd_source=83831fc0970a6c8704479f7cfc679937">武汉大学陈铭：论恐惧与鬼_哔哩哔哩_bilibili</a></li>
</ol>
<h1 id="三英语"><strong>三、英语</strong></h1>
<ol type="1">
<li><a href="https://www.bilibili.com/video/BV13B4y1E78c/?spm_id_from=333.999.0.0&amp;vd_source=83831fc0970a6c8704479f7cfc679937">中英文逻辑_哔哩哔哩_bilibili</a></li>
<li><a href="https://www.bilibili.com/video/BV16T41137jP/?spm_id_from=333.999.0.0&amp;vd_source=83831fc0970a6c8704479f7cfc679937">雅思写作小作文进阶篇——用数学模型拿捏考官_哔哩哔哩_bilibili</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/83528343">雅思写作Task 1（小作文、图表作文）各题型攻略全解析 - 知乎 (zhihu.com)</a></li>
<li></li>
</ol>
]]></content>
      <categories>
        <category>学习链接</category>
      </categories>
  </entry>
  <entry>
    <title>Weekly Meeting</title>
    <url>/2022/10/23/weeklymeeting/</url>
    <content><![CDATA[<h1 id="weekly-meeting">Weekly Meeting</h1>
<h2 id="section">2022-10-25</h2>
<h3 id="comments">1、comments</h3>
<h3 id="近期工作">2、近期工作</h3>
<ol type="1">
<li><em>2022-10-25，周三</em>，上午英语，下午海洋</li>
</ol>
<h3 id="下一步计划">3、下一步计划</h3>
<hr>
<h2 id="section-1">2022-10-25</h2>
<h3 id="comments-1">1、comments</h3>
<h3 id="近期工作-1">2、近期工作</h3>
<ol type="1">
<li><em>2022-10-19，周三</em>，早上英语课，到实验打印论文 <em>An approach to enhance packet classification performance of software-defined network using deep learning</em>，下午中西方海洋史 ，看完了论文，但需要补充神经网络和反向传播算法，才能进一步理解。晚上，输出<code>packet</code>和<code>packet</code>对应哈希表的序号</li>
</ol>
<ul>
<li><p><strong><mark>如何输出变量到CSV文件</mark></strong></p>
<ol type="1">
<li><a href="https://blog.csdn.net/weixin_43918046/article/details/106367507?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-106367507-blog-120163625.pc_relevant_aa_2&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-106367507-blog-120163625.pc_relevant_aa_2&amp;utm_relevant_index=1">C++文件操作，读取，写入，追加写入_Guapifang的博客-CSDN博客_c++ 追加写文件</a></li>
<li><a href="https://blog.csdn.net/weixin_43237242/article/details/100905961">C++将数据输出格式为.csv文本文件（也可用excel打开）_浦柳人的博客-CSDN博客_c++输出csv文件</a></li>
</ol></li>
</ul>
<ol start="2" type="1">
<li><em>2022-10-20，周四</em>，上午工程伦理，下午睡觉醒来，洗洗衣服就5点，然后就跑去运动了。晚上做了hexo博客。</li>
<li><em>2022-10-21，周五</em>，上午打球，下午看反向传播算法</li>
<li><em>2022-10-22，周六</em>，上午打球，下午看论文，但是 <strong>效率很低</strong></li>
<li><em>2022-10-23，周日</em>，上午打球，下午复习反向传播</li>
<li><em>2022-10-24，周一</em>，上午英语课，下午睡到3点
<ul>
<li>外卖困在系统里。</li>
<li>整blog，又5点了，跑步吃饭。</li>
</ul></li>
<li><em>2022-10-25，周二</em>，上午数字图像处理，下午党支部会议，晚上组会。</li>
</ol>
<blockquote>
<p>存在的问题：</p>
<p><strong><font color="red">做事效率不够专注，效率太低。</font></strong></p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">TupleMergeOnline::ClassifyAPacket</span><span class="params">(<span class="type">const</span> Packet&amp; p)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//printf(&quot;----------------------------------------------\\n&quot;);</span></span><br><span class="line"><span class="comment">//printf(&quot;TupleMergeOnline::ClassifyAPacket\\n&quot;);</span></span><br><span class="line">fstream csv;</span><br><span class="line">csv.<span class="built_in">open</span>(<span class="string">&quot;output.csv&quot;</span>,ios::out|ios::app); <span class="comment">//打开文件路径 ios::out输出，ios::app追加方式，不会覆盖原来的数据</span></span><br><span class="line"><span class="comment">//csv&lt;&lt;&quot;SIP&quot;&lt;&lt;&quot;,&quot;&lt;&lt;&quot;DIP&quot;&lt;&lt;&quot;,&quot;&lt;&lt;&quot;SP&quot;&lt;&lt;&quot;,&quot;&lt;&lt;&quot;DP&quot; &lt;&lt;&quot;,&quot;&lt;&lt;&quot;Pro&quot;&lt;&lt;endl;    //输入内容，注意要用逗号，隔开</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//for (int i = 0;i &lt; 5; i++)&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//printf(&quot;p[%d]==%d &quot;,i,p[i]);	</span></span><br><span class="line"><span class="comment">//cout &lt;&lt;&quot;p==&quot; &lt;&lt;p[i] &lt;&lt; &#x27; &#x27; ;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> prior = <span class="number">-1</span>;</span><br><span class="line"><span class="type">int</span> q = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">0</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> &amp; t : tables) &#123;  <span class="comment">//遍历每一个哈希表</span></span><br><span class="line">a++;</span><br><span class="line"><span class="keyword">if</span> (t-&gt;<span class="built_in">MaxPriority</span>() &gt; prior) &#123; <span class="comment">//判断是否要进入哈希表</span></span><br><span class="line"><span class="keyword">if</span>(t-&gt;<span class="built_in">ClassifyAPacket</span>(p) &gt; prior)&#123; </span><br><span class="line"><span class="comment">//一旦进入哈希表查找，当哈希表的规则优先级高时，当前哈希表就有可能匹配的哈希表，就要用b来记录</span></span><br><span class="line">prior = t-&gt;<span class="built_in">ClassifyAPacket</span>(p);</span><br><span class="line">b = a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//prior = max(prior, t-&gt;ClassifyAPacket(p));</span></span><br><span class="line">q++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//printf(&quot;b==%d\\n&quot;,b);</span></span><br><span class="line">csv &lt;&lt; p[<span class="number">0</span>]&lt;&lt;<span class="string">&quot;,&quot;</span>&lt;&lt;p[<span class="number">1</span>]&lt;&lt;<span class="string">&quot;,&quot;</span>&lt;&lt;p[<span class="number">2</span>]&lt;&lt;<span class="string">&quot;,&quot;</span>&lt;&lt;p[<span class="number">3</span>]&lt;&lt;<span class="string">&quot;,&quot;</span>&lt;&lt;p[<span class="number">4</span>] &lt;&lt;<span class="string">&quot;,&quot;</span>&lt;&lt; b &lt;&lt;endl;</span><br><span class="line">csv.<span class="built_in">close</span>();</span><br><span class="line"><span class="built_in">QueryUpdate</span>(q);</span><br><span class="line"><span class="keyword">return</span> prior;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="section-2">2022-10-18</h2>
<h3 id="comments-2">1、comments</h3>
<h3 id="近期工作-2">2、近期工作</h3>
<ol type="1">
<li><p>周三，在实验室电脑上安装虚拟机，安装gcc、g++，运行PartitionSort的代码，从中提取TSS的指标（看图）。问师姐的当前的方案，目前需求是需要找到查找数据包在哪个哈希表的那段代码，</p></li>
<li><p>周四，与老师讨论，规范weekly meeting的内容。跟作者发邮件</p>
<ul>
<li><p><strong><mark>如何发邮件</mark></strong></p>
<ol type="1">
<li><strong><a href="https://www.zhihu.com/question/27145261">如何礼貌地向文献作者索要源代码？ - 知乎 (zhihu.com)</a></strong></li>
<li><strong><a href="https://www.zhihu.com/question/29748091">给论文作者发邮件问问题？ - 知乎 (zhihu.com)</a></strong></li>
<li><strong><a href="https://blog.csdn.net/wuyanne/article/details/116047368">发邮件向论文作者卑微求代码模板_一只小小小飞鸟的博客-CSDN博客_给论文作者发邮件请教问题模板</a></strong></li>
</ol></li>
<li><p><strong><mark>邮件内容</mark></strong></p></li>
</ul></li>
<li><p>周五，和张楠讨论<em>Fast Online Packet Classification With Convolutional Neural Network</em></p></li>
<li><p>周六，看TM中TSS部分的代码</p>
<ul>
<li><strong><mark>cuckoo hash</mark></strong>
<ol type="1">
<li><strong><a href="https://zhuanlan.zhihu.com/p/462815302">布隆过滤器与布谷鸟过滤器 - 知乎 (zhihu.com)</a></strong></li>
<li><strong><a href="https://zhuanlan.zhihu.com/p/442498412">布谷鸟哈希和布谷鸟过滤器 - 知乎 (zhihu.com)</a></strong></li>
<li><strong><a href="https://blog.csdn.net/nannanxiami/article/details/109568254">Cuckoo Hash 布谷鸟哈希_nannanxiami的博客-CSDN博客</a></strong></li>
<li><strong><a href="https://blog.csdn.net/suwei19870312/article/details/7442786?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-7442786-blog-109568254.pc_relevant_3mothn_strategy_recovery&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-7442786-blog-109568254.pc_relevant_3mothn_strategy_recovery&amp;utm_relevant_index=1">Cuckoo Hash 基本思想和代码实现_码农SW的博客-CSDN博客_cuckoo hash</a></strong></li>
<li><strong><a href="https://blog.csdn.net/wc13197389627/article/details/112433980?spm=1001.2101.3001.6650.5&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-5-112433980-blog-109568254.pc_relevant_3mothn_strategy_recovery&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-5-112433980-blog-109568254.pc_relevant_3mothn_strategy_recovery&amp;utm_relevant_index=6">Cuckoo Hash及其性质_Rauchy的博客-CSDN博客_cuckoo hash</a></strong></li>
</ol></li>
</ul></li>
<li><p>周一，<em>A Learned Bloom Filter-assisted Scheme for Packet Classification in Software-Defined Networking</em></p>
<ul>
<li><strong><mark>Bloom Filter</mark></strong>
<ol type="1">
<li><a href="https://blog.csdn.net/qq_40124555/article/details/122810154">什么是布隆过滤器？如何使用？_Java技术债务的博客-CSDN博客_布隆过滤器</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/148716788">通俗易懂讲布隆过滤器 - 知乎 (zhihu.com)</a></li>
<li><a href="https://developer.aliyun.com/article/1046992">图解布隆过滤器，十分钟带你理解什么是布隆过滤器？-阿里云开发者社区 (aliyun.com)</a></li>
</ol></li>
<li><strong><mark>cross production 交叉熵</mark></strong>
<ol type="1">
<li><a href="https://blog.csdn.net/xiao_xian_/article/details/116011455">机器学习--- 交叉熵损失(CrossEntropy Loss)--(附代码)_Jankin_Tian的博客-CSDN博客_交叉熵损失函数代码</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/35709485">损失函数｜交叉熵损失函数 - 知乎 (zhihu.com)</a></li>
<li></li>
</ol></li>
</ul></li>
</ol>
<h3 id="下一步计划-1">3、下一步计划</h3>
]]></content>
      <categories>
        <category>科研</category>
      </categories>
      <tags>
        <tag>汇报</tag>
      </tags>
  </entry>
  <entry>
    <title>如何阅读文献</title>
    <url>/2022/10/20/00/%E8%AF%BB%E6%96%87%E7%8C%AE/</url>
    <content><![CDATA[<h2 id="如何阅读文献">如何阅读文献</h2>
<blockquote>
<p>清华大学唐潇风</p>
</blockquote>
<ol type="1">
<li><p>看标题，摘要，最值得抓取的、不明白的是什么。不适合刚开始读文献的学生。把每篇文献整理成三句话：</p>
<ul>
<li>为什么做</li>
<li>怎么做的</li>
<li>得到什么</li>
</ul>
<p>之所以能做到提炼成三句话，往往是对这个领域特别熟悉的，知道别人做过什么</p></li>
<li><p>精读<code>20</code> 篇，每一句话。</p></li>
<li><p>信息抓取的角度，翻译是可以的，<strong>但写文章的时候，就要从头开始想怎么写</strong></p></li>
<li><p>为了写作，写作的角度，读原文，才能看到别人的语言是如何使用的。</p></li>
<li><p><strong>做到让自己经常写这件事不是那么容易</strong>，总是拖到最后，写个两三天，一两个礼拜。尽量把 <strong>负荷均摊化，每天写半小时，持续性的写。</strong></p></li>
</ol>
]]></content>
      <categories>
        <category>科研</category>
      </categories>
      <tags>
        <tag>文献</tag>
      </tags>
  </entry>
  <entry>
    <title>虚拟机安装Ubuntu18.04</title>
    <url>/2021/10/21/02%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6/%E5%AE%89%E8%A3%85Ubuntu/</url>
    <content><![CDATA[<h1 id="安装ubuntu和ndnsim遇到的问题">安装Ubuntu和ndnSIM遇到的问题</h1>
<h2 id="安装好ubuntu后无法复制粘贴"><mark>安装好Ubuntu后，无法复制粘贴</mark></h2>
<ul>
<li>先去装<code>Vmstation tools</code>，安装过程中会遇到的问题。需要在虚拟机中设置一下</li>
<li>但仍然无法复制粘贴 参考<a href="https://www.zhihu.com/question/41586989">虚拟机安装好了VMtools了,但是还是不能实现文件拖拽和复制功能？(zhihu.com)</a></li>
<li><strong>埋坑</strong>_办法是 先<code>vmware-uninstall-tools.pl</code>把你安装的不能运行的<code>vmtools</code>卸载了.然后 <code>apt-get install open-vm-tools-desktop</code>。 <code>reboot</code>。then ok</li>
</ul>
<h2 id="ubuntu字体大小更改"><mark>Ubuntu字体大小更改</mark></h2>
<ul>
<li><p><strong><a href="https://blog.csdn.net/dghcs18/article/details/104420127">如何调整Ubuntu的字体大小？</a></strong></p></li>
<li><p><code>Ubuntu</code>更改源</p></li>
</ul>
<h2 id="安装ndnsim后无法可视化"><mark>安装ndnSIM后，无法可视化。</mark></h2>
<ul>
<li><p><strong><a href="https://blog.csdn.net/GregoryHanson/article/details/83036964">ndnSIM安装教程</a></strong></p></li>
<li><p>在尝试了网上所有办法后，仍是不行。以下是尝试仍然不行的：</p></li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20200316154116957.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk3NDQxMw==,size_16,color_FFFFFF,t_70" alt="可以看到ndnSIM是enabled的" style="zoom: 50%;"></p>
<p><strong>可以看到图中的Python Binding 和PyViz visualizer都是 not enabled</strong></p>
<ul>
<li><strong><a href="https://blog.csdn.net/xiaoxin990214/article/details/70157263">ndnSIM中可视化的解决办法-CSDN博客</a></strong></li>
<li><strong><a href="https://blog.csdn.net/neuwyt/article/details/52242853">ndnSIM 2.0 因缺少pythonbind无法使用visual组件问题 —pybindgen (found '') ".. ns3::VisualSimulatorImpl not found"</a></strong></li>
<li><strong><a href="https://blog.csdn.net/sinat_36418396/article/details/106569512">执行 sudo ./waf --run second --vis 出现错误：VisualSimulatorImpl not found-CSDN博客</a></strong></li>
</ul>
<p>原因在于python依赖的安装包没有安装。</p>
<h3 id="python-binding解决">python Binding解决</h3>
<ol type="1">
<li>安装python3</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install python3-pip</span><br><span class="line">pip3 install pybindgen</span><br></pre></td></tr></table></figure>
<ul>
<li><a href="https://www.lipsuper.com/index.php/2020/10/13/python-pit/">Python报错解决Command 'pip' not found, but there are 18 similar ones.</a></li>
<li><a href="https://blog.csdn.net/qq_31648921/article/details/112404288">ns-3学习手记10_ns3.29中PyViz visualizer没有enabled，进行安装.</a></li>
<li><a href="https://blog.csdn.net/weixin_43974413/article/details/104899594">ubuntu18下 ndnSIM安装过程详解。</a></li>
</ul>
<h3 id="pyviz-visualizer解决">PyViz visualizer解决</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install python-dev python-pygraphviz python-kiwi python-pygoocanvas python-gnome2 gir1.2-goocanvas-2.0 python-rsvg</span><br></pre></td></tr></table></figure>
<ul>
<li><p><strong><a href="https://blog.csdn.net/qq_31676673/article/details/88107454">在NS-3中安装可视化工具pyviz的一些问题的解决</a></strong></p></li>
<li><p><strong><a href="https://www.dazhuanlan.com/chenalonso/topics/1556322">ndnSIM仿真平台使用之安装</a></strong></p></li>
<li><p>可以再把与python有关的再装一遍</p></li>
<li><figure>
<img src="https://img-blog.csdnimg.cn/20200316154116957.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk3NDQxMw==,size_16,color_FFFFFF,t_70" alt="可以看到ndnSIM是enabled的"><figcaption aria-hidden="true">可以看到ndnSIM是enabled的</figcaption>
</figure></li>
<li><p>出现以下图片后</p></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./waf</span><br></pre></td></tr></table></figure>
<ul>
<li>进行编译，但会出现卡了，这时需要增大虚拟机内存</li>
<li>重新编译，终于安装好了</li>
</ul>
<h2 id="其他参考网站">其他参考网站</h2>
<ul>
<li><p><a href="https://blog.csdn.net/weixin_43314519/article/details/106531060">NS3快速入门（使用VScode查看、编译代码）</a></p></li>
<li><p><a href="https://blog.csdn.net/weixin_43314519/article/details/106504008">NS3 入门环境搭建（VM虚拟机+Ubuntu，常见错误解析）</a></p></li>
<li><p><a href="https://blog.csdn.net/fwhdzh/article/details/106292166">使用vscode开发ns3项目（代码高亮、自动补全支持）</a></p></li>
<li><p><a href="https://cn.bing.com/search?q=vscode运行ns-3&amp;form=ANNTH1&amp;refig=062a1e9b111042da825ae882e17b4c22">vscode运行ns-3 - 国内版 Bing</a></p></li>
</ul>
]]></content>
      <tags>
        <tag>安装软件</tag>
      </tags>
  </entry>
  <entry>
    <title>VS2019新建C自动添加作者版权等信息</title>
    <url>/2022/05/16/02%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6/VS%E6%96%B0%E5%BB%BAcpp%E8%87%AA%E5%8A%A8%E6%B7%BB%E5%8A%A0%E4%BD%9C%E8%80%85%E7%89%88%E6%9D%83%E7%AD%89%E4%BF%A1%E6%81%AF/</url>
    <content><![CDATA[<h1 id="visualstudio2019新建c自动添加作者版权等信息">VisualStudio2019新建C自动添加作者版权等信息</h1>
<h4 id="参考">参考</h4>
<ul>
<li><p><a href="https://blog.csdn.net/weixin_43949535/article/details/100050210">给VS2019添加上自己的个人信息_vs2019添加作者</a></p></li>
<li><p><a href="http://c.biancheng.net/cpp/html/761.html">华为C语言编程规范（3）—注释_C语言中文网</a></p></li>
<li><p><a href="https://www.cnblogs.com/minuy/p/14058721.html">【C#】VS2019新建C#类自动添加作者版权等信息</a></p></li>
<li><p><a href="https://blog.csdn.net/weixin_40962970/article/details/115005630">c语言注释规范_c语言注解</a></p></li>
</ul>
<h3 id="注释规范">注释规范</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/*****************************************************************</span><br><span class="line">Copyright: 1988-1999, Huawei Tech. Co., Ltd.</span><br><span class="line">File name: 文件名</span><br><span class="line">Description: 用于详细说明此程序文件完成的主要功能，与其他模块或函数的接口，输出值、取值范围、含义及参数间的控制、顺序、独立或依赖等关系</span><br><span class="line">Author: 作者</span><br><span class="line">Version: 版本</span><br><span class="line">Date: 完成日期</span><br><span class="line">History: 修改历史记录列表， 每条修改记录应包括修改日期、修改者及修改内容简述。</span><br><span class="line">*****************************************************************/</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/**══════════════════════════════════╗</span><br><span class="line">*作    者：songbaobao                                                ║</span><br><span class="line">*职    业：我以我血荐轩辕                                              ║                                              </span><br><span class="line">*CSND地址：https://blog.csdn.net/weixin_43949535                       ║</span><br><span class="line">**GitHub ：https://github.com/TsinghuaLucky912/My_own_C-_study_and_blog║</span><br><span class="line">*═══════════════════════════════════╣</span><br><span class="line">*创建时间：                                                           </span><br><span class="line">*功能描述：                                                            </span><br><span class="line">*                                                                      </span><br><span class="line">*                                                                      </span><br><span class="line">*═══════════════════════════════════╣</span><br><span class="line">*结束时间:                                                           </span><br><span class="line">*═══════════════════════════════════╝</span><br><span class="line">//                .-~~~~~~~~~-._       _.-~~~~~~~~~-.</span><br><span class="line">//            __.&#x27;              ~.   .~              `.__</span><br><span class="line">//          .&#x27;//              西南\./联大               \\`.</span><br><span class="line">//        .&#x27;//                     |                     \\`.</span><br><span class="line">//      .&#x27;// .-~&quot;&quot;&quot;&quot;&quot;&quot;&quot;~~~~-._     |     _,-~~~~&quot;&quot;&quot;&quot;&quot;&quot;&quot;~-. \\`.</span><br><span class="line">//    .&#x27;//.-&quot;                 `-.  |  .-&#x27;                 &quot;-.\\`.</span><br><span class="line">//  .&#x27;//______.============-..   \ | /   ..-============.______\\`.</span><br><span class="line">//.&#x27;______________________________\|/______________________________`.</span><br><span class="line">*/</span><br><span class="line">————————————————</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>安装软件</tag>
      </tags>
  </entry>
  <entry>
    <title>安装Ubuntu18.04双系统</title>
    <url>/2022/10/18/02%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6/%E5%AE%89%E8%A3%85Ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h2 id="安装ubuntu双系统">安装Ubuntu双系统</h2>
<ol type="1">
<li><a href="https://blog.csdn.net/qq_43106321/article/details/105361644">Windows 10 安装ubuntu 18.04 双系统（超详细教程）_Ycitus的博客-CSDN博客_windows10安装双系统ubuntu</a></li>
<li><a href="https://blog.csdn.net/weixin_44623637/article/details/106723462">Ubuntu18.04安装教程——超详细的图文教程_Krasjet_Yu.的博客-CSDN博客_ubuntu18.04</a></li>
<li><a href="https://blog.csdn.net/wangshiming88/article/details/85333046?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase">安装Ubuntu Linux系统时硬盘分区最合理的方法ubuntu18.04分区设置_wangshiming的博客-CSDN博客_ubuntu18.04安装分区</a></li>
<li><a href="https://blog.csdn.net/baidu_36602427/article/details/86548203">Ubuntu18.04安装教程_寥廓长空的博客-CSDN博客_ubuntu安装教程</a></li>
</ol>
<h2 id="注意"><mark>注意</mark></h2>
<ol type="1">
<li>进入Bios界面，一直按<code>F2</code></li>
<li>如何启动进入选择系统界面还没解决，linux系统用的不多，总体来说还是虚拟机方便，但是虚拟机占用内存。</li>
</ol>
]]></content>
      <tags>
        <tag>安装软件</tag>
      </tags>
  </entry>
  <entry>
    <title>什么是机器学习</title>
    <url>/2022/10/21/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/00.%E4%BB%80%E4%B9%88%E6%98%AF%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="机器学习相关的链接">机器学习相关的链接</h2>
<ul>
<li><a href="https://blog.csdn.net/gongxifacai_believe/category_6834186.html">Machine Learning_魏晓蕾的博客-CSDN博客</a><mark>前辈们做的机器学习笔记</mark></li>
<li><a href="https://nndl.github.io/">神经网络与深度学习-邱锡鹏</a></li>
<li><a href="https://github.com/songyingxin/NLPer-Interview">数学基础、机器学习</a></li>
<li><a href="https://zh-v2.d2l.ai/index.html">《动手学深度学习》 — 动手学深度学习 2.0.0-beta0 documentation (d2l.ai)</a></li>
<li><a href="https://blog.csdn.net/a1015553840/article/details/51085129#reply">機器學習基石(Machine Learning Foundations) 机器学习基石 课后习题链接汇总_Mac Jiang的博客-CSDN博客</a></li>
</ul>
<h2 id="如何学习">如何学习</h2>
<p>好了废话不多说，我们进入入门阶段的正题。入门阶段主要有三个任务：</p>
<ul>
<li>快速看完周志华的《西瓜书》；</li>
<li>看吴恩达 Coursera 上的《机器学习》；</li>
<li>调包跑算法。</li>
</ul>
<div class="tip">
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/112484706">如何快速入门机器学习</a></li>
</ul>
</div>
<h2 id="什么是机器学习">什么是机器学习</h2>
<p>机器学习算法主要的两种类型被称之为监督学习和无监督学习。</p>
<h3 id="监督学习"><strong>监督学习</strong></h3>
<ul>
<li><strong>监督学习</strong> 就是我们给学习算法的一个数据集。<strong>这个数据集由“正确答案”组成</strong> 。在这个例子中，我们给出了一系列房子的数据，从给定的数据集中每个样本的真实售价，<strong>然后运用学习算法，算出更多的正确答案</strong> 。这就叫做 <strong>回归问题</strong>。
<ul>
<li><strong>回归问题</strong> 就是通过离散的数据来推测出一个连续的输出。</li>
<li><strong>分类问题</strong> 的目标是推测出一组离散的结果。</li>
</ul></li>
</ul>
<h3 id="无监督学习"><strong>无监督学习</strong></h3>
<ul>
<li><strong>无监督学习</strong> 中没有任何标签或者所有数据的标签都是一样的。这样就不知道如何处理数据，也不知道每个数据点是什么。只知道，这是一个数据集。针对数据集，无监督学习，能够判断出数据有两个不同的聚集簇。二者不同，无监督学习算法可能会把这些数据分成两个不同的簇，所以这叫做聚类算法。可以应用的地方很多。</li>
<li>我们只有一堆数据，不知道数据中有什么东西，不知道什么人是什么类型，甚至不知道有哪几种类型，类型是什么。我们要自动的把个体会聚集到某个类。</li>
</ul>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
  </entry>
  <entry>
    <title>机器学习资料链接</title>
    <url>/2022/10/23/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/00%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%80%BB/</url>
    <content><![CDATA[<h2 id="数学基础"><strong>1. 数学基础</strong></h2>
<ol type="1">
<li>老齐课程，<a href="http://www.itdiffer.com/">首页 · 老齐教室 (itdiffer.com)</a>
<ul>
<li><strong><a href="http://math.itdiffer.com/">本书说明 · 机器学习数学基础 (itdiffer.com)</a></strong></li>
<li><strong><a href="https://www.bilibili.com/video/BV1QG411t72j/?spm_id_from=333.788&amp;vd_source=83831fc0970a6c8704479f7cfc679937">如何度量距离_哔哩哔哩_bilibili</a></strong></li>
</ul></li>
<li><a href="https://www.bilibili.com/video/BV1pb411u7t1?spm_id_from=333.999.0.0">线性代数基础课程【小元老师】【超级0基础入门】</a></li>
<li><a href="https://www.bilibili.com/video/BV1ib411t7YR?spm_id_from=333.999.0.0">线性代数的本质</a></li>
<li><a href="https://www.bilibili.com/video/BV14b411M7Jn?spm_id_from=333.999.0.0">概率论与数理统计知识详解【小元老师】【考研数学】</a></li>
<li><a href="https://www.bilibili.com/video/BV1ys411472E?spm_id_from=333.999.0.0">【官方双语/合集】线性代数的本质 - 系列合集</a></li>
<li><a href="https://cloud.tencent.com/developer/article/1729545">非常适合初学者的机器学习的数学基础专辑（pdf下载）</a></li>
<li><a href="https://cloud.tencent.com/developer/article/1843235?from=article.detail.1729545">建议初学者收藏的机器学习初学者手抄本：数学基础、机器学习经典算法、统计学习方法等</a></li>
<li>机器学习数学基础pdf
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/104986706">《机器学习数学基础》已开源，附完整下载！ - 知乎 (zhihu.com)</a></li>
<li><a href="https://mml-book.github.io/">Mathematics for Machine Learning | Companion webpage to the book “Mathematics for Machine Learning”.</a></li>
</ul></li>
</ol>
<h2 id="机器学习"><strong>2. 机器学习</strong></h2>
<ol type="1">
<li>🔗<a href="/2022/07/21/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/00Tra_ML/02.%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/" title="线性回归">线性回归</a></li>
</ol>
<ul>
<li><a href="https://blog.csdn.net/gongxifacai_believe/category_6834186.html">Machine Learning_魏晓蕾的博客-CSDN博客</a><mark>前辈们做的机器学习笔记</mark></li>
<li><a href="https://www.bilibili.com/video/BV1jS4y1j74C?spm_id_from=333.999.0.0">机器学习之路【b站UP主】</a></li>
</ul>
<ol type="1">
<li><a href="https://www.bilibili.com/video/BV1Cx411i7op?spm_id_from=333.999.0.0">林轩田机器学习基石(国语)</a></li>
<li><strong><a href="https://www.bilibili.com/video/BV1aE411o7qd?spm_id_from=333.337.search-card.all.click">【白板推导系列】【合集 1～33】</a></strong></li>
<li><a href="https://www.bilibili.com/video/BV1eT4y1E73x?spm_id_from=333.999.0.0">【手推机器学习】矩阵求导7--最小二乘法举例</a></li>
<li><a href="https://www.bilibili.com/video/BV1ZM4y1w75P?spm_id_from=333.999.0.0">【神经网络】BP误差逆传播算法数学推导</a></li>
<li><a href="https://www.bilibili.com/video/BV13J41157Wq?spm_id_from=333.999.0.0">5字诀搞定BP反向传播算法推导</a></li>
<li><a href="https://github.com/dragen1860/Deep-Learning-with-TensorFlow-book">dragen1860/Deep-Learning-with-TensorFlow-book: 深度学习入门开源书，基于TensorFlow 2.0案例实战。</a></li>
<li><a href="https://christophm.github.io/interpretable-ml-book/preface-by-the-author.html">【英文】机器学习可解释性| Interpretable Machine Learning (christophm.github.io)</a></li>
<li></li>
</ol>
<h2 id="深度学习"><strong>3. 深度学习</strong></h2>
<ol type="1">
<li><strong><a href="https://www.bilibili.com/video/BV1if4y147hS?spm_id_from=333.999.0.0">动手学深度学习【李沐大神】</a></strong></li>
<li><a href="/2022/10/16/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/05DL/CNN/" title="CNN">🔗CNN</a></li>
</ol>
<h2 id="强化学习"><strong>4. 强化学习</strong></h2>
<ol type="1">
<li><strong>🔗<a href="机器学习/03RL/02RL介绍.md">第1节什么是强化学习?-北邮-鲁鹏老师</a></strong></li>
<li><a href="https://blog.csdn.net/SMALL_RL/article/details/123380320">强化学习 (Reinforcement Learning) 基础及论文资料汇总</a></li>
<li><a href="https://www.bilibili.com/video/BV13W411Y75P?spm_id_from=333.999.0.0">【莫烦Python】强化学习 Reinforcement Learning</a></li>
<li><a href="https://www.bilibili.com/video/BV16Y4y1M7DX?spm_id_from=333.999.0.0">强化学习基础 （本科生课程） 北京邮电大学 鲁鹏</a></li>
<li><a href="https://www.bilibili.com/video/BV1XP4y1d7Bk?spm_id_from=333.999.0.0">李宏毅</a></li>
<li><a href="https://www.bilibili.com/video/BV1rv41167yx/?spm_id_from=333.1007.top_right_bar_window_history.content.click&amp;vd_source=83831fc0970a6c8704479f7cfc679937">深度强化学习（全）_哔哩哔哩_bilibili</a></li>
<li><a href="https://www.bilibili.com/video/BV1CB4y1G777/?spm_id_from=333.1007.top_right_bar_window_history.content.click&amp;vd_source=83831fc0970a6c8704479f7cfc679937">【RLChina 2022】前沿进展五：应用多智能体强化学习解决现实问题——机遇和挑战 方飞_哔哩哔哩_bilibili</a></li>
<li><a href="https://www.bilibili.com/video/BV1vG4y1n7Rp/?spm_id_from=333.880.my_history.page.click&amp;vd_source=83831fc0970a6c8704479f7cfc679937">强化学习论文分享2022-10-13_哔哩哔哩_bilibili</a></li>
<li></li>
</ol>
<h2 id="cv"><strong>CV</strong></h2>
<p><a href="https://www.bilibili.com/video/BV1Xb411U79J?spm_id_from=333.999.0.0">数字图像处理</a></p>
<p>20220927</p>
<ul>
<li><a href="https://blog.csdn.net/weixin_43614795/article/details/84350463">理解 假阳性（false positive）和假阴性(false negative）概念_人间清欢的博客-CSDN博客_false positive</a></li>
<li><a href="https://www.jianshu.com/p/f8e5ee346ec9">假阳性错误和假阴性错误——笔记 - 简书 (jianshu.com)</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/443547881">机器学习VS深度学习：有什么区别？ - 知乎 (zhihu.com)</a></li>
<li></li>
</ul>
<p>机器学习手册分为三个部分，<strong>数学基础</strong>、<strong>机器学习经典算法</strong>、<strong>统计学习方法</strong>。建议有时间的同学可以这三个部分<strong>按照顺序学习</strong>，时间少的同学，我建议直接看机器学习经典算法，遇到问题查一下数学基础，也可以一边看机器学习经典算法，一边看统计学习方法，查漏补缺。</p>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>链接</tag>
      </tags>
  </entry>
  <entry>
    <title>侯捷C++面向对象(上)</title>
    <url>/2022/05/21/%E7%BC%96%E7%A8%8B/1.%E4%BE%AF%E6%8D%B7C++%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<h2 id="侯捷c面向对象"><strong>侯捷C++面向对象</strong></h2>
<p>很喜欢这种娓娓道来的讲课，而不是填鸭式的灌输知识点，对零碎的知识点特此记录。</p>
<blockquote>
<p><strong><font color="red">培养正规的、大气的编程习惯</font></strong></p>
</blockquote>
<p><code>class</code>是C++中最重要的，侯捷老师：“<strong>一个人写了一个<code>class</code>，看他是否受过良好的、正规的训练，看以下几点</strong>：”</p>
<!-- - 数据成员用`private`，成员函数大部分`public`
- 构造函数使用初始化列表的方式初始化。`initialization list`，并且要写默认值。
- 参数传递是`by value`还是`by reference`，同时考虑是否加`const`。尽可能的用`by reference`
- 函数返回值是`return by value`还是`return by reference`，同时考虑是否加`const`。尽可能的用`return by reference` -->
<ul>
<li>数据成员用<code>private</code>，成员函数大部分<code>public</code></li>
<li>构造函数使用初始化列表的方式初始化。<code>initialization list</code>，并且要写默认值。</li>
<li>参数传递是<code>by value</code>还是<code>by reference</code>，同时考虑是否加<code>const</code>。尽可能的用<code>by reference</code></li>
<li>函数返回值是<code>return by value</code>还是<code>return by reference</code>，同时考虑是否加<code>const</code>。尽可能的用<code>return by reference</code></li>
<li>对于一个函数本身，考虑是否加<code>const</code></li>
</ul>
<hr>
<p>知识点总结：</p>
<!-- > 1. `inline`函数，若函数在`class body`内定义，便自动能为`inline`函数**候选人**，函数外要加`inline`关键字，但究竟能不能成为`inline`函数，由编译器决定。`inline`函数像宏一样，有它的特性，但是没有它的缺点，`inline`函数执行速度很快。
> 2. 构造函数初始化要使用**初始化列表**的方式，不要用`assign`赋值的方式。数值的设定有两个阶段：先是初始化，再是赋值。构造函数可以`overloading`，**函数重载**，但是在编译器看来是不重名的。
> 3. `class`有带指针的，有不带指针的，不带指针的`class`多半不用写析构函数。
> 4. `class`中的函数有两种：改变成员数据的和不改变成员数据的，不改变成员数据的函数要加`const`
> 5. 参数传递尽可能的使用**引用**（`pass by reference`），**不要传值**（`pass by value`），因为`pass by value`是**整包**传过去，速度慢，而C语言中有指针，可以传首地址过去，加快了速度，C++中多了**引用**（`pass by reference`），拥有指针一样的特性（底层就是指针），但是更漂亮。指针和引用传到另一个函数里，改变值，本体也变了，但是如果传引用只是为了速度更快，不想改变值，加上`const`关键字。
> 6. 同样，函数返回值类型同样用引用（return by reference）。**传递者无需知道接受者试试以什么样的形式接收。**返回`value`可以用`value`接收，也可以用`reference`接收。而指针一定要有指针类型去接收。
> 7. `reference`作函数返回值类型，作参数传递，这些是很小的细节，但是影响效率。
>
>  -->
<ol type="1">
<li>inline函数，若函数在<code>class body</code>内定义，便自动能为<code>inline</code>函数<strong>候选人</strong>，函数外要加<code>inline</code>关键字，但究竟能不能成为<code>inline</code>函数，由编译器决定。<code>inline</code>函数像宏一样，有它的特性，但是没有它的缺点，<code>inline</code>函数执行速度很快。</li>
<li>构造函数初始化要使用<strong>初始化列表</strong>的方式，不要用<code>assign</code>赋值的方式。数值的设定有两个阶段：先是初始化，再是赋值。构造函数可以<code>overloading</code>，<strong>函数重载</strong>，但是在编译器看来是不重名的。</li>
<li><code>class</code>有带指针的，有不带指针的，不带指针的<code>class</code>多半不用写析构函数。</li>
<li><code>class</code>中的函数有两种：改变成员数据的和不改变成员数据的，不改变成员数据的函数要加<code>const</code></li>
<li>参数传递尽可能的使用<strong>引用</strong>（<code>pass by reference</code>），<strong>不要传值</strong>（<code>pass by value</code>），因为<code>pass by value</code>是<strong>整包</strong>传过去，速度慢，而C语言中有指针，可以传首地址过去，加快了速度，C++中多了<strong>引用</strong>（<code>pass by reference</code>），拥有指针一样的特性（底层就是指针），但是更漂亮。指针和引用传到另一个函数里，改变值，本体也变了，但是如果传引用只是为了速度更快，不想改变值，加上<code>const</code>关键字。</li>
<li>同样，函数返回值类型同样用引用（return by reference）。<strong>传递者无需知道接受者试试以什么样的形式接收。</strong>返回<code>value</code>可以用<code>value</code>接收，也可以用<code>reference</code>接收。而指针一定要有指针类型去接收。</li>
<li><code>reference</code>作函数返回值类型，作参数传递，这些是很小的细节，但是影响效率。</li>
<li></li>
</ol>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++-毕设</title>
    <url>/2022/04/21/%E7%BC%96%E7%A8%8B/C++/</url>
    <content><![CDATA[<h2 id="cc">C/C++</h2>
<h3 id="c基础知识">C++基础知识</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pdf/C++语法.pdf</span><br></pre></td></tr></table></figure>
<h3 id="基本语法">基本语法</h3>
<ol type="1">
<li><a href="http://c.biancheng.net/cpp/html/295.html"><font face="Monaco">sprintf()</font>函数：将格式化的数据写入字符串_C语言中文网</a>
<ul>
<li><font face="Monaco"><code>sprintf()</code></font>的作用是将一个格式化的字符串输出到一个<strong>目的字符串</strong>中，而<font face="Monaco"><code>printf()</code></font>是将一个格式化的字符串<strong>输出到屏幕</strong>。</li>
<li><font face="Monaco"><code>int sprintf(char *str, char * format [, argument, ...])</code></font>。<font face="Monaco">str</font>为要写入的字符串；<font face="Monaco">format</font>为格式化字符串，与<font face="Monaco"><code>printf()</code></font>函数相同；<font face="Monaco">argument</font>为变量。</li>
</ul></li>
<li><a href="http://c.biancheng.net/cpp/html/2522.html"><font face="Monaco">fscanf()</font>函数：将文件流中的数据格式化输入_C语言中文网</a></li>
<li><a href="https://blog.csdn.net/qq_19784349/article/details/82927169">C++基础之<strong>uint8_t</strong>_时光机 °的博客-CSDN博客</a></li>
<li><a href="https://blog.csdn.net/Mary19920410/article/details/71518130">浅析C语言之uint8_t / uint16_t / uint32_t /uint64_t_海阔天空sky的博客-CSDN博客</a></li>
<li><a href="https://blog.csdn.net/weixin_41106545/article/details/83213354?spm=1001.2101.3001.6650.6&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-6.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-6.pc_relevant_default&amp;utm_relevant_index=8">求一个数组中出现次数超过n/3的数(C++实现)_zhanyue666的博客-CSDN博客</a></li>
<li><a href="https://blog.csdn.net/xiangguang_fight/article/details/114839642?spm=1001.2101.3001.6650.8&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-8.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-8.pc_relevant_default&amp;utm_relevant_index=10">开学回归力扣：第十二题—— 229. 求众数 II（摩尔投票法）_xiangguang_fight的博客-CSDN博客</a></li>
<li></li>
</ol>
<hr>
<h3 id="毕设遇到的编程问题">毕设遇到的编程问题：</h3>
<p>2021年3月24日</p>
<ul>
<li><p><a href="https://blog.csdn.net/weixin_30684945/article/details/117078693?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_antiscanv2&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_antiscanv2&amp;utm_relevant_index=1">C语言全局变量多个cpp,c++多个文件中共用一个全局变量 变量跨文件使用_李勖晟的博客-CSDN博客</a></p></li>
<li><p><a href="https://blog.csdn.net/qq_27942333/article/details/84719737">C++将一个cpp文件中的变量应用到另一个cpp文件中_公子恒的博客-CSDN博客</a></p></li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> i; <span class="comment">//声明并定义 </span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> i; <span class="comment">//声明 </span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> i=<span class="number">10</span>; <span class="comment">//定义 </span></span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">f</span><span class="params">()</span>; <span class="comment">//声明 </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">f</span><span class="params">()</span> &#123;&#125;; <span class="comment">//定义</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p><a href="http://c.biancheng.net/view/1345.html">C++ getline函数用法详解 (biancheng.net)</a></p></li>
<li><p><a href="https://www.runoob.com/cprogramming/c-function-strcpy.html">C 库函数 – strcpy() | 菜鸟教程 (runoob.com)</a></p></li>
<li><p><a href="https://blog.csdn.net/qq_41282102/article/details/82695562">string中c_str()的用法_Lemonbr的博客-CSDN博客_string.c_str</a></p></li>
<li><p><a href="https://www.cnblogs.com/QG-whz/p/4509710.html">C++强制类型转换操作符 static_cast - melonstreet - 博客园 (cnblogs.com)</a></p></li>
<li><p><a href="https://zhuanlan.zhihu.com/p/33040213">C++类型转换之reinterpret_cast - 知乎 (zhihu.com)</a></p></li>
<li><p><a href="https://blog.csdn.net/qq_39779233/article/details/107585014">C++ 报错 error: ‘xxx’ was not declared in this scope_wongHome的博客-CSDN博客</a></p></li>
<li><p><a href="https://blog.csdn.net/silentob/article/details/76994618">const char * 、char const <em>、 char </em> const 三者的区别_SilentOB的博客</a></p></li>
<li><p><a href="https://blog.csdn.net/zhang_alongzd/article/details/52790905">C++中const char<em>, string 与char</em>的转化_风居住de街道的博客-CSDN博客</a></p></li>
<li><p><a href="https://www.cnblogs.com/tsingke/p/12075078.html">C++ 中 string和char* 的区别 - Tsingke - 博客园 (cnblogs.com)</a></p></li>
<li><p><a href="https://blog.csdn.net/qq_37368095/article/details/88525204?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_default&amp;utm_relevant_index=2">C++ 内存溢出&amp;内存泄漏_AiChiMomo.的博客-CSDN博客_c++ 内存溢出</a></p></li>
<li><p><a href="https://blog.csdn.net/Retrovich/article/details/84623641?spm=1035.2023.3001.6557&amp;utm_medium=distribute.pc_relevant_bbs_down_v2.none-task-blog-2~default~OPENSEARCH~Rate-8.pc_relevant_bbs_down_v2_default&amp;depth_1-utm_source=distribute.pc_relevant_bbs_down_v2.none-task-blog-2~default~OPENSEARCH~Rate-8.pc_relevant_bbs_down_v2_default">从缓冲系统文件到常见栈溢出函数_Retrovich的博客-CSDN博客_函数栈溢出</a></p></li>
<li><p><a href="https://bbs.csdn.net/topics/390681492">文件读写完后fclose（）就内存溢出-CSDN社区</a></p></li>
<li><p><strong><a href="https://blog.csdn.net/renyuxiaomei/article/details/78439864">C语言自定义函数如何返回数组_renyuxiaomei的博客-CSDN博客_返回数组的函数怎么写</a></strong></p></li>
<li><p><a href="https://blog.csdn.net/gavechan/article/details/45542913">用数组作为函数返回值_Gavechan的博客-CSDN博客_数组作为返回值</a></p></li>
<li><p><a href="https://blog.csdn.net/ac1085589289/article/details/85077580">错误信息was not declared in this scope</a></p></li>
</ul>
<p>-<a href="https://blog.csdn.net/sergery/article/details/8144731">C++, 想要使用string ,必须要用命名空间 std</a></p>
<hr>
<h3 id="c生成随机数">C++生成随机数？</h3>
<ul>
<li><a href="https://blog.csdn.net/on_june_7th/article/details/120392619">C++产生随机数_on_june_7th的博客-CSDN博客_c++随机数</a></li>
<li><a href="https://blog.csdn.net/cmm0401/article/details/54599083">C++中rand()函数的用法_风暴计划的博客-CSDN博客_c++ rand()</a></li>
<li><a href="https://blog.csdn.net/weixin_40539125/article/details/82721340">C++寻找数组最大值和最小值_Jeff_的博客-CSDN博客_c++求数组中的最大值和最小值</a></li>
</ul>
<p><strong><code>rand()</code></strong> 不需要参数，它会返回一个从 <strong><code>0</code></strong> 到最大随机数的任意整数，最大随机数的大小通常是固定的一个大整数。<strong><code>int num = rand() % 100</code></strong> ; 所以，num的值就是一个 <strong><code>0~99</code></strong> 中的一个随机数了。</p>
<p>如果要产生 <strong><code>1~100</code></strong> ，则是这样：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> num = <span class="built_in">rand</span>() % <span class="number">100</span> + <span class="number">1</span>; </span><br></pre></td></tr></table></figure>
<p><strong>总结来说</strong>，可以表示为： <strong><code>int num = rand() % n +a</code></strong>; 其中的 <strong><code>a</code></strong> 是起始值， <strong><code>n-1+a</code></strong> 是终止值， <strong><code>n</code></strong> 是整数的范围。</p>
<p><strong>一般性</strong> ：<code>rand() % (b-a+1)+ a</code>; 就表示 <strong><code>a~b</code></strong> 之间的一个随机整数。</p>
<p>若要产生 <strong><code>0-1</code></strong> 之间的小数，则可以先取得 <code>0-10</code>的整数，然后均除以 <strong><code>10</code></strong> 即可得到“随机到十分位”的 <strong><code>10</code></strong> 个随机小数。</p>
<p>通常 <strong><code>rand()</code></strong> 产生的随机数在每次运行的时候都是与上一次相同的，这样是为了便于程序的调试。</p>
<p>若要产生每次不同的随机数，则可以使用 <strong><code>srand( seed )</code></strong> 函数进行产生随机化种子，随着seed的不同，就能够产生 不同的随机数。</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C-C3程序猿</title>
    <url>/2021/09/21/%E7%BC%96%E7%A8%8B/C%E8%AF%AD%E8%A8%80/</url>
    <content><![CDATA[<h2 id="看c3程序员c视频的一些笔记">看c3程序员C++视频的一些笔记</h2>
<ul>
<li><a href="https://www.cnblogs.com/edisonchou/p/4669098.html">你必须知道的指针基础-8.栈空间与堆空间 - EdisonZhou - 博客园 (cnblogs.com)</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/165992745">C++中::和:， .和-&gt;的作用和区别? - 知乎 (zhihu.com)</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/141437664">static与const - 知乎 (zhihu.com)</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/141113043">一文带你了解static 和const - 知乎 (zhihu.com)</a></li>
<li><a href="https://blog.csdn.net/qq_15345177/article/details/88066050">(2条消息) c++中 new的使用方法_计量小菜鸡的博客-CSDN博客_c++中new的用法</a></li>
<li><a href="https://www.jianshu.com/p/14ac114b9558">C语言中a++与++a的区别 - 简书 (jianshu.com)</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/137383328">c++入门学习篇（1）之：：作用域符解析 - 知乎 (zhihu.com)</a></li>
<li></li>
</ul>
<p>在 C语言 的 switch（开关语句）中，break 语句还可用来在执行完一个 case（分支）后立即跳出当前 switch 结构。</p>
<h3 id="输入输出流">输入输出流</h3>
<p>cout是个对象，既不是关键字，也不是函数。</p>
<ol type="1">
<li>可以连续输出</li>
<li>自动识别类型</li>
</ol>
<p>cin同理</p>
<p>C中不能定义2个相同的变量和函数，会出现重定义</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//cin cout</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">12</span>;</span><br><span class="line">    <span class="type">char</span> b = <span class="string">&#x27;v&#x27;</span>;</span><br><span class="line">    <span class="type">float</span> c = <span class="number">34.56</span>;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">    cout &lt;&lt; a &lt;&lt;<span class="string">&#x27; &#x27;</span> &lt;&lt; b &lt;&lt;<span class="string">&#x27; &#x27;</span> &lt;&lt; c &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="命名空间">命名空间</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; <span class="comment">//使用命名空间</span></span><br><span class="line"><span class="comment">//命名空间，解决C语言中重定义</span></span><br><span class="line"><span class="keyword">namespace</span> stu <span class="comment">//声明命名空间</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">sort</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="number">23</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> stu1</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">sort</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="number">56</span> &lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> stu;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> stu1;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    stu::<span class="built_in">sort</span>();<span class="comment">//::作用域运算符</span></span><br><span class="line">    stu1::<span class="built_in">sort</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20211001101337224.png" alt="image-20211001101337224"><figcaption aria-hidden="true">image-20211001101337224</figcaption>
</figure>
<h3 id="结构体">结构体</h3>
<p>C语言中结构体看<a href="https://www.bilibili.com/video/BV1rW411R7g4?p=10">【C++教程】_哔哩哔哩_bilibili</a></p>
<ol type="1">
<li>C++中结构体中可以放函数</li>
<li>声明结构体变量不用struct关键字</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; <span class="comment">//使用命名空间</span></span><br><span class="line"><span class="comment">//命名空间</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">first</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">()</span> <span class="comment">//c++结构体中可以放函数</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Hello wolrd&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* data */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    first stu; <span class="comment">//声明结构体变量不用struct关键字</span></span><br><span class="line">    stu.a = <span class="number">23</span>;</span><br><span class="line">    cout &lt;&lt; stu.a &lt;&lt; endl;</span><br><span class="line">    stu.<span class="built_in">fun</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="new-delete">new &amp; delete</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//heap堆区空间的申请与释放，申请一定要释放</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> *p = <span class="keyword">new</span> <span class="type">int</span>;  <span class="comment">//new + 类型</span></span><br><span class="line">    <span class="type">float</span> *p1 = <span class="keyword">new</span> <span class="built_in">float</span>(<span class="number">134.56</span>); <span class="comment">//声明并初始化</span></span><br><span class="line"></span><br><span class="line">    *p = <span class="number">23</span>; <span class="comment">//write</span></span><br><span class="line">    cout &lt;&lt; *p &lt;&lt; endl &lt;&lt; *p1;  <span class="comment">//read</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> p;  <span class="comment">//释放: delete + 指针</span></span><br><span class="line">    <span class="keyword">delete</span> p1;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">------------------------------------------------------------------------</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> * <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//new的返回值类型是该数据类型的指针</span></span><br><span class="line">	<span class="type">int</span> *p = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">10</span>);<span class="comment">//开辟一个变量，用10来初始化</span></span><br><span class="line">	<span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//开辟一块数组</span></span><br><span class="line">	<span class="type">int</span> *arr = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">10</span>];<span class="comment">//arr为该数组的首地址</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		arr[i] = i + <span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; arr[i] &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">delete</span>[]arr;<span class="comment">//释放开辟的数组空间</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> *p1 = <span class="built_in">test01</span>();</span><br><span class="line">	cout &lt;&lt; *<span class="built_in">test01</span>() &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; *p1 &lt;&lt; endl;</span><br><span class="line">	<span class="built_in">test02</span>();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//heap堆区空间的申请与释放，申请一定要释放</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//申请数组空间</span></span><br><span class="line"></span><br><span class="line">   <span class="type">int</span> *p  = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">5</span>];</span><br><span class="line">   <span class="comment">//int *p1 = malloc(5*sizeof(int));</span></span><br><span class="line">   <span class="built_in">memset</span>(p,<span class="number">0</span>,<span class="number">5</span>*<span class="built_in">sizeof</span>(<span class="type">int</span>));<span class="comment">//初始化</span></span><br><span class="line">   p[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">   p[<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">   cout&lt;&lt; p[<span class="number">0</span>] &lt;&lt; endl &lt;&lt; p[<span class="number">2</span>] &lt;&lt; endl&lt;&lt; p[<span class="number">4</span>];</span><br><span class="line">   <span class="keyword">delete</span>[] p;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="引用">引用</h3>
<ul>
<li>引用声明时必须初始化</li>
<li>一个变量可以有多个引用</li>
</ul>
<p>引用给变量起别名，typedef给类型起别名</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="type">int</span> a = <span class="number">12</span>;</span><br><span class="line">   <span class="type">int</span> &amp;c = a; <span class="comment">//&amp;不是取地址，是引用。声明变量a的一个引用c，c是变量a的别名</span></span><br><span class="line"></span><br><span class="line">   c = <span class="number">14</span>;</span><br><span class="line">   cout &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20211002165551868.png" alt="image-20211002165551868"><figcaption aria-hidden="true">image-20211002165551868</figcaption>
</figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">//常量类型的引用</span></span><br><span class="line">   <span class="type">const</span> <span class="type">int</span> &amp;a = <span class="number">12</span>;</span><br><span class="line">   <span class="type">const</span> <span class="type">char</span> &amp;b = <span class="string">&#x27;v&#x27;</span>;</span><br><span class="line">   cout &lt;&lt; a &lt;&lt; endl &lt;&lt; b &lt;&lt; endl;</span><br><span class="line"><span class="comment">//数组的引用</span></span><br><span class="line">   <span class="type">int</span> arr[<span class="number">10</span>];</span><br><span class="line">   <span class="built_in">int</span> (&amp;p)[<span class="number">10</span>] = arr; <span class="comment">//p的用法和arr一样</span></span><br><span class="line">   p[<span class="number">0</span>] = <span class="number">100</span>;</span><br><span class="line">   cout &lt;&lt; arr[<span class="number">0</span>] &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">   <span class="type">int</span> arr2[<span class="number">2</span>][<span class="number">3</span>];</span><br><span class="line">   <span class="built_in">int</span> (&amp;p2)[<span class="number">2</span>][<span class="number">3</span>] = arr2;</span><br><span class="line">   p2[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">67</span>;</span><br><span class="line">   cout &lt;&lt; arr2[<span class="number">2</span>][<span class="number">3</span>]&lt;&lt;endl;</span><br><span class="line">   <span class="comment">//指针的引用</span></span><br><span class="line"><span class="comment">// 类型 + 引用</span></span><br><span class="line">   <span class="type">int</span> c = <span class="number">78</span>;</span><br><span class="line">   <span class="type">int</span> *point = &amp;c;</span><br><span class="line">   cout &lt;&lt; *point&lt;&lt;endl;</span><br><span class="line">   <span class="type">int</span>* (&amp;p3) = point;</span><br><span class="line">   *p3 = <span class="number">97</span>;</span><br><span class="line">   cout &lt;&lt; c;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="引用做参数">引用做参数</h3>
<p>传递参数的过程也是初始化的过程</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//引用做参数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">(<span class="type">int</span> &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   a = <span class="number">19</span>;<span class="comment">//操作的是同一块空间</span></span><br><span class="line">   <span class="comment">//cout &lt;&lt; a&lt;&lt;endl;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//整型做参数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun1</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   cout &lt;&lt; a&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//指针做参数，修改函数外部的值</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun2</span><span class="params">(<span class="type">int</span> *a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   *a = <span class="number">46</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="type">int</span> b = <span class="number">14</span>;</span><br><span class="line">   <span class="built_in">fun</span>(b);</span><br><span class="line">   cout &lt;&lt; b&lt;&lt;endl;<span class="comment">// 通过外部一个函数修改b的值，修改函数外部的值。</span></span><br><span class="line"></span><br><span class="line">   <span class="built_in">fun2</span>(&amp;b);</span><br><span class="line">   cout&lt;&lt;b;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="for循环">for循环</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//增强型for循环</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cout&lt;&lt;i &lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span></span><br></pre></td></tr></table></figure>
<h3 id="函数缺省值">函数缺省值</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//函数默认值</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun3</span><span class="params">(<span class="type">int</span> a = <span class="number">45</span>, <span class="type">float</span> g = <span class="number">67.98</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">(<span class="type">int</span> a = <span class="number">12</span>, <span class="type">char</span> b = <span class="string">&#x27;m&#x27;</span>)</span> <span class="comment">//全部指定</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; a &lt;&lt;<span class="string">&#x27; &#x27;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun2</span><span class="params">(<span class="type">int</span> a , <span class="type">char</span> b ,<span class="type">float</span> f = <span class="number">123.78</span>)</span><span class="comment">//部分指定，从右到左，连续指定</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; a &lt;&lt;<span class="string">&#x27; &#x27;</span> &lt;&lt; b &lt;&lt;<span class="string">&#x27; &#x27;</span> &lt;&lt; f &lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//函数有缺省值，函数调用不用实参</span></span><br><span class="line">	<span class="built_in">fun</span>();</span><br><span class="line">	<span class="comment">//部分指定，可以只写没有缺省值的参数</span></span><br><span class="line">	<span class="built_in">fun2</span>(<span class="number">54</span>,<span class="string">&#x27;y&#x27;</span>);</span><br><span class="line">	<span class="comment">// 有缺省值，传参数会覆盖掉缺省值</span></span><br><span class="line">	<span class="built_in">fun</span>(<span class="number">50</span>,<span class="string">&#x27;r&#x27;</span>);</span><br><span class="line">	<span class="comment">//有函数原型的，缺省值写在函数原型中</span></span><br><span class="line">	<span class="built_in">fun3</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun3</span><span class="params">(<span class="type">int</span> a , <span class="type">float</span> g )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; a &lt;&lt;<span class="string">&#x27; &#x27;</span> &lt;&lt; g &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="函数重载">函数重载</h3>
<p>同一作用域内，函数名字相同，参数列表不同（参数类型或参数个数不同）</p>
<p>c语言中，不允许函数名字相同</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数参数列表不同，就可以自动识别</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">(<span class="type">int</span> a )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">(<span class="type">float</span> f )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; f &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">(<span class="type">char</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; c &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//76.65默认是double类型的</span></span><br><span class="line">	<span class="built_in">show</span>(<span class="number">23</span>);</span><br><span class="line">	<span class="built_in">show</span>(<span class="number">43.56f</span>);</span><br><span class="line">	<span class="built_in">show</span>(<span class="string">&#x27;h&#x27;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>函数返回值不作为函数重载的条件</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">fun</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function">    <span class="comment">//会报错</span></span></span><br></pre></td></tr></table></figure>
<h3 id="类">类</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cpeople</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="type">int</span> a;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//申请一个对象</span></span><br><span class="line">	Cpeople op;</span><br><span class="line">	op.a = <span class="number">15</span>;</span><br><span class="line">	op.<span class="built_in">fun</span>();</span><br><span class="line"></span><br><span class="line">	Cpeople *op1 = <span class="keyword">new</span> Cpeople;</span><br><span class="line">	op1-&gt;a  = <span class="number">56</span>;</span><br><span class="line">	op1-&gt;<span class="built_in">fun</span>();</span><br><span class="line">	<span class="keyword">delete</span> op1;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="友元">友元</h3>
<ul>
<li>友元函数，不相关的函数去使用类内私有成员</li>
<li>友元类，不同类使用另一个类私有成员</li>
</ul>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20211004120911813.png" alt="image-20211004120911813"><figcaption aria-hidden="true">image-20211004120911813</figcaption>
</figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cpeople</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="type">int</span> a;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		a = <span class="number">54</span>;</span><br><span class="line">		cout &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">fun_pro</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		a = <span class="number">54</span>;</span><br><span class="line">		cout &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">fun2</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">friend</span> <span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">CP</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cchild</span> : <span class="keyword">public</span> Cpeople</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">fun6</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">fun_pro</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Cpeople op2;</span><br><span class="line">	op2.<span class="built_in">fun</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CP</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Cpeople op3;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">fun3</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		op3.<span class="built_in">fun</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Cpeople op;</span><br><span class="line">	op.<span class="built_in">fun</span>();</span><br><span class="line"></span><br><span class="line">	CP op4;</span><br><span class="line">	op4.<span class="built_in">fun3</span>();</span><br><span class="line"></span><br><span class="line">	Cchild op_child;</span><br><span class="line">	op_child.<span class="built_in">fun6</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>类和int一样，都是一种数据类型。只有用类声明对象时，才会开辟出一块空间</p>
<h3 id="成员函数">成员函数</h3>
<h4 id="构造函数自动调用">构造函数：自动调用</h4>
<p>在对象创建时候，调用。作用，==初始化类内的变量，赋值==。不要在构造函数内部加不相干的代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CStu</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="type">int</span> a;</span><br><span class="line">	<span class="type">float</span> f;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//gou zao function</span></span><br><span class="line">	<span class="built_in">CStu</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		a = <span class="number">14</span>;</span><br><span class="line">		f = <span class="number">53.98f</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">	CStu student1;</span><br><span class="line">	</span><br><span class="line">	CStu *stu2 = <span class="keyword">new</span> CStu;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; stu2-&gt;f &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; student1.a &lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt; student1.f &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>==类中的函数，可以类内声明，类外定义==</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//学生类</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//设计一个学生类，属性有姓名和学号，可以给其赋值，可以显示</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cstudent</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//属性，成员变量</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    string stu_name;</span><br><span class="line">    <span class="type">int</span> stu_id;</span><br><span class="line">    <span class="comment">//行为，成员函数，成员方法</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;The name of the student：&quot;</span> &lt;&lt; stu_name &lt;&lt;endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;The id of the student：&quot;</span> &lt;&lt; stu_id &lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">set_name</span><span class="params">(string name)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        stu_name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">set_id</span><span class="params">(<span class="type">int</span> id)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        stu_id = id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    Cstudent stu;</span><br><span class="line"><span class="comment">//    stu.stu_name = &quot;pp&quot;;</span></span><br><span class="line"><span class="comment">//    stu.stu_id = 13;</span></span><br><span class="line">    stu.<span class="built_in">set_id</span>(<span class="number">15</span>);</span><br><span class="line">    stu.<span class="built_in">set_name</span>(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line"></span><br><span class="line">    stu.<span class="built_in">show</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="成员属性私有化">成员属性私有化</h4>
<p>用公共的函数接口来访问</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cperson</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">set_name</span><span class="params">(string name)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        C_name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">string <span class="title">get_name</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> C_name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get_age</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        C_age = <span class="number">18</span>;</span><br><span class="line">        <span class="keyword">return</span> C_age;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">//property</span></span><br><span class="line">    string C_name;<span class="comment">//可读可写</span></span><br><span class="line">    <span class="type">int</span> C_age;<span class="comment">//read only</span></span><br><span class="line">    string C_sex;<span class="comment">//read only</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Cperson person1;</span><br><span class="line">    person1.<span class="built_in">set_name</span>(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;The name is &quot;</span> &lt;&lt; person1.<span class="built_in">get_name</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;The age is &quot;</span> &lt;&lt; person1.<span class="built_in">get_age</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="this指针">this指针</h3>
<p>==对象存在，this指针才存在==</p>
<p><strong>==this指针的作用域在类内，系统默认传递给函数的隐含参数,只能在类内成员函数内部使用==</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cstu</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">//construct function</span></span><br><span class="line">  <span class="comment">//C语言中，相同的变量，会把前一个屏蔽掉</span></span><br><span class="line">    <span class="built_in">Cstu</span>(<span class="type">int</span> a)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;a = a; <span class="comment">//相当于a给自己赋值</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;<span class="built_in">show</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//this指针是Cstu*类型的，指向这个对象，用this指针访问类内成员</span></span><br><span class="line"></span><br><span class="line">    <span class="function">Cstu* <span class="title">getaddr</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Cstu <span class="title">stu1</span><span class="params">(<span class="number">12</span>)</span></span>;</span><br><span class="line">    stu1.<span class="built_in">show</span>();</span><br><span class="line">    Cstu*p =  stu1.<span class="built_in">getaddr</span>();</span><br><span class="line">    cout &lt;&lt; p &lt;&lt;endl; <span class="comment">//也可以使用p去调用类内的函数</span></span><br><span class="line">    p-&gt;<span class="built_in">show</span>();</span><br><span class="line">    <span class="comment">//this-&gt;show();//错误写法</span></span><br><span class="line"></span><br><span class="line">    <span class="function">Cstu <span class="title">stu2</span><span class="params">(<span class="number">17</span>)</span></span>;</span><br><span class="line">    Cstu*p2 = stu2.<span class="built_in">getaddr</span>();</span><br><span class="line">    cout &lt;&lt; p2 &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="staticconst">static&amp;const</h3>
<p>==static可以使用类名作用域调用，说明是存在于类中的，和对象没有关系，没有声明对象时，也存在静态成员，在创建类的时候就给静态成员分配了空间。是类本身的属性，和对象没有关系==</p>
<p>只有静态常量整型数据成员才能在类中初始化</p>
<p>静态函数 常函数</p>
<p>静态变量 常变量</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cstu</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="type">static</span> <span class="type">int</span> a;  <span class="comment">//initialize in class out</span></span><br><span class="line">	<span class="comment">//int b = 15; 错误写法</span></span><br><span class="line">	<span class="type">static</span> <span class="type">const</span> <span class="type">int</span> b = <span class="number">17</span>; <span class="comment">//只有静态整型常量数据类型可以在类内初始化</span></span><br><span class="line">	<span class="built_in">Cstu</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		a = <span class="number">12</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> Cstu::a = <span class="number">19</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//static 调用</span></span><br><span class="line">	<span class="comment">//类名作用域</span></span><br><span class="line">	cout &lt;&lt; Cstu::a &lt;&lt; endl;</span><br><span class="line">	Cstu stu1;</span><br><span class="line">	cout &lt;&lt; stu1.a &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; stu1.b ;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------------</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cstu</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="type">static</span> <span class="type">int</span> a;  <span class="comment">//initialize in class out</span></span><br><span class="line">	<span class="comment">//int b = 15; 错误写法</span></span><br><span class="line">	<span class="comment">//static const int b = 17; //只有静态整型常量数据类型可以在类内初始化</span></span><br><span class="line">	<span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">fun</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;I am static function.&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">fun2</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;I am  function.&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">Cstu</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		a = <span class="number">12</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> Cstu::a = <span class="number">19</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//static 调用</span></span><br><span class="line">	<span class="comment">//类名作用域</span></span><br><span class="line">	cout &lt;&lt; Cstu::a &lt;&lt; endl;</span><br><span class="line">	Cstu::<span class="built_in">fun</span>();</span><br><span class="line">	Cstu::<span class="built_in">fun2</span>();<span class="comment">//错误</span></span><br><span class="line">	Cstu stu1;</span><br><span class="line">	cout &lt;&lt; stu1.a &lt;&lt; endl;</span><br><span class="line">	stu1.<span class="built_in">fun</span>();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// cout &lt;&lt; stu1.b ;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cperson</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">/*Cperson()</span></span><br><span class="line"><span class="comment">	&#123;</span></span><br><span class="line"><span class="comment">		cout &lt;&lt; &quot;Cperson的默认构造函数&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">	&#125;*/</span></span><br><span class="line">	~<span class="built_in">Cperson</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Cperson的默认析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">Cperson</span>(<span class="type">int</span> age)</span><br><span class="line">	&#123;</span><br><span class="line">		c_age = age;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Cperson的有参构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/*Cperson(const Cperson&amp; a)</span></span><br><span class="line"><span class="comment">	&#123;</span></span><br><span class="line"><span class="comment">		c_age = a.c_age;</span></span><br><span class="line"><span class="comment">		cout &lt;&lt; &quot;cperson的拷贝构造函数&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">	&#125;*/</span></span><br><span class="line">	<span class="type">int</span> c_age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Cperson <span class="title">per1</span><span class="params">(<span class="number">13</span>)</span></span>;</span><br><span class="line">	<span class="comment">//per1.c_age = 19;</span></span><br><span class="line"></span><br><span class="line">	<span class="function">Cperson <span class="title">per2</span><span class="params">(per1)</span></span>;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;age of per2 is &quot;</span> &lt;&lt; per2.c_age &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Cperson <span class="title">per3</span><span class="params">(<span class="number">98</span>)</span></span>;  <span class="comment">//调用有参构造函数</span></span><br><span class="line"></span><br><span class="line">	<span class="function">Cperson <span class="title">per4</span><span class="params">(per3)</span></span>; <span class="comment">//会调用拷贝构造函数</span></span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;age of per4 is &quot;</span> &lt;&lt; per4.c_age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">test01</span>();</span><br><span class="line">	<span class="built_in">test02</span>();</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="浅拷贝深拷贝">浅拷贝&amp;深拷贝</h3>
<p><strong>==如果属性由在堆区开辟的，一定要自己提供拷贝构造函数，放置浅拷贝带来的问题==</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cperson</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Cperson</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Cperson的默认构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	~<span class="built_in">Cperson</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//堆区释放</span></span><br><span class="line">		<span class="keyword">if</span> (c_height != <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">delete</span> c_height;</span><br><span class="line">			<span class="comment">//c_heignt = NULL;</span></span><br><span class="line">		&#125;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Cperson的默认析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">Cperson</span>(<span class="type">int</span> age, <span class="type">int</span> height)</span><br><span class="line">	&#123;</span><br><span class="line">		c_height = <span class="keyword">new</span> <span class="built_in">int</span>(height);</span><br><span class="line"></span><br><span class="line">		c_age = age;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Cperson的有参构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//浅拷贝带来异常</span></span><br><span class="line">	<span class="comment">//以下为深拷贝</span></span><br><span class="line">	<span class="built_in">Cperson</span>(<span class="type">const</span> Cperson&amp; a)</span><br><span class="line">	&#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">/*默认构造函数的操作</span></span><br><span class="line"><span class="comment">		c_age = a.c_age;</span></span><br><span class="line"><span class="comment">		c_height = a.c_height;*/</span></span><br><span class="line">		<span class="comment">//自己写一个构造函数,在堆区重新开辟一块空间</span></span><br><span class="line">		c_age = a.c_age;</span><br><span class="line">		c_height = <span class="keyword">new</span> <span class="built_in">int</span>(*a.c_height);</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;cperson的拷贝构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="type">int</span> c_age;</span><br><span class="line">	<span class="type">int</span> *c_height;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Cperson <span class="title">per1</span><span class="params">(<span class="number">19</span>,<span class="number">179</span>)</span></span>;</span><br><span class="line">	<span class="comment">//per1.c_age = 19;</span></span><br><span class="line"></span><br><span class="line">	<span class="function">Cperson <span class="title">per2</span><span class="params">(per1)</span></span>;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;age of per1 is &quot;</span> &lt;&lt; per1.c_age &lt;&lt; </span><br><span class="line">		    <span class="string">&quot;height of per1 is &quot;</span> &lt;&lt; *per1.c_height &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;age of per2 is &quot;</span> &lt;&lt; per2.c_age &lt;&lt; </span><br><span class="line">		    <span class="string">&quot;height of per2 is &quot;</span> &lt;&lt;  *per2.c_height &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="构造函数初始化列表">构造函数初始化列表</h4>
<ul>
<li>Cperson()：C_a(a),C_b(b),C_c(c)</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cperson</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//构造函数</span></span><br><span class="line">	<span class="comment">//传统初始化方法</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">/*Cperson(int a,int b,int c)</span></span><br><span class="line"><span class="comment">	&#123;</span></span><br><span class="line"><span class="comment">		C_a = a;</span></span><br><span class="line"><span class="comment">		C_b = b;</span></span><br><span class="line"><span class="comment">		C_c = c;</span></span><br><span class="line"><span class="comment">	&#125;*/</span></span><br><span class="line">	<span class="built_in">Cperson</span>(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c) : <span class="built_in">C_a</span>(a),<span class="built_in">C_b</span>(b),<span class="built_in">C_c</span>(c)</span><br><span class="line">	&#123;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="type">int</span> C_a;</span><br><span class="line">	<span class="type">int</span> C_b;</span><br><span class="line">	<span class="type">int</span> C_c;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//void test01()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//	Cperson per1(23,13,25);</span></span><br><span class="line"><span class="comment">//	cout &lt;&lt; &quot;C_a: &quot; &lt;&lt; per1.C_a &lt;&lt;endl;</span></span><br><span class="line"><span class="comment">//	cout &lt;&lt; &quot;C_b: &quot; &lt;&lt; per1.C_b &lt;&lt;endl;</span></span><br><span class="line"><span class="comment">//	cout &lt;&lt; &quot;C_c: &quot; &lt;&lt; per1.C_c &lt;&lt;endl;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Cperson <span class="title">per2</span><span class="params">(<span class="number">45</span>,<span class="number">76</span>,<span class="number">43</span>)</span></span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;C_a: &quot;</span> &lt;&lt; per2.C_a &lt;&lt;endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;C_b: &quot;</span> &lt;&lt; per2.C_b &lt;&lt;endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;C_c: &quot;</span> &lt;&lt; per2.C_c &lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//test01();</span></span><br><span class="line">	<span class="built_in">test02</span>();</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="类作对象">类作对象</h3>
<p>==构造函数的顺序是：先构造内层的，在构造外层的，析构函数的执行顺序服从“先进后出”的规则，与构造函数顺序相反。==</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//手机类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cphone</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//构造函数</span></span><br><span class="line">	<span class="built_in">Cphone</span>(string name)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;phone&quot;</span> &lt;&lt; endl;</span><br><span class="line">		C_PhoneNmae = name;</span><br><span class="line">	&#125;</span><br><span class="line">	~<span class="built_in">Cphone</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;phone destructor&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//手机品牌</span></span><br><span class="line">	string C_PhoneNmae;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//人类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cperson</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//属性</span></span><br><span class="line">	string c_name;</span><br><span class="line">	Cphone c_phone;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Cperson</span>(string name,string phone):<span class="built_in">c_name</span>(name),<span class="built_in">c_phone</span>(phone)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;person &quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	~<span class="built_in">Cperson</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;person destructor&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Cperson <span class="title">per1</span><span class="params">(<span class="string">&quot;zhangsan&quot;</span>,<span class="string">&quot;xiaomi&quot;</span>)</span></span>;</span><br><span class="line">	cout &lt;&lt; per1.c_name &lt;&lt; <span class="string">&quot; have &quot;</span> &lt;&lt; per1.c_phone.C_PhoneNmae &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">test01</span>();</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20211018233256498.png" alt="image-20211018233256498"><figcaption aria-hidden="true">image-20211018233256498</figcaption>
</figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cperson</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="type">int</span> c_age; <span class="comment">//非静态成员变量，属于类的对象</span></span><br><span class="line">	<span class="type">static</span> <span class="type">int</span> c_name; <span class="comment">//静态成员函数变量，不属于类的对象</span></span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">()</span> <span class="comment">//非静态成员函数，不属于类的对象</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">fun1</span><span class="params">()</span> </span>&#123;&#125; <span class="comment">//静态成员函数，属于类的对象</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Cperson per1;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;size of per1 is &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(per1) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">test01</span>();</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="空指针访问成员函数">空指针访问成员函数</h3>
<p>类中的成员属性默认在前面有<kbd>this-&gt;</kbd>.而<kbd>person*p = NULL</kbd>语句并没有创建对象，所以是无法访问对象的，所以this指针是不存在的，</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cperson</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="type">int</span> c_age;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">showName</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;this is the class name&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//由于没有创建对象，使用this指针产生异常</span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">showAge</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span> == <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		cout &lt;&lt; <span class="keyword">this</span>-&gt;c_age &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Cperson *p = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="comment">//p-&gt;showAge();</span></span><br><span class="line">	p-&gt;<span class="built_in">showName</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">test01</span>();</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//class CBuilding; //goodgay中使用了building类，因此要先声明一下，让编译器认识，类似于函数声明</span></span><br><span class="line"><span class="comment">/*-----------------Building class------------------------*/</span></span><br><span class="line"><span class="comment">//建筑类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CBuilding</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">CBuilding</span>();</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	string c_livingroom;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	string c_bedroom;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">CGoodgay</span>;<span class="comment">//友元类</span></span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">goodgay::visit</span><span class="params">()</span></span>;<span class="comment">//友元成员函数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造函数，类内声明，类外定义，要声明是哪个类的构造函数</span></span><br><span class="line">CBuilding::<span class="built_in">CBuilding</span>()</span><br><span class="line">&#123;</span><br><span class="line">	c_livingroom = <span class="string">&quot;living room&quot;</span>;</span><br><span class="line">	c_bedroom = <span class="string">&quot;bed room&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*----------------Googgay class-----------------------------*/</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CGoodgay</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	CBuilding * building1;</span><br><span class="line">	<span class="built_in">CGoodgay</span>();</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">visit</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//构造函数，初始化成员变量</span></span><br><span class="line">CGoodgay::<span class="built_in">CGoodgay</span>()</span><br><span class="line">&#123;</span><br><span class="line">	building1 = <span class="keyword">new</span> CBuilding;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CGoodgay::visit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Good gay is looking at &quot;</span> &lt;&lt; building1-&gt;c_livingroom &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Good gay is looking at &quot;</span> &lt;&lt; building1-&gt;c_bedroom &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*-------------------test-------------------------------*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	CGoodgay gay1;</span><br><span class="line">	gay1.<span class="built_in">visit</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*-----------------main function-----------------------*/</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">test01</span>();</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20211019172544775.png" alt="image-20211019172544775"><figcaption aria-hidden="true">image-20211019172544775</figcaption>
</figure>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20211019172649352.png" alt="image-20211019172649352"><figcaption aria-hidden="true">image-20211019172649352</figcaption>
</figure>
<h3 id="运算符重载">运算符重载</h3>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20211019233541178.png" alt="image-20211019233541178"><figcaption aria-hidden="true">image-20211019233541178</figcaption>
</figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CPerson</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">public</span>:<span class="comment">//成员函数重载+</span></span><br><span class="line">		CPerson <span class="keyword">operator</span>+(CPerson &amp;p)</span><br><span class="line">		&#123;</span><br><span class="line">			CPerson temp;</span><br><span class="line">			temp.c_a = <span class="keyword">this</span>-&gt;c_a + p.c_a;</span><br><span class="line">			temp.c_b = <span class="keyword">this</span>-&gt;c_b + p.c_b;</span><br><span class="line">			<span class="keyword">return</span> temp;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="type">int</span> c_a;</span><br><span class="line">	<span class="type">int</span> c_b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	CPerson per1;</span><br><span class="line">	per1.c_a = <span class="number">34</span>;</span><br><span class="line">	per1.c_b = <span class="number">54</span>;</span><br><span class="line">	CPerson per2;</span><br><span class="line">	per2.c_a = <span class="number">54</span>;</span><br><span class="line">	per2.c_b = <span class="number">74</span>;</span><br><span class="line">	CPerson per3;</span><br><span class="line"></span><br><span class="line">	per3 = per1 + per2;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;per3.c_a =&quot;</span> &lt;&lt; per3.c_a &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;per3.c_b =&quot;</span> &lt;&lt; per3.c_b &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">////全局函数重载+</span></span><br><span class="line"><span class="comment">//CPerson operator+ (CPerson &amp;p1, CPerson &amp;p2)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//	CPerson temp;</span></span><br><span class="line"><span class="comment">//	temp.c_a = p1.c_a + p2.c_a;</span></span><br><span class="line"><span class="comment">//	temp.c_b = p1.c_b + p2.c_b;</span></span><br><span class="line"><span class="comment">//	return temp;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">   <span class="comment">//成员函数重载本质调用</span></span><br><span class="line">	Cperson p3 = p1.<span class="keyword">operator</span>+(p2)</span><br><span class="line">	简写：p3 = p1+p2;</span><br><span class="line">	全局函数重载本质调用</span><br><span class="line">	Cperson p3 = <span class="keyword">operator</span>+(p1,p2)</span><br><span class="line">	简写: p3 = p1+p2</span><br><span class="line"><span class="type">int</span> <span class="built_in">main</span>()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">test01</span>();</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cperson</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="type">int</span> c_a;</span><br><span class="line">	<span class="type">int</span> c_b;</span><br><span class="line">	<span class="built_in">Cperson</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		c_a = <span class="number">89</span>;</span><br><span class="line">		c_b = <span class="number">93</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp;cout ,Cperson &amp;p)</span><br><span class="line">&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;c_a: &quot;</span> &lt;&lt; p.c_a  &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;c_b: &quot;</span> &lt;&lt; p.c_b &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> cout;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Cperson per1;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; per1 &lt;&lt; endl;</span><br><span class="line">	<span class="comment">//cout &lt;&lt; per1 &lt;&lt;endl;无限追加输入，是因为链式编程思想</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">test01</span>();</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="递增运算符重载">递增运算符重载</h3>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20211020135253168.png" alt="image-20211020135253168"><figcaption aria-hidden="true">image-20211020135253168</figcaption>
</figure>
<h3 id="继承">继承</h3>
<p>好处：减少重复的代码</p>
<p>语法：<kbd>class 子类:继承方式 父类</kbd></p>
<p>子类又叫派生类</p>
<ul>
<li>从父类继承过来的</li>
<li>自己新增的</li>
</ul>
<p>父类又叫基类</p>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20211020164955371.png" alt="image-20211020164955371"><figcaption aria-hidden="true">image-20211020164955371</figcaption>
</figure>
<p>父类中的非静态成员变量都会被继承下去，无论是否私有还是公有</p>
<p>子类与父类中的同名函数，同名变量。默认会调用子类中的，子类中的会隐藏掉父类中所有的同名函数</p>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20211020174208051.png" alt="image-20211020174208051"><figcaption aria-hidden="true">image-20211020174208051</figcaption>
</figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CFather</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">CFather</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		c_a = <span class="number">34</span>;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="type">int</span> c_a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CSon</span> :<span class="keyword">public</span> CFather</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="type">int</span> c_a;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">CSon</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		c_a = <span class="number">56</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	CSon son1;</span><br><span class="line">	cout &lt;&lt; son1.c_a &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; son1.CFather::c_a &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">test01</span>();</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20211020214242953.png" alt="image-20211020214242953"><figcaption aria-hidden="true">image-20211020214242953</figcaption>
</figure>
<h3 id="多态">多态</h3>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20211020220806664.png" alt="image-20211020220806664"><figcaption aria-hidden="true">image-20211020220806664</figcaption>
</figure>
<p>重载：函数名相同，参数不同</p>
<p>重写：函数返回值，函数名，形参列表都相同</p>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20211020221534209.png" alt="image-20211020221534209"><figcaption aria-hidden="true">image-20211020221534209</figcaption>
</figure>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20211020221707835.png" alt="image-20211020221707835"><figcaption aria-hidden="true">image-20211020221707835</figcaption>
</figure>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20211020221741333.png" alt="image-20211020221741333"><figcaption aria-hidden="true">image-20211020221741333</figcaption>
</figure>
<p>==成员函数不属于对象==</p>
<p>==不管是什么类型的指针，都占4个字节==</p>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20211021202239635.png" alt="image-20211021202239635"><figcaption aria-hidden="true">image-20211021202239635</figcaption>
</figure>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20211021202658926.png" alt="image-20211021202658926"><figcaption aria-hidden="true">image-20211021202658926</figcaption>
</figure>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20211021203623112.png" alt="image-20211021203623112"><figcaption aria-hidden="true">image-20211021203623112</figcaption>
</figure>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20211021203952490.png" alt="image-20211021203952490"><figcaption aria-hidden="true">image-20211021203952490</figcaption>
</figure>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20211021204111880.png" alt="image-20211021204111880"><figcaption aria-hidden="true">image-20211021204111880</figcaption>
</figure>
<p><strong>==通过父类的指针，可以调用不同的子类对象的函数或成员==</strong></p>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20211021220439165.png" alt="image-20211021220439165"><figcaption aria-hidden="true">image-20211021220439165</figcaption>
</figure>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20211021221722313.png" alt="image-20211021221722313"><figcaption aria-hidden="true">image-20211021221722313</figcaption>
</figure>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20211021225354564.png" alt="image-20211021225354564"><figcaption aria-hidden="true">image-20211021225354564</figcaption>
</figure>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20211021225639639.png" alt="image-20211021225639639"><figcaption aria-hidden="true">image-20211021225639639</figcaption>
</figure>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20211021230353091.png" alt="image-20211021230353091"><figcaption aria-hidden="true">image-20211021230353091</figcaption>
</figure>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20211021230635796.png" alt="image-20211021230635796"><figcaption aria-hidden="true">image-20211021230635796</figcaption>
</figure>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20211021231644579.png" alt="image-20211021231644579"><figcaption aria-hidden="true">image-20211021231644579</figcaption>
</figure>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20211022105401533.png" alt="image-20211022105401533"><figcaption aria-hidden="true">image-20211022105401533</figcaption>
</figure>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20211022110526056.png" alt="image-20211022110526056"><figcaption aria-hidden="true">image-20211022110526056</figcaption>
</figure>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20211022111543036.png" alt="image-20211022111543036"><figcaption aria-hidden="true">image-20211022111543036</figcaption>
</figure>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20211022111709836.png" alt="image-20211022111709836"><figcaption aria-hidden="true">image-20211022111709836</figcaption>
</figure>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20211022121233984.png" alt="image-20211022121233984"><figcaption aria-hidden="true">image-20211022121233984</figcaption>
</figure>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20211024224340411.png" alt="image-20211024224340411"><figcaption aria-hidden="true">image-20211024224340411</figcaption>
</figure>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20211024224522966.png" alt="image-20211024224522966"><figcaption aria-hidden="true">image-20211024224522966</figcaption>
</figure>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20211024224613026.png" alt="image-20211024224613026"><figcaption aria-hidden="true">image-20211024224613026</figcaption>
</figure>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20211024224747037.png" alt="image-20211024224747037"><figcaption aria-hidden="true">image-20211024224747037</figcaption>
</figure>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20211024224808615.png" alt="image-20211024224808615"><figcaption aria-hidden="true">image-20211024224808615</figcaption>
</figure>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20211024224924888.png" alt="image-20211024224924888"><figcaption aria-hidden="true">image-20211024224924888</figcaption>
</figure>
<p>==<strong>接口都是一样的，由于对象不同，就显示出多态的意义了</strong>==</p>
<p>一个接口，有多种形态</p>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20211026102816318.png" alt="image-20211026102816318"><figcaption aria-hidden="true">image-20211026102816318</figcaption>
</figure>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20211026103235801.png" alt="image-20211026103235801"><figcaption aria-hidden="true">image-20211026103235801</figcaption>
</figure>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20211026103307827.png" alt="image-20211026103307827"><figcaption aria-hidden="true">image-20211026103307827</figcaption>
</figure>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20211026170316284.png" alt="image-20211026170316284"><figcaption aria-hidden="true">image-20211026170316284</figcaption>
</figure>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20211026170448680.png" alt="image-20211026170448680"><figcaption aria-hidden="true">image-20211026170448680</figcaption>
</figure>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20211026170501131.png" alt="image-20211026170501131"><figcaption aria-hidden="true">image-20211026170501131</figcaption>
</figure>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20211026172757953.png" alt="image-20211026172757953"><figcaption aria-hidden="true">image-20211026172757953</figcaption>
</figure>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20211026173241390.png" alt="image-20211026173241390"><figcaption aria-hidden="true">image-20211026173241390</figcaption>
</figure>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20211026174105364.png" alt="image-20211026174105364"><figcaption aria-hidden="true">image-20211026174105364</figcaption>
</figure>
<h3 id="如何判断数据是否为空">如何判断数据是否为空</h3>
<p><strong>EOF文件的结尾</strong></p>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20211026174241876.png" alt="image-20211026174241876"><figcaption aria-hidden="true">image-20211026174241876</figcaption>
</figure>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20211026174807707.png" alt="image-20211026174807707"><figcaption aria-hidden="true">image-20211026174807707</figcaption>
</figure>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20211026224231250.png" alt="image-20211026224231250"><figcaption aria-hidden="true">image-20211026224231250</figcaption>
</figure>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20211026224303886.png" alt="image-20211026224303886"><figcaption aria-hidden="true">image-20211026224303886</figcaption>
</figure>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20211026224329145.png" alt="image-20211026224329145"><figcaption aria-hidden="true">image-20211026224329145</figcaption>
</figure>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20211026230436353.png" alt="image-20211026230436353"><figcaption aria-hidden="true">image-20211026230436353</figcaption>
</figure>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20211026230456972.png" alt="image-20211026230456972"><figcaption aria-hidden="true">image-20211026230456972</figcaption>
</figure>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20211027092044192.png" alt="image-20211027092044192"><figcaption aria-hidden="true">image-20211027092044192</figcaption>
</figure>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20211027092222524.png" alt="image-20211027092222524"><figcaption aria-hidden="true">image-20211027092222524</figcaption>
</figure>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20211027092242701.png" alt="image-20211027092242701"><figcaption aria-hidden="true">image-20211027092242701</figcaption>
</figure>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20211027105929960.png" alt="image-20211027105929960"><figcaption aria-hidden="true">image-20211027105929960</figcaption>
</figure>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20211027105946262.png" alt="image-20211027105946262"><figcaption aria-hidden="true">image-20211027105946262</figcaption>
</figure>
<h2 id="模板">模板</h2>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20211030172724604.png" alt="image-20211030172724604"><figcaption aria-hidden="true">image-20211030172724604</figcaption>
</figure>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20211030173054674.png" alt="image-20211030173054674"><figcaption aria-hidden="true">image-20211030173054674</figcaption>
</figure>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20211030173746509.png" alt="image-20211030173746509"><figcaption aria-hidden="true">image-20211030173746509</figcaption>
</figure>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20211031101246245.png" alt="image-20211031101246245"><figcaption aria-hidden="true">image-20211031101246245</figcaption>
</figure>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20211031101741998.png" alt="image-20211031101741998"><figcaption aria-hidden="true">image-20211031101741998</figcaption>
</figure>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20211031104651606.png" alt="image-20211031104651606"><figcaption aria-hidden="true">image-20211031104651606</figcaption>
</figure>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20211031104853068.png" alt="image-20211031104853068"><figcaption aria-hidden="true">image-20211031104853068</figcaption>
</figure>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20211031110403838.png" alt="image-20211031110403838"><figcaption aria-hidden="true">image-20211031110403838</figcaption>
</figure>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20211031110431568.png" alt="image-20211031110431568"><figcaption aria-hidden="true">image-20211031110431568</figcaption>
</figure>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20211031110841773.png" alt="image-20211031110841773"><figcaption aria-hidden="true">image-20211031110841773</figcaption>
</figure>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20211031111537579.png" alt="image-20211031111537579"><figcaption aria-hidden="true">image-20211031111537579</figcaption>
</figure>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20211031112511357.png" alt="image-20211031112511357"><figcaption aria-hidden="true">image-20211031112511357</figcaption>
</figure>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20211031112810468.png" alt="image-20211031112810468"><figcaption aria-hidden="true">image-20211031112810468</figcaption>
</figure>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20211031112838946.png" alt="image-20211031112838946"><figcaption aria-hidden="true">image-20211031112838946</figcaption>
</figure>
<h1 id="算法">算法</h1>
<h3 id="冒泡排序">冒泡排序</h3>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20211110222527770.png" alt="image-20211110222527770"><figcaption aria-hidden="true">image-20211110222527770</figcaption>
</figure>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20211110224058824.png" alt="image-20211110224058824"><figcaption aria-hidden="true">image-20211110224058824</figcaption>
</figure>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown使用记录</title>
    <url>/2022/10/21/%E7%BC%96%E7%A8%8B/Markdown/</url>
    <content><![CDATA[<h1 id="markdown的使用"><font face="Monaco">Markdown</font>的使用</h1>
<ul>
<li><a href="https://www.imooc.com/wiki/markdownlesson/markdowncolor.html"><font face="Monaco">Markdown</font> 前景色、背景色丨慕课网教程 (imooc.com)</a></li>
<li><a href="https://blog.csdn.net/weixin_41765578/article/details/120443879"><font face="Monaco">Markdown</font>笔记|自定义不同颜色的字体高亮|理Risen的博客-CSDN博客_</a></li>
<li></li>
</ul>
]]></content>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Matlab</title>
    <url>/2022/10/21/%E7%BC%96%E7%A8%8B/Matlab/</url>
    <content><![CDATA[<h2 id="matlab">Matlab</h2>
<!-- <style>
blockquote {
  border-left: 2px dashed #333 !important;
  background:  #e4f2fe 0% !important;  
}
</style> -->
<h3 id="学习建议">学习建议</h3>
<h4 id="东北大学薛定宇教授"><u>东北大学薛定宇教授</u></h4>
<blockquote>
<p>[!TIP] <strong>带着问题学</strong>，活学活用，学用结合，<strong>急用先学</strong>，立竿见影，<strong>要在‘用’字上狠下工夫。</strong></p>
</blockquote>
<h4 id="网课某老师"><u>网课某老师</u></h4>
<blockquote>
<p>[!TIP] <strong>大家的目标不要想着成为什么 “<font face="Monaco">Matlab</font> 方面的大拿”，而是要用 <font face="Monaco">Matlab</font> 解决自己的学术或工程问题，从而变为自己领域内的“小能手”。</strong></p>
<p><strong>基础课的目的不在于精通，而是“知道有这么回事”</strong>，等你要用了，知道在哪能查到这个功能，然后再去试验。</p>
<p>学生的时间的确很宝贵，但是不能脑子里老是“拷问”自己，“这玩意该不该学啊，学了是不是浪费时间啊”，这么想太累了。</p>
</blockquote>
]]></content>
      <tags>
        <tag>Matlab</tag>
      </tags>
  </entry>
  <entry>
    <title>Python</title>
    <url>/2022/10/21/%E7%BC%96%E7%A8%8B/Python/</url>
    <content><![CDATA[<h2 id="python">Python</h2>
<p>后续更新...</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>英语学习方法</title>
    <url>/2022/10/21/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0/%E5%90%AC%E5%8A%9B/</url>
    <content><![CDATA[<ul>
<li><p>👉<a href="https://mp.weixin.qq.com/s/kcG36rL8G3CXVxT27ptrxQ">英语听、说、读、写完整学习思路—【学英语那点事】微信公众号</a></p></li>
<li><p>👉<a href="https://mp.weixin.qq.com/s/ZDpUzAD-Pq9dnMPK11C2tw">英语听力不好的朋友看过来—【学英语那点事】微信公众号</a></p></li>
<li><p>👉<a href="https://mp.weixin.qq.com/s/H1AzYxw22eYRuC5fzhCWeA">还是听力—【学英语那点事】微信公众号</a></p></li>
<li><p>👉<a href="https://mp.weixin.qq.com/s/edq2Td458ibvTLPgXsd7dw">口语—【学英语那点事】微信公众号</a></p></li>
<li><p>👉<a href="https://mp.weixin.qq.com/s/j1R5oIkiZlTQauIKT5T9Og">英语学习要回归到句子上—【学英语那点事】微信公众号</a></p></li>
<li><p>👉<a href="https://mp.weixin.qq.com/s/-Kr15Zt-KZQkACQpFdIanA">一个戒掉手机的好办法：—【学英语那点事】微信公众号</a></p></li>
</ul>
]]></content>
      <categories>
        <category>英语</category>
      </categories>
      <tags>
        <tag>听力</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux指令</title>
    <url>/2022/10/21/%E7%BC%96%E7%A8%8B/Ubuntu%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="linux常用命令">linux常用命令</h2>
<ul>
<li><p><a href="https://blog.csdn.net/weixin_41194129/article/details/107430369">完美解决ubuntu中文件夹加锁的情况_源代码杀手的博客-CSDN博客_ubuntu文件夹上锁</a></p></li>
<li><p>[<a href="https://blog.csdn.net/nan_xiaobai/article/details/99108689">Ubuntu]Linux下如何解决目录绿色高亮？_wqyolo的博客-CSDN博客_linux文件夹绿色高亮</a></p></li>
<li></li>
</ul>
<h3 id="解决文件夹带锁">解决文件夹带锁</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo chmod 777 + 文件名</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>生词</title>
    <url>/2022/10/21/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0/%E7%94%9F%E8%AF%8D/</url>
    <content><![CDATA[<h3 id="科研中的生词">科研中的生词</h3>
<p><code>unicast</code> 单播</p>
<p><code>Ethernet</code> 以太网</p>
<p><code>unicast reliability feature</code> 单播可靠性功能</p>
<p><code>parse</code> 解析[电子、计算机、通信]</p>
]]></content>
      <categories>
        <category>英语</category>
      </categories>
      <tags>
        <tag>生词</tag>
      </tags>
  </entry>
  <entry>
    <title>URL和URI的区别</title>
    <url>/2022/05/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/URI%E5%92%8CURL%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h2 id="url和uri的区别">URL和URI的区别</h2>
<h3 id="uri">URI</h3>
<ul>
<li><strong>定义</strong>：统一资源标志符(<code>Uniform Resource Identifier， URI</code>)，表示的是web上每一种可用的资源，如 HTML文档、图像、视频片段、程序等都由一个URI进行标识的。</li>
<li><strong>如何理解</strong>：
<ul>
<li><code>Identifier</code>标识符，那就是用来标识的，唯一作用就是标识某个资源。</li>
<li>那么按照什么方式、以什么标准去标识？
<ul>
<li>用<strong>定位</strong>的方式：URL (Uniform Resource <code>Locator</code>)</li>
<li>用<strong>命名</strong>的方式：URN (Uniform Resource <code>Name</code>)</li>
</ul></li>
</ul></li>
</ul>
<h3 id="url">URL</h3>
<ul>
<li><p><strong>定义</strong>：统一资源定位符(<code>Uniform Resource Locator，URL</code> )，用于表示互联网上某一资源的网址。简单来说，<code>URL</code>就是<strong>网址</strong>。</p></li>
<li><p><strong>格式</strong>：</p>
<ul>
<li><p>协议<code>://</code>服务器地址<code>:</code>端口号<code>/</code>路径<code>/</code>文件名<code>?</code>查询参数<code>#</code>片段。</p>
<p>protocol <code>://</code> hostname[<code>:</code>port]<code>/</code>path <code>/</code>[;parameters] [<code>?</code>query]<code>#</code>fragment</p></li>
<li><p>参数在<code>?</code>之后开始，使用<code>参数名=参数值</code>的方式，多个参数用<code>&amp;</code>隔开。</p></li>
<li><p><code>#</code>左边部分是浏览器可以从服务器下载的资源。</p></li>
<li><p><code>#</code>右边部分是片段标识符。片段表示资源的某一位置，与从服务器返回的资源无关。</p></li>
<li><p>端口号、查询、片段ID都属于选填项。</p></li>
</ul></li>
</ul>
<blockquote>
<p>[!Note|style:callout|label:总结] <code>URI</code>和<code>URL</code>都定义了资源是什么，但<code>URL</code>还定义了该如何访问资源。<code>URL</code>是一种具体的<code>URI</code>，它是<code>URI</code>的一个子集，它不仅唯一标识资源，而且还提供了定位该资源的信息。</p>
</blockquote>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
  </entry>
  <entry>
    <title>数据结构视频</title>
    <url>/2022/05/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h2 id="视频">视频</h2>
<ul>
<li><p><a href="https://www.bilibili.com/video/BV1MK411j7CR?spm_id_from=333.1007.top_right_bar_window_history.content.click">数据结构：懒猫老师-数据结构-(34)哈夫曼树(Huffman Tree,霍夫曼树,赫夫曼树)_哔哩哔哩_bilibili</a></p></li>
<li><p><a href="https://zhuanlan.zhihu.com/p/387679625">数据结构：懒猫老师-数据结构-(34)哈夫曼树(PPT文稿) - 知乎 (zhihu.com)</a></p></li>
<li><p><a href="https://www.bilibili.com/video/BV1nJ411V7bd?from=search&amp;seid=2456030176850049565&amp;spm_id_from=333.337.0.0">数据结构：数据结构与算法基础（青岛大学-王卓）_哔哩哔哩_bilibili</a></p></li>
<li><p><a href="https://blog.csdn.net/qq_28114615/article/details/86633509">前缀树(字典树)应用——实现 Trie (前缀树)、添加与搜索单词_HerofH_的博客-CSDN博客</a></p></li>
</ul>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
  </entry>
  <entry>
    <title>计算机组成原理</title>
    <url>/2022/06/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h1 id="计算机组成原理">计算机组成原理</h1>
<!-- [TOC] -->
<h3 id="说明">说明</h3>
<p>此课程参考<a href="https://www.bilibili.com/video/BV1BE411D7ii?p=2">王道计算机考研 计算机组成原理_哔哩哔哩_bilibili</a>， 其中所出现的图片均是学习过程中的截图，放到网页上，以便随时随地地复习。</p>
<h3 id="正文">正文</h3>
<p><a href="https://imgtu.com/i/ORpONd"><img src="https://s1.ax1x.com/2022/05/15/ORpONd.png" alt="ORpONd.png"></a></p>
<p>硬件上的一个个的金属针脚就是用来传递电信号，传递一个个的高低电平，来代表<code>0、1</code>信号，<code>0、1</code>信号传到电路内部，就会使得相应的晶体管导通、截止，就会形成相应的电路，用来处理数据。</p>
<p>计算机在运算的时候，实际上就是在处理电信号，处理电信号的是晶体管（以前是电子管），使用用晶体管组成的电路来进行运算。</p>
<ul>
<li>电子管时代。体积大、耗电大，运算速度慢</li>
</ul>
<p><a href="https://imgtu.com/i/ORpX4A"><img src="https://s1.ax1x.com/2022/05/15/ORpX4A.png" alt="ORpX4A.png"></a> <a href="https://imgtu.com/i/ORpx3t"><img src="https://s1.ax1x.com/2022/05/15/ORpx3t.png" alt="ORpx3t.png"></a> <a href="https://imgtu.com/i/ORpv9I"><img src="https://s1.ax1x.com/2022/05/15/ORpv9I.png" alt="ORpv9I.png"></a> ### 硬件的发展 <a href="https://imgtu.com/i/ORpLAH"><img src="https://s1.ax1x.com/2022/05/15/ORpLAH.png" alt="ORpLAH.png"></a> <a href="https://imgtu.com/i/ORpzgP"><img src="https://s1.ax1x.com/2022/05/15/ORpzgP.png" alt="ORpzgP.png"></a> <a href="https://imgtu.com/i/OR99u8"><img src="https://s1.ax1x.com/2022/05/15/OR99u8.png" alt="OR99u8.png"></a> <a href="https://imgtu.com/i/OR9Sjf"><img src="https://s1.ax1x.com/2022/05/15/OR9Sjf.png" alt="OR9Sjf.png"></a> <a href="https://imgtu.com/i/OR9CDS"><img src="https://s1.ax1x.com/2022/05/15/OR9CDS.png" alt="OR9CDS.png"></a> <a href="https://imgtu.com/i/OR9PHg"><img src="https://s1.ax1x.com/2022/05/15/OR9PHg.png" alt="OR9PHg.png"></a> <a href="https://imgtu.com/i/OR9FEQ"><img src="https://s1.ax1x.com/2022/05/15/OR9FEQ.png" alt="OR9FEQ.png"></a> <a href="https://imgtu.com/i/OR9kNj"><img src="https://s1.ax1x.com/2022/05/15/OR9kNj.png" alt="OR9kNj.png"></a> <a href="https://imgtu.com/i/OR9A4s"><img src="https://s1.ax1x.com/2022/05/15/OR9A4s.png" alt="OR9A4s.png"></a> ### 软件的发展 <a href="https://imgtu.com/i/OR9VCn"><img src="https://s1.ax1x.com/2022/05/15/OR9VCn.png" alt="OR9VCn.png"></a> <a href="https://imgtu.com/i/OR9Z3q"><img src="https://s1.ax1x.com/2022/05/15/OR9Z3q.png" alt="OR9Z3q.png"></a> <a href="https://imgtu.com/i/OR9eg0"><img src="https://s1.ax1x.com/2022/05/15/OR9eg0.png" alt="OR9eg0.png"></a> <a href="https://imgtu.com/i/OR9mvV"><img src="https://s1.ax1x.com/2022/05/15/OR9mvV.png" alt="OR9mvV.png"></a> ### 计算机基本组成</p>
<p><a href="https://imgtu.com/i/OR9uuT"><img src="https://s1.ax1x.com/2022/05/15/OR9uuT.png" alt="OR9uuT.png"></a> <a href="https://imgtu.com/i/OR9MbF"><img src="https://s1.ax1x.com/2022/05/15/OR9MbF.png" alt="OR9MbF.png"></a> <a href="https://imgtu.com/i/OR9KDU"><img src="https://s1.ax1x.com/2022/05/15/OR9KDU.png" alt="OR9KDU.png"></a> <a href="https://imgtu.com/i/OR9lE4"><img src="https://s1.ax1x.com/2022/05/15/OR9lE4.png" alt="OR9lE4.png"></a> <a href="https://imgtu.com/i/OR91UJ"><img src="https://s1.ax1x.com/2022/05/15/OR91UJ.png" alt="OR91UJ.png"></a> <a href="https://imgtu.com/i/OR9359"><img src="https://s1.ax1x.com/2022/05/15/OR9359.png" alt="OR9359.png"></a> <a href="https://imgtu.com/i/OR9GCR"><img src="https://s1.ax1x.com/2022/05/15/OR9GCR.png" alt="OR9GCR.png"></a> <a href="https://imgtu.com/i/OR9J81"><img src="https://s1.ax1x.com/2022/05/15/OR9J81.png" alt="OR9J81.png"></a> <a href="https://imgtu.com/i/OR9Ygx"><img src="https://s1.ax1x.com/2022/05/15/OR9Ygx.png" alt="OR9Ygx.png"></a> <a href="https://imgtu.com/i/OR9UKK"><img src="https://s1.ax1x.com/2022/05/15/OR9UKK.png" alt="OR9UKK.png"></a> <a href="https://imgtu.com/i/OR9tv6"><img src="https://s1.ax1x.com/2022/05/15/OR9tv6.png" alt="OR9tv6.png"></a> ### 主存储器的组成 <a href="https://imgtu.com/i/OR9aDO"><img src="https://s1.ax1x.com/2022/05/15/OR9aDO.png" alt="OR9aDO.png"></a></p>
<table>
<tbody>
<tr class="odd">
<td>- 对于菜鸟驿站来说，我们只能从货架上取走包裹</td>
</tr>
<tr class="even">
<td>- <strong>对于CPU不仅可以从存储体取走数据（读），还可以写入数据</strong></td>
</tr>
<tr class="odd">
<td>- 1个word的大小是不确定的，可能是8bit、16bit、32bit...具体要看计算机硬件是怎么设计的</td>
</tr>
</tbody>
</table>
<p><a href="https://imgtu.com/i/OWVEMd"><img src="https://s1.ax1x.com/2022/05/16/OWVEMd.png" alt="OWVEMd.png"></a> <a href="https://imgtu.com/i/OWVFRe"><img src="https://s1.ax1x.com/2022/05/16/OWVFRe.png" alt="OWVFRe.png"></a> <a href="https://imgtu.com/i/OWVkxH"><img src="https://s1.ax1x.com/2022/05/16/OWVkxH.png" alt="OWVkxH.png"></a> <a href="https://imgtu.com/i/OWVPPO"><img src="https://s1.ax1x.com/2022/05/16/OWVPPO.png" alt="OWVPPO.png"></a> <a href="https://imgtu.com/i/OWViGD"><img src="https://s1.ax1x.com/2022/05/16/OWViGD.png" alt="OWViGD.png"></a> <a href="https://imgtu.com/i/OWVZqI"><img src="https://s1.ax1x.com/2022/05/16/OWVZqI.png" alt="OWVZqI.png"></a> <a href="https://imgtu.com/i/OWVmZt"><img src="https://s1.ax1x.com/2022/05/16/OWVmZt.png" alt="OWVmZt.png"></a> <a href="https://imgtu.com/i/OWVuIf"><img src="https://s1.ax1x.com/2022/05/16/OWVuIf.png" alt="OWVuIf.png"></a></p>
<h3 id="运算器">运算器</h3>
<table style="width:6%;">
<colgroup>
<col style="width: 5%">
</colgroup>
<tbody>
<tr class="odd">
<td>运算器：用于实现算术运算（如：加减乘除）、逻辑运算（如：与或非）</td>
</tr>
<tr class="even">
<td>- ACC（Accumulator）：寄存器、累加器，用于存放操作数，或运算结果。 - MQ（Multiple-Quotient Register）：乘商寄存器，在乘、除运算时，用于存放操作数或运算结果。 - X：通用的操作数寄存器，用于存放操作数 - ALU（）核心单元：算术逻辑单元，通过内部复杂的电路实现算数运算、逻辑运算</td>
</tr>
</tbody>
</table>
<p><a href="https://imgtu.com/i/OWVMi8"><img src="https://s1.ax1x.com/2022/05/16/OWVMi8.png" alt="OWVMi8.png"></a></p>
<h3 id="控制器">控制器</h3>
<p><a href="https://imgtu.com/i/OWVndP"><img src="https://s1.ax1x.com/2022/05/16/OWVndP.png" alt="OWVndP.png"></a> <a href="https://imgtu.com/i/OWVQJS"><img src="https://s1.ax1x.com/2022/05/16/OWVQJS.png" alt="OWVQJS.png"></a> <a href="https://imgtu.com/i/OWVlRg"><img src="https://s1.ax1x.com/2022/05/16/OWVlRg.png" alt="OWVlRg.png"></a> <a href="https://imgtu.com/i/OWV1zQ"><img src="https://s1.ax1x.com/2022/05/16/OWV1zQ.png" alt="OWV1zQ.png"></a></p>
<p><a href="https://imgtu.com/i/OW1Ats"><img src="https://s1.ax1x.com/2022/05/16/OW1Ats.png" alt="OW1Ats.png"></a> <a href="https://imgtu.com/i/OW1mcV"><img src="https://s1.ax1x.com/2022/05/16/OW1mcV.jpg" alt="OW1mcV.jpg"></a> <a href="https://imgtu.com/i/OW1e10"><img src="https://s1.ax1x.com/2022/05/16/OW1e10.png" alt="OW1e10.png"></a> <a href="https://imgtu.com/i/OW1Ehn"><img src="https://s1.ax1x.com/2022/05/16/OW1Ehn.png" alt="OW1Ehn.png"></a> <a href="https://imgtu.com/i/OW1Zpq"><img src="https://s1.ax1x.com/2022/05/16/OW1Zpq.png" alt="OW1Zpq.png"></a> <a href="https://imgtu.com/i/OW1nXT"><img src="https://s1.ax1x.com/2022/05/16/OW1nXT.png" alt="OW1nXT.png"></a> <a href="https://imgtu.com/i/OW1Q74"><img src="https://s1.ax1x.com/2022/05/16/OW1Q74.png" alt="OW1Q74.png"></a> <a href="https://imgtu.com/i/OW1MBF"><img src="https://s1.ax1x.com/2022/05/16/OW1MBF.png" alt="OW1MBF.png"></a> <a href="https://imgtu.com/i/OW11AJ"><img src="https://s1.ax1x.com/2022/05/16/OW11AJ.png" alt="OW11AJ.png"></a> <a href="https://imgtu.com/i/OW1KnU"><img src="https://s1.ax1x.com/2022/05/16/OW1KnU.png" alt="OW1KnU.png"></a> <a href="https://imgtu.com/i/OW1J91"><img src="https://s1.ax1x.com/2022/05/16/OW1J91.png" alt="OW1J91.png"></a> <a href="https://imgtu.com/i/OW18hR"><img src="https://s1.ax1x.com/2022/05/16/OW18hR.png" alt="OW18hR.png"></a> <a href="https://imgtu.com/i/OW1Y1x"><img src="https://s1.ax1x.com/2022/05/16/OW1Y1x.png" alt="OW1Y1x.png"></a></p>
]]></content>
      <categories>
        <category>计算机组成原理</category>
      </categories>
  </entry>
  <entry>
    <title>计算机网络视频</title>
    <url>/2022/05/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%94%E8%AE%B0-%E3%80%90%E4%B8%AD%E7%A7%91%E5%A4%A7%E9%83%91%E7%83%87%E3%80%91/</url>
    <content><![CDATA[<p>中科大郑烇、杨坚全套《计算机网络（自顶向下方法 第7版，James F.Kurose，Keith W.Ross）》课程</p>
<p><a href="https://www.bilibili.com/video/BV1JV411t7ow?p=13&amp;spm_id_from=333.880.my_history.page.click">中科大郑烇、杨坚全套《计算机网络（自顶向下方法 第7版，James F.Kurose，Keith W.Ross）》课程_哔哩哔哩_bilibili</a></p>
<p><a href="https://blog.csdn.net/qq_53111905/article/details/119002010?spm=1001.2014.3001.5501">中科大郑烇、杨坚《计算机网络》课程 第一章笔记_爱好学习的青年人的博客-CSDN博客_中科大计算机网络笔记</a></p>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
  </entry>
  <entry>
    <title>LaTex</title>
    <url>/2022/10/21/%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/LaTex/</url>
    <content><![CDATA[<ul>
<li><a href="https://blog.csdn.net/qq_43391414/article/details/115129492">latex中\begin{verbatim}以及？_音程的博客-CSDN博客</a></li>
<li><a href="https://blog.csdn.net/hysterisis/article/details/114123131">Latex 中的空格汇总_hysterisis的博客-CSDN博客</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/104112163#:~:text=">LaTeX省略号 - 知乎 (zhihu.com)</a>在LaTeX中，分别使用“”，“”，“”，“”实现各种省略号. 可以看出“”实现了居底部的省略号，“”实现了居中的省略号.,而命令“”可以根据实际情况自动地改变省略号的位置. 在写作的过程中，要根据自己的实际情况灵活地使用这些省略号（感谢评论指出）.)</li>
<li><a href="https://blog.csdn.net/zhangpeterx/article/details/86032665">Latex报错Missing $ inserted.inserted text_个人博客-CSDN博客</a></li>
<li><a href="https://blog.csdn.net/m0_37149062/article/details/108240050">Latex输入特殊字符#$%&amp;{}_^-＜＞|_执念斩长河-CSDN博客_latex怎么打&amp;</a></li>
<li><a href="https://blog.csdn.net/sclxf/article/details/5387630">Latex中输入数学中的“属于” 符号_sclxf的专栏-CSDN博客_latex属于符号怎么打</a></li>
<li><a href="https://www.bilibili.com/read/cv3599113/#:~:text=「LaTeX」LaTeX%20中三种向量表示：粗体1，粗体2，箭头向量%20学习%202019-09-14%2020%3A45,--阅读%20·%20--喜欢%20·%20--评论">「LaTeX」LaTeX 中三种向量表示：粗体1，粗体2，箭头向量 - 哔哩哔哩 (bilibili.com)</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/338377565">LaTeX宏包学习笔记之tcolorbox - 知乎 (zhihu.com)</a></li>
<li><a href="https://blog.csdn.net/golden1314521/article/details/42871065">Latex彩色框_金良山庄-CSDN博客_latex彩色盒子模板</a></li>
<li>Latex下划线<a href="https://blog.csdn.net/hongnuaa/article/details/6901658?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_default&amp;utm_relevant_index=1">方法1</a> <a href="https://blog.csdn.net/qq_41684259/article/details/108066854?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_default&amp;utm_relevant_index=2">方法2</a> <a href="https://blog.csdn.net/weixin_44471218/article/details/119031672#:~:text=">方法3</a>默认情况下， latex 会将 下划线 "_" 解释为数学模式,中 的下标表示的一部分，这种处理很多情况下是非常不爽的，比如代码 中 的 下划线 变量：host_name之类的。)</li>
<li><a href="https://blog.csdn.net/u011089523/article/details/83578005?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_antiscanv2&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_antiscanv2&amp;utm_relevant_index=1">LATEX调整公式、图片与正文间距离，文字间距离，调整空白大小_风景不在对岸wj的博客-CSDN博客_latex调整图片与文字的距离</a></li>
<li><a href="https://blog.csdn.net/weixin_34054866/article/details/86250933">LaTeX 在编译时出现 File ended while scanning use of @writefile错误_weixin_34054866的博客-CSDN博客</a></li>
<li><a href="https://blog.csdn.net/fandroid/article/details/50930137">latex: 改变图的caption Figure 1:为 Fig. 1.</a></li>
<li><mark>抄录一些行内的代码时，可以用命令</mark>&gt; <a href="https://blog.csdn.net/weixin_30848775/article/details/98274223">Tex中如何使得 texttt 的英文自动断字</a></li>
<li><a href="https://zhidao.baidu.com/question/1964965103546603140.html">使用latex book类的每章首页的页眉怎么设置？_百度知道 (baidu.com)</a></li>
<li><a href="https://blog.csdn.net/robert_chen1988/article/details/52739825">latex 中的长度单位，尺寸</a></li>
<li><a href="https://blog.csdn.net/weixin_41672404/article/details/112982523?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_antiscanv2&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_antiscanv2">latex消除每章节之间空白页</a></li>
<li><a href="https://blog.csdn.net/nccccc12345/article/details/115335255">LATEX--页边距设置</a></li>
<li><a href="https://blog.csdn.net/Stool_Monster/article/details/107610030">texstudio / sublime text 3 - latextools使用minted包遇到的一些问题的解决办法</a></li>
<li><a href="https://blog.csdn.net/gogdizzy/article/details/9136239">Winedt编译minted宏包问题</a></li>
<li><a href="https://lttt.vanabel.cn/2015/03/27/winedt%e5%bc%80%e5%90%afwrite18%e5%92%8cshell-escape.html">WinEdt开启write18和shell-escape</a></li>
<li><a href="https://blog.csdn.net/chichoxian/article/details/19134695#:~:text=在Latex中s,（一般是红色）。">用Beamer制作幻灯片（卷三 动画篇）_君的名字的博客-CSDN博客_beamer 动画</a></li>
<li><a href="https://www.1024sou.com/article/940683.html">LaTeX多种颜色标注高亮修改内容 - 1024搜-程序员专属的搜索引擎 (1024sou.com)</a></li>
<li><strong><a href="https://www.cnblogs.com/ywang-wnlo/p/LaTeX-Beamer.html">【LaTeX】制作 PPT （更新中） - ywang_wnlo - 博客园 (cnblogs.com)</a></strong></li>
<li><a href="https://alexander-qi.github.io/2019/teachbeamer/">从零开始用beamer做学术报告幻灯片 | 墘青 (alexander-qi.github.io)</a></li>
<li><a href="https://www.zhihu.com/question/482758306">Sublime Text4编译完LaTex后又自动弹出一个窗口什么情况？ - 知乎 (zhihu.com)</a></li>
<li><a href="https://www.bilibili.com/video/BV18u411e7mg/">Sublime Text+LaTeX每次编译时都会新建窗口的问题解决_哔哩哔哩_bilibili</a></li>
<li><a href="https://www.latexstudio.net/archives/2464.html">LaTeX技巧788：beamer中的图表编号问题 - LaTeX科技排版工作室 (latexstudio.net)</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/389828721">Beamer入门 - 知乎 (zhihu.com)</a></li>
<li><a href="https://blog.csdn.net/m0_38006970/article/details/95102613">Sublime text 3 + Latex + SumatraPDF反向检索_ta酱mua的博客-CSDN博客</a></li>
<li><a href="https://www.zhihu.com/question/357511411">请问latex的beamer怎么将页面4:3设置为16:9? - 知乎 (zhihu.com)</a></li>
<li><a href="https://www.cnblogs.com/nangongergou/p/13606758.html">Beamer制作演示文档-1：在每个章节前面显示目录 - 南宫二狗 - 博客园 (cnblogs.com)</a></li>
<li><a href="https://blog.csdn.net/G_Barble/article/details/106184870">Latex error: No line here to end （已解决）__52Hz_的博客-CSDN博客</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/137877025">beamer模板设计（八）beamer中颜色的设置和继承关系 - 知乎 (zhihu.com)</a></li>
<li><a href="https://blog.csdn.net/qq_20260069/article/details/88380579">假装认真的LaTeX学习笔记（2）—— LaTeX中如何修改字体（fontspec宏包使用方法）_羊坨不是羊驼的博客-CSDN博客_fontspec</a></li>
<li></li>
</ul>
<h3 id="常用的代码片段">常用的代码片段</h3>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;enumerate&#125;[i)]</span><br><span class="line">	<span class="keyword">\item</span>...</span><br><span class="line">	<span class="keyword">\item</span>...</span><br><span class="line"><span class="keyword">\end</span>&#123;enumerate&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\url</span>&#123;<span class="link">https://github.com/davidgao666/HedaBachelorTemplate</span>&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;description&#125;</span><br><span class="line">  <span class="keyword">\item</span>[Step 1] ... </span><br><span class="line">  <span class="keyword">\item</span>[Step 2] ...</span><br><span class="line">  <span class="keyword">\item</span>[Step 3] ...</span><br><span class="line"><span class="keyword">\end</span>&#123;description&#125;</span><br></pre></td></tr></table></figure>
<h3 id="插入公式">插入公式</h3>
<h4 id="插入多行公式时空格问题">插入多行公式时，空格问题</h4>
<p>第一个正确，第二个不对，因此在 <strong>插入公式时，就不要有空格</strong> ，避免不必要的麻烦。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;equation&#125;</span><br><span class="line"><span class="keyword">\left</span><span class="keyword">\&#123;</span> <span class="keyword">\begin</span>&#123;array&#125;&#123;l&#125;</span><br><span class="line">	r<span class="built_in">_</span>k=<span class="keyword">\sum</span><span class="built_in">_</span>&#123;j=1&#125;<span class="built_in">^</span>p&#123;w<span class="built_in">_</span>&#123;kj&#125;x<span class="built_in">_</span>j<span class="keyword">\text</span>&#123;,&#125;&#125;<span class="keyword">\\</span></span><br><span class="line">	v<span class="built_in">_</span>k=r<span class="built_in">_</span>k-<span class="keyword">\theta</span> <span class="built_in">_</span>k,<span class="keyword">\\</span></span><br><span class="line">	y<span class="built_in">_</span>k=<span class="keyword">\varPhi</span> <span class="keyword">\left</span>( v<span class="built_in">_</span>k <span class="keyword">\right</span>),<span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\end</span>&#123;array&#125; <span class="keyword">\right</span>.	</span><br><span class="line"><span class="keyword">\end</span>&#123;equation&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;equation&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\left</span><span class="keyword">\&#123;</span> <span class="keyword">\begin</span>&#123;array&#125;&#123;l&#125;</span><br><span class="line">	r<span class="built_in">_</span>k=<span class="keyword">\sum</span><span class="built_in">_</span>&#123;j=1&#125;<span class="built_in">^</span>p&#123;w<span class="built_in">_</span>&#123;kj&#125;x<span class="built_in">_</span>j<span class="keyword">\text</span>&#123;,&#125;&#125;<span class="keyword">\\</span></span><br><span class="line">	v<span class="built_in">_</span>k=r<span class="built_in">_</span>k-<span class="keyword">\theta</span> <span class="built_in">_</span>k,<span class="keyword">\\</span></span><br><span class="line">	y<span class="built_in">_</span>k=<span class="keyword">\varPhi</span> <span class="keyword">\left</span>( v<span class="built_in">_</span>k <span class="keyword">\right</span>),<span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\end</span>&#123;array&#125; <span class="keyword">\right</span>.</span><br><span class="line"></span><br><span class="line"><span class="keyword">\end</span>&#123;equation</span><br></pre></td></tr></table></figure>
<h4 id="页眉">页眉</h4>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line">只给每一章首页加页眉</span><br><span class="line"></span><br><span class="line"><span class="keyword">\makeatletter</span></span><br><span class="line">  <span class="keyword">\let</span><span class="keyword">\ps@plain</span><span class="keyword">\ps@empty</span></span><br><span class="line"><span class="keyword">\makeatother</span></span><br><span class="line"><span class="keyword">\fancypagestyle</span>&#123;plain&#125;&#123;<span class="comment">%</span></span><br><span class="line">    <span class="keyword">\fancyhf</span>&#123;&#125; <span class="comment">%</span></span><br><span class="line">    <span class="keyword">\fancyhead</span>[LO,RE]&#123;...&#125; <span class="comment">%</span></span><br><span class="line">    <span class="keyword">\fancyhead</span>[RO,LE]&#123;...&#125; <span class="comment">%</span></span><br><span class="line">    <span class="keyword">\fancyfoot</span>[C]&#123;...&#125; <span class="comment">%</span></span><br><span class="line">    <span class="keyword">\renewcommand</span>&#123;<span class="keyword">\headrulewidth</span>&#125;&#123;0.4pt&#125;  <span class="comment">%</span></span><br><span class="line">    <span class="keyword">\renewcommand</span>&#123;<span class="keyword">\footrulewidth</span>&#125;&#123;0.4pt&#125;  <span class="comment">%</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LaTex</category>
      </categories>
  </entry>
  <entry>
    <title>Office的使用</title>
    <url>/2022/10/21/%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/Office/</url>
    <content><![CDATA[<h2 id="一word"><strong>一、Word</strong></h2>
<p><code>2022</code>年<code>5</code>月<code>13</code>日于家中</p>
<p>写专业的论文用latex比较方便，但是latex很不直观，平时就用latex写，效率其实很低，建议平时积累用word，排版用Latex</p>
<ul>
<li><a href="https://www.bilibili.com/video/BV1SZ4y1p7hB?p=1">【Word丨毕业论文格式教程】简直是写论文必备~_哔哩哔哩_bilibili</a></li>
<li></li>
</ul>
<h2 id="二excel"><strong>二、Excel</strong></h2>
<p>之前看过以下这个教程，还需要复习以下</p>
<ul>
<li><a href="https://www.bilibili.com/video/BV1ix41137b7?spm_id_from=333.337.search-card.all.click">【公开课】Excel基础大全（1-66集）【超高清版】_哔哩哔哩_bilibili</a></li>
</ul>
]]></content>
      <tags>
        <tag>Office</tag>
      </tags>
  </entry>
  <entry>
    <title>人世间句子摘抄</title>
    <url>/2022/03/21/%E9%9A%8F%E7%AC%94%E4%B8%8E%E4%B8%AA%E4%BA%BA%E6%96%87%E9%9B%86/%E4%BA%BA%E4%B8%96%E9%97%B4/</url>
    <content><![CDATA[<h2 id="人世间句子摘抄">人世间句子摘抄</h2>
<!-- <style>
blockquote {
  border-left: 2px dashed #333 !important;
  background:  #e4f2fe 0% !important;  
}
</style> -->
<h4 id="第9集-曲书记"><u>第9集 曲书记 </u></h4>
<blockquote>
<p>[!TIP] 每个人的境遇、条件都不同，不能千篇一律地要求，但一定要把自己的工作，自己的日子过好。</p>
</blockquote>
<h4 id="第9集-曲书记-1"><u>第9集 曲书记 </u></h4>
<blockquote>
<p>[!TIP] 趁着年轻，一定要多读书，多学习。</p>
</blockquote>
<h4 id="第9集-金主任"><u>第9集 金主任 </u></h4>
<blockquote>
<p>[!TIP] 做事，讲话都要讲分寸，不论对谁(亲人，夫妻...)，不要信口开河，张嘴就说。</p>
</blockquote>
<h4 id="郝省长"><u> 郝省长 </u></h4>
<blockquote>
<p>[!TIP] 人有人性的弱点，所以要加强约束、引导和规范。作为一名共产党员，坚守自己的党性原则，并使之培养成自觉自愿的自己的行为准则，这是至关重要的。</p>
</blockquote>
<h4 id="光明">光明</h4>
<blockquote>
<p>[!TIP] 守不住一个 <strong>定</strong> 字，未定时最难，不知道劲儿该往哪使。最坏的结果强过没有结果。</p>
</blockquote>
<p>似乎挺有道理的，比如考试成绩没出来之前，是最煎熬的。出来之后，即使不好，也比没出成绩时要轻松。</p>
<h4 id="冯化成">冯化成</h4>
<blockquote>
<p>[!TIP] 无论遇到多大、多急的事，放一放，冷一冷再行动。不要一遇到事就头脑发热、怎么痛快怎么来。</p>
</blockquote>
]]></content>
      <categories>
        <category>随笔与个人文集</category>
      </categories>
      <tags>
        <tag>人世间</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建hexo博客</title>
    <url>/2022/10/20/%E9%9A%8F%E7%AC%94%E4%B8%8E%E4%B8%AA%E4%BA%BA%E6%96%87%E9%9B%86/%E6%90%AD%E5%BB%BAhexo/</url>
    <content><![CDATA[<h1 id="搭建hexo博客">搭建hexo博客</h1>
<h2 id="hexo">hexo</h2>
<ol type="1">
<li><p>很简洁的主题，很喜欢<a href="https://gaoryrt.com/categories/随笔与个人文集/">pln主题</a>，</p>
<ul>
<li><a href="https://github.com/gaoryrt/hexo-theme-pln">gaoryrt/hexo-theme-pln: 📝 Plain theme for Hexo. (github.com)</a></li>
</ul></li>
<li><p><a href="https://hexo.io/themes/">Themes | Hexo</a></p></li>
<li><p><a href="https://www.bilibili.com/video/BV18z4y197J7/?spm_id_from=333.337.search-card.all.click&amp;vd_source=83831fc0970a6c8704479f7cfc679937">Hexo博客教程之写文章_哔哩哔哩_bilibili</a></p></li>
</ol>
<h2 id="指令">指令</h2>
<ol type="1">
<li>hexo g 生成静态页面</li>
<li>hexo d 发布本地内容到仓库</li>
<li>hexo s 生成静态页面</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<h2 id="错误">错误</h2>
<ol type="1">
<li>错误如下：解决<a href="https://blog.csdn.net/qq_45020818/article/details/126949337">解决Hexo部署时报错：Error: Spawn failed_薛定谔的壳的博客-CSDN博客</a></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">atal: unable to access <span class="string">&#x27;https://github.com/a956551943/a956551943.github.io/&#x27;</span>: Encountered end of file</span><br><span class="line">FATAL &#123;</span><br><span class="line">  err: Error: Spawn failed</span><br><span class="line">      at ChildProcess.&lt;anonymous&gt; (/usr/local/src/hexo/hanyubolg/node_modules/hexo-util/lib/spawn.js:51:21)</span><br><span class="line">      at ChildProcess.emit (events.js:376:20)</span><br><span class="line">      at Process.ChildProcess._handle.onexit (internal/child_process.js:277:12) &#123;</span><br><span class="line">    code: 128</span><br><span class="line">  &#125;</span><br><span class="line">&#125; Something<span class="string">&#x27;s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>
<h2 id="配置">配置</h2>
<ol type="1">
<li><a href="https://www.jianshu.com/p/e17711e44e00">Hexo使用攻略-添加分类及标签 - 简书 (jianshu.com)</a></li>
<li><a href="https://blog.csdn.net/xinyflove/article/details/108791970">Hexo博客添加搜索功能_PeakXin的博客-CSDN博客_hexo搜索功能</a></li>
<li>hexo显示pdf
<ul>
<li><strong><a href="https://blog.csdn.net/weixin_37726222/article/details/123071678">【有用】hexo post中pdf文件的插入_时间里的河的博客-CSDN博客_hexo 插入pdf</a></strong></li>
<li><strong><a href="https://blog.csdn.net/weixin_45926582/article/details/107559639?spm=1001.2101.3001.6650.2&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2-107559639-blog-115603908.pc_relevant_multi_platform_whitelistv3&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2-107559639-blog-115603908.pc_relevant_multi_platform_whitelistv3&amp;utm_relevant_index=5">hexo如何分类分标签进行展示与pdf、图片_月球转转转的博客-CSDN博客</a></strong></li>
</ul></li>
<li>hexo上传图片
<ul>
<li><strong><a href="https://blog.csdn.net/weixin_44783934/article/details/107798324?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-107798324-blog-104450037.t0_edu_mix&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-107798324-blog-104450037.t0_edu_mix&amp;utm_relevant_index=2">解决PicGo+GitHub搭建个人图床上传失败问题_wnhyang的博客-CSDN博客</a></strong></li>
<li><mark>PicGo上传失败，改用PicX</mark> <strong><a href="https://picx.xpoet.cn/#/upload">图片上传 | PicX 图床神器 (xpoet.cn)</a></strong></li>
<li><a href="https://blog.csdn.net/qq_38140292/article/details/118885686?">【Typora】github-与PicGO搭建图床_指尖听戏的博客-CSDN博客</a></li>
<li><a href="https://blog.csdn.net/qq_38140292/article/details/119076411">【hexo】基础教程-二-文章新增图片上传_指尖听戏的博客-CSDN博客_hexo怎么传照片</a></li>
</ul></li>
<li><a href="https://www.mingdao.me/Hexo/hexo-link-post/">Hexo如何增加站内文章链接 | 明道学苑 (mingdao.me)</a></li>
<li>生成归档页，显示全部。<a href="https://sobaigu.com/hexo-archives-show-all-in-one-page.html">参考</a></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置首页分页之前默认就有，这里就不额外加了</span></span><br><span class="line"><span class="comment"># index_generator:</span></span><br><span class="line"><span class="comment">#   per_page: 5</span></span><br><span class="line"></span><br><span class="line">archive_generator:</span><br><span class="line">  per_page: 40  <span class="comment">#值为0表示不分页，按需填写</span></span><br><span class="line">  yearly: <span class="literal">true</span>  <span class="comment">#是否按年生成归档</span></span><br><span class="line">  monthly: <span class="literal">false</span>  <span class="comment">#为了加快生成速度，按月归档就不要了</span></span><br><span class="line"></span><br><span class="line">tag_generator:</span><br><span class="line">  per_page: 40  <span class="comment">#值为0表示不分页，按需填写</span></span><br></pre></td></tr></table></figure>
<h2 id="主题">主题</h2>
<ol type="1">
<li>Fulid
<ul>
<li><a href="https://github.com/fluid-dev/hexo-theme-fluid">fluid-dev/hexo-theme-fluid: 一款 Material Design 风格的 Hexo 主题 / An elegant Material-Design theme for Hexo (github.com)</a></li>
<li><a href="https://hexo.fluid-dev.com/docs/start/#主题简介">开始使用 | Hexo Fluid 用户手册 (fluid-dev.com)</a></li>
<li><a href="https://hexo.fluid-dev.com/docs/guide/#slogan-打字机">配置指南 | Hexo Fluid 用户手册 (fluid-dev.com)</a></li>
<li></li>
</ul></li>
</ol>
]]></content>
      <categories>
        <category>随笔与个人文集</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>看李健视频的感悟</title>
    <url>/2022/02/21/%E9%9A%8F%E7%AC%94%E4%B8%8E%E4%B8%AA%E4%BA%BA%E6%96%87%E9%9B%86/%E6%9D%8E%E5%81%A5/</url>
    <content><![CDATA[<h2 id="看李健视频的感悟">看李健视频的感悟</h2>
<p>###　关于生活</p>
<ul>
<li><a href="https://www.bilibili.com/video/BV1kU4y1P7Hi?spm_id_from=333.999.0.0">【李健】初入大学，这些视频缓解了我很大一部分焦虑|<font face="Monaco">bilibili.</font></a></li>
<li><a href="https://www.bilibili.com/video/BV1Sx411s71x?spm_id_from=333.999.0.0">【看见李健四大高校健谈会】第一站 清华大学「看见青春-大时代背景下的个人生活」_<font face="Monaco">2015.11.19 bilibili.</font>.</a></li>
<li><a href="https://www.bilibili.com/video/BV1sb411x7bb?spm_id_from=333.999.0.0">【李健】最值得一看的访谈——如何应对走红_<font face="Monaco">bilibili.</font></a></li>
<li><a href="https://www.bilibili.com/video/BV1Bz4y1S7F7?spm_id_from=333.999.0.0">【李健】专访回顾（三）生活的理想是为了理想的生活 音乐不是我生活的全部__<font face="Monaco">20130828 bilibili.</font></a></li>
<li><a href="https://www.bilibili.com/video/BV1KE41117km?spm_id_from=333.999.0.0">【李健】专访：优秀音乐家不需要突破（超清）<font face="Monaco">bilibili.</font></a></li>
<li></li>
</ul>
<p><a href="https://www.bilibili.com/video/BV1Sx411s71x?spm_id_from=333.999.0.0">【看见李健四大高校健谈会】第一站 清华大学「看见青春-大时代背景下的个人生活」_<font face="Monaco">2015.11.19 bilibili.</font></a></p>
<blockquote>
<p>[!TIP] 1. 人最重要的是<strong>拥有自己的生活，拥有自己的快乐</strong>。很多时候所谓事业要达到一个什么样的顶峰其实没有真正的意义。 2. 一个人一定要拥有自己的爱好，拥有自己的快乐。很少有人能够从事自己热爱的工作，枯燥的生活正是被自己的爱好，生活的小恩小惠所化解掉了。</p>
</blockquote>
]]></content>
      <categories>
        <category>随笔与个人文集</category>
      </categories>
  </entry>
  <entry>
    <title>职业规划</title>
    <url>/2022/05/17/%E9%9A%8F%E7%AC%94%E4%B8%8E%E4%B8%AA%E4%BA%BA%E6%96%87%E9%9B%86/%E9%9A%8F%E7%AC%941-%E5%85%B3%E4%BA%8E%E8%81%8C%E4%B8%9A%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<h2 id="职业规划"><strong>职业规划</strong></h2>
<p><code>2022.5.16</code>于家中</p>
<ul>
<li><a href="https://www.bilibili.com/video/BV1PY4y1e7VB?spm_id_from=333.999.0.0">给C++就业方向的应届毕业生的一些分析与建议，帮助大家少浪费时间，多花时间在有意义的事情上_哔哩哔哩_bilibili</a></li>
<li><a href="https://www.bilibili.com/video/BV1C541127i7?spm_id_from=333.999.0.0">快问快答丨入行/转行IC选什么方向？学什么东西？要不要读研？_哔哩哔哩_bilibili</a></li>
<li><a href="https://mp.weixin.qq.com/s/v1wz3tN8PxTGnbMEPHnwFg">C++学习建议，重点看一下</a></li>
</ul>
<p>纯软件的职业不适合我，论编程开发，我比不过学软件的。但是，<strong>世上编程者大把，精通模电者寥寥。</strong>，会编程的人很多，可是又有几个人懂得硬件呢？</p>
<p>没事就问问自己， <strong><font size="5"><font color="red">自己的核心竞争力是什么？</font></font></strong> ，要学一些别人不会，你会的东西，这种东西没有你做不了，夹缝中求生存。</p>
<p>目前来看，很有优势，毕竟本科是学电路的，有硬件的知识，会软件的肯定没有几个人懂硬件，世上也不缺会编程的人。但是要切记 <strong><font size="5"><font color="red">先精通一门，再扩展技能</font></font></strong></p>
]]></content>
      <categories>
        <category>随笔与个人文集</category>
      </categories>
      <tags>
        <tag>人生规划</tag>
      </tags>
  </entry>
  <entry>
    <title>RL介绍</title>
    <url>/2022/10/15/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/03RL/02RL%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h2 id="强化学习-reinforcement-learning"><strong>强化学习 Reinforcement Learning</strong></h2>
<p>声明：以下课件来源于 <strong><em>北京邮电大学人工智能学院鲁鹏老师</em></strong></p>
<p><a href="https://imgse.com/i/xQ3EJx"><img src="https://s1.ax1x.com/2022/10/03/xQ3EJx.png" alt="xQ3EJx.png"></a></p>
<h3 id="机器学习分支">机器学习分支</h3>
<p><a href="https://imgse.com/i/xQ3MeH"><img src="https://s1.ax1x.com/2022/10/03/xQ3MeH.png" alt="xQ3MeH.png"></a> <a href="https://imgse.com/i/xQ3AF1"><img src="https://s1.ax1x.com/2022/10/03/xQ3AF1.png" alt="xQ3AF1.png"></a></p>
<h3 id="强化学习特点">强化学习特点</h3>
<p><a href="https://imgse.com/i/xQ3PeJ"><img src="https://s1.ax1x.com/2022/10/03/xQ3PeJ.png" alt="xQ3PeJ.png"></a></p>
<h3 id="reward"><strong>2. Reward</strong></h3>
<p><a href="https://imgse.com/i/xQ3FoR"><img src="https://s1.ax1x.com/2022/10/03/xQ3FoR.png" alt="xQ3FoR.png"></a> <a href="https://imgse.com/i/xQ3iw9"><img src="https://s1.ax1x.com/2022/10/03/xQ3iw9.png" alt="xQ3iw9.png"></a> <a href="https://imgse.com/i/xQ3VW6"><img src="https://s1.ax1x.com/2022/10/03/xQ3VW6.png" alt="xQ3VW6.png"></a> <a href="https://imgse.com/i/xQ3eSK"><img src="https://s1.ax1x.com/2022/10/03/xQ3eSK.png" alt="xQ3eSK.png"></a> <a href="https://imgse.com/i/xQ3mQO"><img src="https://s1.ax1x.com/2022/10/03/xQ3mQO.png" alt="xQ3mQO.png"></a> <a href="https://imgse.com/i/xQ3nyD"><img src="https://s1.ax1x.com/2022/10/03/xQ3nyD.png" alt="xQ3nyD.png"></a> <a href="https://imgse.com/i/xQ3uOe"><img src="https://s1.ax1x.com/2022/10/03/xQ3uOe.png" alt="xQ3uOe.png"></a> <a href="https://imgse.com/i/xQ3Qwd"><img src="https://s1.ax1x.com/2022/10/03/xQ3Qwd.png" alt="xQ3Qwd.png"></a> <a href="https://imgse.com/i/xQ3lTA"><img src="https://s1.ax1x.com/2022/10/03/xQ3lTA.png" alt="xQ3lTA.png"></a> <a href="https://imgse.com/i/xQ38Yt"><img src="https://s1.ax1x.com/2022/10/03/xQ38Yt.png" alt="xQ38Yt.png"></a> <a href="https://imgse.com/i/xQ3YSf"><img src="https://s1.ax1x.com/2022/10/03/xQ3YSf.png" alt="xQ3YSf.png"></a> <a href="https://imgse.com/i/xQ33FI"><img src="https://s1.ax1x.com/2022/10/03/xQ33FI.png" alt="xQ33FI.png"></a> <a href="https://imgse.com/i/xQ3GfP"><img src="https://s1.ax1x.com/2022/10/03/xQ3GfP.png" alt="xQ3GfP.png"></a> <a href="https://imgse.com/i/xQ3N6S"><img src="https://s1.ax1x.com/2022/10/03/xQ3N6S.png" alt="xQ3N6S.png"></a></p>
<p><a href="https://imgse.com/i/xQ3tl8"><img src="https://s1.ax1x.com/2022/10/03/xQ3tl8.png" alt="xQ3tl8.png"></a> <a href="https://imgse.com/i/xQ3UOg"><img src="https://s1.ax1x.com/2022/10/03/xQ3UOg.png" alt="xQ3UOg.png"></a></p>
<p><a href="https://imgse.com/i/xQ3sf0"><img src="https://s1.ax1x.com/2022/10/03/xQ3sf0.png" alt="xQ3sf0.png"></a> <a href="https://imgse.com/i/xQ30Ts"><img src="https://s1.ax1x.com/2022/10/03/xQ30Ts.png" alt="xQ30Ts.png"></a> <a href="https://imgse.com/i/xQ3rYq"><img src="https://s1.ax1x.com/2022/10/03/xQ3rYq.png" alt="xQ3rYq.png"></a> <a href="https://imgse.com/i/xQ3Dkn"><img src="https://s1.ax1x.com/2022/10/03/xQ3Dkn.png" alt="xQ3Dkn.png"></a> <a href="https://imgse.com/i/xQ3clT"><img src="https://s1.ax1x.com/2022/10/03/xQ3clT.png" alt="xQ3clT.png"></a> <a href="https://imgse.com/i/xQ32XF"><img src="https://s1.ax1x.com/2022/10/03/xQ32XF.png" alt="xQ32XF.png"></a> <a href="https://imgse.com/i/xQ3g6U"><img src="https://s1.ax1x.com/2022/10/03/xQ3g6U.png" alt="xQ3g6U.png"></a> <a href="https://imgse.com/i/xQ3Wm4"><img src="https://s1.ax1x.com/2022/10/03/xQ3Wm4.png" alt="xQ3Wm4.png"></a> <a href="https://imgse.com/i/xQ3h79"><img src="https://s1.ax1x.com/2022/10/03/xQ3h79.png" alt="xQ3h79.png"></a> <a href="https://imgse.com/i/xQ35kR"><img src="https://s1.ax1x.com/2022/10/03/xQ35kR.png" alt="xQ35kR.png"></a></p>
<p><a href="https://imgse.com/i/xlsQZn"><img src="https://s1.ax1x.com/2022/10/05/xlsQZn.png" alt="xlsQZn.png"></a> <a href="https://imgse.com/i/xlslaq"><img src="https://s1.ax1x.com/2022/10/05/xlslaq.png" alt="xlslaq.png"></a> <a href="https://imgse.com/i/xls1I0"><img src="https://s1.ax1x.com/2022/10/05/xls1I0.png" alt="xls1I0.png"></a> <a href="https://imgse.com/i/xlsGGT"><img src="https://s1.ax1x.com/2022/10/05/xlsGGT.png" alt="xlsGGT.png"></a> <a href="https://imgse.com/i/xls8iV"><img src="https://s1.ax1x.com/2022/10/05/xls8iV.png" alt="xls8iV.png"></a> <a href="https://imgse.com/i/xlsJRU"><img src="https://s1.ax1x.com/2022/10/05/xlsJRU.png" alt="xlsJRU.png"></a> <a href="https://imgse.com/i/xlsYzF"><img src="https://s1.ax1x.com/2022/10/05/xlsYzF.png" alt="xlsYzF.png"></a> <a href="https://imgse.com/i/xlsUsJ"><img src="https://s1.ax1x.com/2022/10/05/xlsUsJ.png" alt="xlsUsJ.png"></a> <a href="https://imgse.com/i/xlsNM4"><img src="https://s1.ax1x.com/2022/10/05/xlsNM4.png" alt="xlsNM4.png"></a> <a href="https://imgse.com/i/xlsaL9"><img src="https://s1.ax1x.com/2022/10/05/xlsaL9.png" alt="xlsaL9.png"></a> <a href="https://imgse.com/i/xlswZR"><img src="https://s1.ax1x.com/2022/10/05/xlswZR.png" alt="xlswZR.png"></a> <a href="https://imgse.com/i/xls0d1"><img src="https://s1.ax1x.com/2022/10/05/xls0d1.png" alt="xls0d1.png"></a> <a href="https://imgse.com/i/xlsBIx"><img src="https://s1.ax1x.com/2022/10/05/xlsBIx.png" alt="xlsBIx.png"></a></p>
]]></content>
      <categories>
        <category>强化学习</category>
      </categories>
  </entry>
  <entry>
    <title>线性回归</title>
    <url>/2022/07/21/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/00Tra_ML/02.%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/</url>
    <content><![CDATA[<h2 id="单变量线性回归">单变量线性回归</h2>
<p>梯度下降做的事就是找到一个值 <span class="math inline">\(\theta\)</span> 使得代价函数 <span class="math inline">\(J(\theta)\)</span> 最小</p>
<h2 id="多变量线性回归">多变量线性回归</h2>
<ul>
<li>通常用 <strong>大写、黑体</strong> 字母表示矩阵，用小写字母表示标量或向量。</li>
<li><strong>正斜体</strong> 总的原则是变量（矢量，张量）等用斜体；数字、确定符号、词汇缩缩、单位等用正体。参考 <a href="https://blog.csdn.net/wanjiac/article/details/106085105">科技论文书写规范之正斜体问题</a></li>
</ul>
<h3 id="符号说明">符号说明</h3>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">符号/变量</th>
<th style="text-align: center;">含义</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><span class="math inline">\(n\)</span></td>
<td style="text-align: center;">特征量的数目</td>
</tr>
<tr class="even">
<td style="text-align: center;"><span class="math inline">\(m\)</span></td>
<td style="text-align: center;">训练样本的数量</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><span class="math inline">\(h\)</span></td>
<td style="text-align: center;">学习方法的解决方案或函数也称为假设</td>
</tr>
<tr class="even">
<td style="text-align: center;"><span class="math inline">\(\boldsymbol{x}^{\left(i \right)}\)</span></td>
<td style="text-align: center;">第<span class="math inline">\(i\)</span>个训练样本的输入特征值</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><span class="math inline">\(\boldsymbol{x}^{\left(i \right)}_{j}\)</span></td>
<td style="text-align: center;">第<span class="math inline">\(i\)</span>个训练样本中第<span class="math inline">\(j\)</span>个特征量的值</td>
</tr>
</tbody>
</table>
<p><a href="https://imgtu.com/i/XgAtXD#pic_center"><img src="https://s1.ax1x.com/2022/06/11/XgAtXD.png" alt="XgAtXD.png" style="zoom:150%;"></a></p>
<table style="width:6%;">
<colgroup>
<col style="width: 5%">
</colgroup>
<thead>
<tr class="header">
<th><a href="https://imgtu.com/i/XgAa0H#pic_center"><img src="https://s1.ax1x.com/2022/06/11/XgAa0H.png" alt="XgAa0H.png" style="zoom:150%;"></a></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://imgtu.com/i/XgAUne"><img src="https://s1.ax1x.com/2022/06/11/XgAUne.png" alt="XgAUne.png" style="zoom:150%;"></a></td>
</tr>
</tbody>
</table>
<p><a href="https://imgtu.com/i/XgAd7d"><img src="https://s1.ax1x.com/2022/06/11/XgAd7d.png" alt="XgAd7d.png" style="zoom:150%;"></a></p>
<p><code>python</code>计算代价函数的代码 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">conputeCost</span> (x, y, theta):</span><br><span class="line">    inner = np.power(((x * theta.T) – y), <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> np.<span class="built_in">sum</span>(inner) / (<span class="number">2</span> * <span class="built_in">len</span>(x))</span><br></pre></td></tr></table></figure> 通过图像，<span class="math inline">\(y\)</span> 轴是代价函数的最小值 <span class="math inline">\(\mathrm{min}J(\theta)\)</span> ，<span class="math inline">\(x\)</span>轴是迭代次数。如果随着迭代次数的增加，代价函数越来越小，就说明 <strong><code>梯度下降</code></strong> 在正常工作。</p>
<h3 id="梯度下降-vs.-正规方程">梯度下降 vs. 正规方程</h3>
<table>
<colgroup>
<col style="width: 50%">
<col style="width: 50%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">梯度下降</th>
<th style="text-align: center;">正规方程</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">需要选择学习率</td>
<td style="text-align: center;">不需要</td>
</tr>
<tr class="even">
<td style="text-align: center;">需要多次迭代</td>
<td style="text-align: center;">一次运算就得出结果</td>
</tr>
<tr class="odd">
<td style="text-align: center;">当特征数量大的时候比较适用</td>
<td style="text-align: center;">计算 <span class="math inline">\((\boldsymbol{X^TX})^{-1}\)</span> 如果特征数量很大，则运算的速度就会很慢，矩阵逆运算的时间复杂度是 <span class="math inline">\(\mathrm{O}(n^3)\)</span>,通常来说 <code>n&lt;10000</code> 还是可以接受的。</td>
</tr>
<tr class="even">
<td style="text-align: center;">适用于各种模型</td>
<td style="text-align: center;">只适用与线性模型</td>
</tr>
</tbody>
</table>
<h2 id="向量化">向量化</h2>
<p>使用程序计算这样一个线性回归假设函数：<span class="math inline">\(h_{\theta}(x)=\sum^n_{j=0} \theta_j x_j\)</span>，可以写成向量的形式： <span class="math display">\[h_{\theta}(x)=\sum^n_{j=0} \theta_j x_j = \boldsymbol{ \theta^T x}\]</span> 非向量化实现 <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span> prediction = <span class="number">0.0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j&lt;=n; j++)</span><br><span class="line">    prediction += theta[j] * x[j];</span><br></pre></td></tr></table></figure></p>
<p>向量化实现，使用 <code>C++</code> 数值线性代数库，更简单、更高效的代码 <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span> prediction = theta.transpose( ) * x;</span><br></pre></td></tr></table></figure></p>
<ol type="1">
<li><a href="https://blog.csdn.net/u010976453/article/details/54381248">机器学习中的线性代数之矩阵求导</a></li>
<li><a href="https://blog.csdn.net/u014628146/article/details/90105826">矩阵转置基本性质</a></li>
<li><a href="https://blog.csdn.net/CxC2333/article/details/108740970">常见的二范数是什么意思？有什么用?</a></li>
</ol>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
  </entry>
  <entry>
    <title>CNN</title>
    <url>/2022/10/16/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/05DL/CNN/</url>
    <content><![CDATA[<h2 id="cnn">CNN</h2>
<p>如果用全连接神经网络处理大尺寸图像具有三个明显的缺点：</p>
<p>（1）首先将图像展开为向量会丢失空间信息； （2）其次参数过多效率低下，训练困难； （3）同时大量的参数也很快会导致网络过拟合。</p>
<p>而使用卷积神经网络可以很好地解决上面的三个问题。</p>
<p>与常规神经网络不同，卷积神经网络的各层中的神经元是 <code>3</code> 维排列的：宽度、高度和深度。其中的宽度和高度是很好理解的，因为本身卷积就是一个二维模板，但是在卷积神经网络中的深度指的是 <strong>激活数据体</strong> 的第三个维度，而不是整个网络的深度，<strong>整个网络的深度指的是网络的层数。</strong></p>
<p>举个例子来理解什么是宽度，高度和深度，假如使用CIFAR-10中的图像是作为卷积神经网络的输入，该 <strong>输入数据体</strong> 的维度是32x32x3（宽度，高度和深度）。<strong>我们将看到，层中的神经元将只与前一层中的一小块区域连接，而不是采取全连接方式。</strong> 对于用来分类CIFAR-10中的图像的卷积网络，其最后的输出层的维度是1x1x10，因为在卷积神经网络结构的最后部分将会把全尺寸的图像压缩为包含分类评分的一个向量，<strong>向量是在深度方向排列的</strong>。</p>
<p>卷积神经网络利用输入是图片的特点，把神经元设计成三个维度 ： <code>width, height, depth (height * width * channel</code> ) (注意这个 <code>depth</code> 不是神经网络的深度，而是用来描述神经元的) 。比如输入的图片大小是 <code>32 × 32 × 3 (rgb)</code>，那么输入神经元就也具有 <code>32×32×3</code> 的维度。下面是图解</p>
<p><img src="https://img-blog.csdn.net/20160404000318630"></p>
<p><a href="https://imgse.com/i/xG2vMq"><img src="https://s1.ax1x.com/2022/10/08/xG2vMq.png" alt="xG2vMq.png"></a></p>
<p>我的理解是卷积核就相当于神经元，但这个神经元是局部连接的，就是说一个神经元/卷积核只接受卷积核尺寸大小的数据输入，对输入的数据通过卷积核内的权重和偏置进行一次卷积运算，得到一个输出值，通过多次移动便得到了一层激活层的输出。权值共享的意思也就是这个神经元/卷积核在移动中用的是同一组权重和偏置</p>
<h3 id="卷积神经网络能干什么">卷积神经网络能干什么</h3>
<p><a href="https://imgse.com/i/xGRpZT"><img src="https://s1.ax1x.com/2022/10/08/xGRpZT.png" alt="xGRpZT.png"></a> <a href="https://imgse.com/i/xGRii4"><img src="https://s1.ax1x.com/2022/10/08/xGRii4.png" alt="xGRii4.png"></a> <a href="https://imgse.com/i/xG2zLV"><img src="https://s1.ax1x.com/2022/10/08/xG2zLV.png" alt="xG2zLV.png"></a> <a href="https://imgse.com/i/xG2xs0"><img src="https://s1.ax1x.com/2022/10/08/xG2xs0.png" alt="xG2xs0.png"></a> <a href="https://imgse.com/i/xGRkW9"><img src="https://s1.ax1x.com/2022/10/08/xGRkW9.png" alt="xGRkW9.png"></a></p>
<h2 id="卷积神经网络架构">卷积神经网络架构</h2>
<p><a href="https://imgse.com/i/xGR9dU"><img src="https://s1.ax1x.com/2022/10/08/xGR9dU.png" alt="xGR9dU.png"></a> <a href="https://imgse.com/i/xGRCoF"><img src="https://s1.ax1x.com/2022/10/08/xGRCoF.png" alt="xGRCoF.png"></a> <a href="https://imgse.com/i/xGRFJJ"><img src="https://s1.ax1x.com/2022/10/08/xGRFJJ.png" alt="xGRFJJ.png"></a> <a href="https://imgse.com/i/xGRAzR"><img src="https://s1.ax1x.com/2022/10/08/xGRAzR.png" alt="xGRAzR.png"></a> <a href="https://imgse.com/i/xGRVQ1"><img src="https://s1.ax1x.com/2022/10/08/xGRVQ1.png" alt="xGRVQ1.png"></a></p>
<ul>
<li>红→蓝，<code>6</code> 是代表 <code>6</code> 个卷积核，每个卷积核是 <code>5×5×3</code>，得到的 <code>28×28×6</code></li>
<li>蓝→绿， <code>10</code> 是代表 <code>10</code> 个卷积核，每个卷积核是 <code>5×5×6</code></li>
</ul>
<p><a href="https://imgse.com/i/xGRQFe"><img src="https://s1.ax1x.com/2022/10/08/xGRQFe.png" alt="xGRQFe.png"></a></p>
<h3 id="卷积">卷积</h3>
<ul>
<li>卷积核可以拥有多个</li>
<li>每个子区域使用相同的卷积核 <strong>（卷积参数共享）</strong></li>
</ul>
<p><a href="https://imgse.com/i/xGRNef"><img src="https://s1.ax1x.com/2022/10/08/xGRNef.png" alt="xGRNef.png"></a> <a href="https://imgse.com/i/xGRZsx"><img src="https://s1.ax1x.com/2022/10/08/xGRZsx.png" alt="xGRZsx.png"></a></p>
<p><a href="https://imgse.com/i/xGRneK"><img src="https://s1.ax1x.com/2022/10/08/xGRneK.png" alt="xGRneK.png"></a></p>
<p><a href="https://imgse.com/i/xGRudO"><img src="https://s1.ax1x.com/2022/10/08/xGRudO.png" alt="xGRudO.png"></a></p>
<p><a href="https://imgse.com/i/xGR1Wd"><img src="https://s1.ax1x.com/2022/10/08/xGR1Wd.png" alt="xGR1Wd.png"></a></p>
<h3 id="卷积层参数">卷积层参数</h3>
<p><a href="https://imgse.com/i/xGRKoD"><img src="https://s1.ax1x.com/2022/10/08/xGRKoD.png" alt="xGRKoD.png"></a></p>
<p><strong>1. 滑动窗口步长</strong> <a href="https://imgse.com/i/xGReL6"><img src="https://s1.ax1x.com/2022/10/08/xGReL6.png" alt="xGReL6.png"></a></p>
<p><strong>2. 卷积核尺寸</strong> - 一般<code>3*3</code>，尺寸越大，特征提取越粗糙，尺寸越小，特征提取越细腻。</p>
<p><strong>3. 边缘填充 padding</strong></p>
<ul>
<li>越往边界的点，能被利用的次数越少；越往中间的点，能被利用的次数越多。<code>padding</code> 一定程度上弥补了边界信息缺失的问题，加上一圈 <code>0</code> ，能够使得边缘特征充分的被利用。</li>
</ul>
<p><a href="https://imgse.com/i/xGRQFe"><img src="https://s1.ax1x.com/2022/10/08/xGRQFe.png" alt="xGRQFe.png"></a> <a href="https://imgse.com/i/xGRlJH"><img src="https://s1.ax1x.com/2022/10/08/xGRlJH.png" alt="xGRlJH.png"></a></p>
<h3 id="pooling">pooling</h3>
<p><a href="https://imgse.com/i/xGR8SA"><img src="https://s1.ax1x.com/2022/10/08/xGR8SA.png" alt="xGR8SA.png"></a></p>
<ul>
<li>特征图个数不会变，只是去变长和宽。<code>pooling</code> 不涉及任何矩阵的计算</li>
<li>最大 <code>pooling</code>，在神经网络中，一般认为值越大，特征越明显</li>
</ul>
<p><a href="https://imgse.com/i/xGRGQI"><img src="https://s1.ax1x.com/2022/10/08/xGRGQI.png" alt="xGRGQI.png"></a></p>
<p><a href="https://imgse.com/i/xGRJyt"><img src="https://s1.ax1x.com/2022/10/08/xGRJyt.png" alt="xGRJyt.png"></a></p>
<h3 id="经典卷积神经网络">经典卷积神经网络</h3>
<ul>
<li><strong>带参数计算</strong> 的才能被叫做 <strong>层</strong></li>
<li>深度学习，用更深的网络结构去提取原始图像中的特征</li>
<li>分类还是回归，取决于损失函数和层如何连接</li>
</ul>
<p><a href="https://imgse.com/i/xGRaTS"><img src="https://s1.ax1x.com/2022/10/08/xGRaTS.png" alt="xGRaTS.png"></a></p>
<p><a href="https://imgse.com/i/xGRUw8"><img src="https://s1.ax1x.com/2022/10/08/xGRUw8.png" alt="xGRUw8.png"></a> <a href="https://imgse.com/i/xGRYOP"><img src="https://s1.ax1x.com/2022/10/08/xGRYOP.png" alt="xGRYOP.png"></a> <a href="https://imgse.com/i/xGRwFg"><img src="https://s1.ax1x.com/2022/10/08/xGRwFg.png" alt="xGRwFg.png"></a></p>
<h3 id="感受野">感受野</h3>
<p><a href="https://imgse.com/i/xGR0YQ"><img src="https://s1.ax1x.com/2022/10/08/xGR0YQ.png" alt="xGR0YQ.png"></a> <a href="https://imgse.com/i/xGRBWj"><img src="https://s1.ax1x.com/2022/10/08/xGRBWj.png" alt="xGRBWj.png"></a></p>
]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>CNN</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习数学基础</title>
    <url>/2022/10/23/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="内积空间">内积空间</h2>
<p><strong>点积</strong>是<strong>内积</strong>的具体表现形式之一。</p>
<p><span class="math display">\[&lt;\vec{u},\vec{v}&gt; = \vec{u} \cdot \vec{v} = u_1v_1+...+u_nv_n\]</span></p>
<p>只有把内积定义成点积的时候，<strong>内积空间</strong>才叫做<strong>欧几里得空间</strong>或<strong>欧式空间</strong>。</p>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
  </entry>
  <entry>
    <title>如何高效休息</title>
    <url>/2022/10/24/%E9%9A%8F%E7%AC%94%E4%B8%8E%E4%B8%AA%E4%BA%BA%E6%96%87%E9%9B%86/%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E4%BC%91%E6%81%AF/</url>
    <content><![CDATA[<h1 id="section"></h1>
<p>今天不谈工作谈休息。当然休息是为了更好地工作，所以谈休息也是谈工作。</p>
<p>什么样的休息，才能最大限度地让人精神饱满地投入到接下来的工作？</p>
<p>流行的休息法大概有两派，就好像气宗和剑宗。老一辈的人认为应该劳逸结合，每工作一段时间就休息一下，搞个什么工间操之类，就好像学生按节上课一样。年轻人强调拼劲，认为最好猛干一天，然后下班拼命放松。具体的休息内容，老一辈建议出门走两圈，或者跟（真）人聊聊天。年轻人则宁可躺在床上读个什么手机段子。</p>
<p><strong>现在我们有强有力的科学证据，老一辈的做法是对的。</strong></p>
<p>今天要说的是99U上的一篇文章，<em>“<strong>A Science-Backed Guide to Taking Truly Restful Breaks</strong>”</em>（良好休息的科学指南），作者 Christian Jarrett。</p>
<p>文章标题有点像微信朋友圈转发的那种生活小常识，但这篇文章其实是一个最新研究的综述。</p>
<p>科学家对休息效果的定义是，你在办公室工作一天，中间使用了什么休息方法，到下午下班前的精神状态和工作效率仍能保持高水平。</p>
<p>我们先来猜一下，在以下这几种休息活动中，哪个效率最高？</p>
<ol type="1">
<li><p><mark>放松：什么都不干，做做白日梦，或者做几个伸展运动</mark></p></li>
<li><p>给身体补充点什么东西：喝杯咖啡之类</p></li>
<li><p><mark>社交：跟同事聊聊天</mark></p></li>
<li><p>认知：读读新闻，查看邮件</p></li>
</ol>
<p>第4项，是我们大多数人最喜欢的休息方法。而且此前就有研究表明，<strong>一个人越累越困，反而越想上网看点什么东西。这个现象非常有意思，这就是为什么我们越晚睡的时候就越会……更晚睡。</strong></p>
<p>但研究结果非常明确——<strong>上网不但不能休息，反而会让我们变得更累。</strong></p>
<p>这是因为<strong>脑力劳动者最需要花费</strong>，也是最需要<strong>从休息中恢复</strong>的两个资源，是“<strong>意志力</strong>”和“<strong>注意力</strong>”。现在很多心理学实验都认为这是<strong>两个有限的资源，最好用在刀刃上</strong>。</p>
<p>所以休息的目的就是让注意力和意志力回血。但是上网——<strong>阅读会消耗注意力</strong>；决定是否点击，是否购买之类的<strong>各种决策会消耗意志力</strong>。</p>
<p>研究结果，真正有用的休息是1、3这两项。喝咖啡也没用。</p>
<p>所以科学家的<strong><font color="red">第一个建议</font></strong>是要休息，先断网。</p>
<p><strong><font color="red">第二个建议</font></strong>是短而频繁的休息比长时间工作然后长时间休息更好。</p>
<p>这个原理是人体不是汽车，你把油快用完了统一加一次就行，而是必须随时用随时补充。大概每隔半小时或者一小时就休息几分钟，效果良好。另外这种短休息流程要从上午就开始做，不要等到下午很累了再做。</p>
<p><strong><font color="red">第三个建议</font></strong>是最好休息的时候离开办公室。</p>
<p>有的公司喜欢让所有同事留在公司午休，吃个午饭也要在一起，其实并不利于休息。多伦多大学的研究者，最近研究观察了一百多位在大学工作的人，看他们午饭怎么吃。结果是如果你午饭跟同事一起吃，不论聊的是不是工作，休息效果都不好——快下班的时候别人评价你看上去很疲惫。如果这顿午饭还是老板要求全体一起吃的，更累。</p>
<p>所以从休息角度，找同事聊天最好用上班时间，午饭还是自由点好。</p>
<p>研究表明，哪怕出去散步五分钟，效果都要好得多。</p>
<h2 id="评论">| 评论</h2>
<p>我看这些研究中价值最大的还是有关上网的一项。对高强度脑力劳动者来说，“上网休息一下”，拿手机找两个猫的可爱图片看看，简直是再正常不过的事情了。可是现在我们知道<strong>凡是调动了注意力和意志力的行为就是消耗而不是休息。</strong></p>
<p>说白了，就是我们常常把“娱乐”和“休息”给混为一谈。</p>
<h2 id="由此得到">| 由此得到</h2>
<p>娱乐不是休息。</p>
<h2 id="总结">| 总结</h2>
<blockquote>
<p>科学家关于休息的几点建议：</p>
<ol type="1">
<li><p>要休息，先断网。</p></li>
<li><p>短而频繁的休息比长时间工作然后长时间休息更好。</p></li>
<li><p>最好休息的时候离开办公室。</p></li>
</ol>
</blockquote>
]]></content>
      <categories>
        <category>随笔与个人文集</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>健康作息</title>
    <url>/2022/10/24/%E9%9A%8F%E7%AC%94%E4%B8%8E%E4%B8%AA%E4%BA%BA%E6%96%87%E9%9B%86/00%E5%81%A5%E5%BA%B7%E4%BD%9C%E6%81%AF/</url>
    <content><![CDATA[<h2 id="一饮食">一、饮食</h2>
<ol type="1">
<li>少油少甜</li>
<li>不吃辣</li>
<li>晚上8点后不吃东西</li>
</ol>
<h2 id="二工作">二、工作</h2>
<ol type="1">
<li>避免长时间（1小时）看电脑，每1小时，户外5分钟</li>
<li>坐姿端正，避免脖子前倾和弯腰驼背</li>
<li>避免低头、久坐</li>
</ol>
<h2 id="三运动">三、运动</h2>
<ol type="1">
<li>每天<strong>户外运动</strong>大于1小时</li>
</ol>
]]></content>
      <categories>
        <category>随笔与个人文集</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>每天锻炼</title>
    <url>/2022/10/24/%E9%9A%8F%E7%AC%94%E4%B8%8E%E4%B8%AA%E4%BA%BA%E6%96%87%E9%9B%86/00%E8%BF%90%E5%8A%A8%E5%BD%A2%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="section"></h1>
<h2 id="一运动形式">一、运动形式</h2>
<h3 id="跑步">1.1 跑步</h3>
<h3 id="跳绳">1.2 跳绳</h3>
<h3 id="体能类">1.3 体能类</h3>
<ol type="1">
<li>背部和肩部肌肉
<ul>
<li><a href="https://www.bilibili.com/video/BV1CL411x7gV/?spm_id_from=333.788.recommend_more_video.0&amp;vd_source=83831fc0970a6c8704479f7cfc679937">练出更宽的肩膀和背部，不再瘦弱（一对哑铃在家练）_哔哩哔哩_bilibili</a></li>
<li></li>
</ul></li>
<li>胸部肌肉
<ul>
<li><a href="https://www.bilibili.com/video/BV1rY411H7V2/?spm_id_from=333.788.recommend_more_video.5&amp;vd_source=83831fc0970a6c8704479f7cfc679937">练出有型胸肌，不再单薄（一对哑铃在家练）_哔哩哔哩_bilibili</a></li>
</ul></li>
<li>手臂/腿部肌肉
<ol type="1">
<li>（负重）深蹲</li>
</ol></li>
<li>手臂肌肉
<ul>
<li>直立哑铃交替</li>
</ul></li>
</ol>
<p>🔵 <strong>链接：</strong></p>
<ol type="1">
<li><a href="https://www.jirou.com/html/yalingdaquan.html">哑铃健身图解大全（适合在家锻炼）</a></li>
<li></li>
</ol>
<h2 id="二运动频率">二、运动频率</h2>
<p><img src="https://cdn.staticaly.com/gh/peirsist/blog_img@master/Snipaste_2022-10-24_17-35-40.66yls7r574w0.webp" style="zoom:150%;"></p>
<p>markdown流程图代码 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph TB</span><br><span class="line">    Start(新的一天) --&gt; badminton&#123;&quot;打羽毛球？&quot;&#125;</span><br><span class="line">    </span><br><span class="line">    badminton --&gt;|是| dumbbell[&quot;力量训练&quot;]</span><br><span class="line">     </span><br><span class="line">    badminton --&gt;|否| running[&quot;耐力、爆发力训练&quot;]</span><br><span class="line">    running --&gt; dumbbell</span><br><span class="line">    </span><br><span class="line">    dumbbell --&gt; End(洗洗睡觉)</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>随笔与个人文集</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>打好羽毛球总结-自己经验</title>
    <url>/2022/10/23/%E9%9A%8F%E7%AC%94%E4%B8%8E%E4%B8%AA%E4%BA%BA%E6%96%87%E9%9B%86/01-0%E6%89%93%E5%A5%BD%E7%BE%BD%E6%AF%9B%E7%90%83%E6%80%BB%E7%BB%93-%E8%87%AA%E5%B7%B1%E7%BB%8F%E9%AA%8C/</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<h2 id="一前言">一、前言</h2>
<p>从2021年10月开始频繁的打羽毛球，想想在河大的时候，想打球的时候就去场上找人打，跟各种各样的人打，那时候水平真的提升的快，经常看羽毛球视频。到2022年9月上过几次羽毛球课。</p>
<p>经过一年，回想过去打球的经历，总结一下过去经验。</p>
<h2 id="二总结自己的经验">二、总结（自己的经验）</h2>
<h3 id="基础">2.1. 基础</h3>
<p>羽毛球最重要的是：（<strong>基础，基础最重要</strong>）</p>
<ol type="1">
<li><strong><font color="red">步伐</font></strong>。七分步伐三分手法，非常重要。</li>
</ol>
<ul>
<li>交叉步和并步</li>
</ul>
<ol start="2" type="1">
<li><strong><font color="red">后场高远球、杀球的姿势</font></strong>。首先侧身、架拍、挥拍。</li>
<li><strong><font color="red">体力</font></strong> 。</li>
</ol>
<p>难点在于如何在打球的时候 <strong>下意识</strong> 做出这些动作，只能靠日复一日的练习。</p>
<hr>
<h3 id="进阶">2.2 进阶</h3>
<ol type="1">
<li><strong>球路的变化</strong>，调动对手
<ul>
<li>球路要多样，以调动对手为主</li>
</ul></li>
<li><strong>接杀</strong>
<ul>
<li>正手接杀挡对角</li>
<li>正手接杀卸力挡网</li>
<li>反手接杀挡对角</li>
<li>反手接杀卸力挡网。后场起跳重杀，卸力挡网最好要刚刚贴网而过，破坏连贯。</li>
</ul></li>
<li><strong>一拍后场杀球</strong></li>
<li><strong>调动的意识</strong>，得经常训练，下意识</li>
<li><strong>发球推球</strong>
<ul>
<li>别人发球后，推球到后场</li>
</ul></li>
<li>如何做到不起球，贴网而过的球</li>
<li><strong>抢高点</strong></li>
<li><strong>低点回球</strong></li>
<li><strong>动作一致性</strong></li>
<li><strong>如何节省体力</strong> (依靠步伐和高质量回球)
<ul>
<li>高质量的回球让对手很难受，所以对手回球质量降低，你就不用快速的跑动</li>
<li>加上省力的步伐，就可以充分的节省体力。</li>
</ul></li>
</ol>
<h2 id="三技巧">三、技巧</h2>
<ol type="1">
<li><p>停顿放网</p></li>
<li><p>假放真推</p></li>
<li><p>假推真放</p></li>
<li><p>接杀挡对角</p></li>
<li><p>前后调动</p></li>
<li><p>重复落点</p></li>
<li><p>打转身</p></li>
<li><p>杀中路</p></li>
<li><p>抓推</p></li>
<li><p>变速</p></li>
<li><p>往前扑球</p></li>
<li><p>技术</p></li>
<li><p>战术</p></li>
<li><p>心理</p></li>
<li><p>能力</p></li>
</ol>
<p><strong>决定性作用：胜利的信念</strong></p>
]]></content>
      <categories>
        <category>随笔与个人文集</category>
      </categories>
      <tags>
        <tag>羽毛球</tag>
      </tags>
  </entry>
  <entry>
    <title>后场高远球</title>
    <url>/2022/10/25/%E9%9A%8F%E7%AC%94%E4%B8%8E%E4%B8%AA%E4%BA%BA%E6%96%87%E9%9B%86/01-1%E5%90%8E%E5%9C%BA%E9%AB%98%E8%BF%9C%E7%90%83/</url>
    <content><![CDATA[<ol type="1">
<li>侧身，架拍，展肩（下意识训练出来）</li>
<li>抬左手，抬左腿，重心放到右腿</li>
<li>左腿往下拉，再甩拍</li>
<li>上半身一定要往后拉，架拍为了展肩</li>
<li>腿越直，越没法发力，转不了身，用不上腰</li>
</ol>
<p>🔴 <strong>错误：</strong></p>
<blockquote>
<p>同步发力，右腿跳，甩右手</p>
</blockquote>
<p>🔵 <strong>链接：</strong></p>
<ol type="1">
<li><a href="https://www.bilibili.com/video/BV13C4y1t7Sn/?spm_id_from=333.999.0.0&amp;vd_source=83831fc0970a6c8704479f7cfc679937">羽毛球高远球教学之-五分钟教会你羽毛球高远球到底该怎么打！高远球打不到后场？看了视频后这个问题将不再存在！_哔哩哔哩_bilibili</a></li>
<li><a href="https://www.bilibili.com/video/BV1hZ4y1M7wB/?spm_id_from=333.999.0.0&amp;vd_source=83831fc0970a6c8704479f7cfc679937">羽毛球高远球教学之-教你如何转身挥拍！ 什么？！上一个视频你已经看完了？那来学学怎么转身打高远球吧！（没看上一个视频的一定要回去先看高远球教学视频噢）_哔哩哔哩_bilibili</a></li>
<li><a href="https://www.bilibili.com/video/BV1Z64y1F7Ys/?spm_id_from=333.999.0.0&amp;vd_source=83831fc0970a6c8704479f7cfc679937">高远球打不到位？转身挥拍老发不上力？来看看你是不是跟他们一样有同样的问题。_哔哩哔哩_bilibili</a></li>
<li></li>
</ol>
]]></content>
      <categories>
        <category>随笔与个人文集</category>
      </categories>
      <tags>
        <tag>羽毛球</tag>
      </tags>
  </entry>
  <entry>
    <title>步伐</title>
    <url>/2022/10/25/%E9%9A%8F%E7%AC%94%E4%B8%8E%E4%B8%AA%E4%BA%BA%E6%96%87%E9%9B%86/01-2%E6%AD%A5%E4%BC%90/</url>
    <content><![CDATA[<h2 id="交叉步和并步">交叉步和并步</h2>
<p>并步，快速步伐，小步伐，球速比较快可以用</p>
<p>交叉步，大步步伐，适合球速慢的时候</p>
]]></content>
      <categories>
        <category>随笔与个人文集</category>
      </categories>
      <tags>
        <tag>羽毛球</tag>
      </tags>
  </entry>
  <entry>
    <title>研究生规划</title>
    <url>/2022/05/19/%E9%9A%8F%E7%AC%94%E4%B8%8E%E4%B8%AA%E4%BA%BA%E6%96%87%E9%9B%86/%E9%9A%8F%E7%AC%942-%E7%A0%94%E7%A9%B6%E7%94%9F%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<h2 id="研究生规划"><strong>研究生规划</strong></h2>
<p><code>2022</code>年<code>5</code>月<code>12</code>日</p>
<p><a href="https://www.bilibili.com/video/BV1AB4y1m7yV?spm_id_from=333.880.my_history.page.click">【研0必看】985导师分享研究生期间学习规划，让你实现边玩边学！_哔哩哔哩_bilibili</a></p>
<p>做一个研究生规划，毕竟三年时间也是非常宝贵的，我既不想虚度时光，但也不想整天学的很累，按照自己的节奏来，所以早早地做一个规划吧，为研究生生涯画上一个完美的句号。</p>
<p>我是不打算读博了，但是呢，在国内读研究生都是以培养学术研究为目标的，再说研究方向和工作也可能不相关，所以科研任务（决定毕业）和找工作基本上是两条路。</p>
<ul>
<li>找工作不想找纯软件的工作，例如开发一个客户端什么的，对这个也不感兴趣，但是研究的是软件，<strong>研究生目标就是把编程能力提上去</strong></li>
<li>因为我学过电路，有硬件基础，因此还是很有优势的，未来可能会去硬件公司。</li>
<li><strong>先把软件学好，先专精一门之后，再扩展技能，是不错的选择</strong>，不然就会什么都了解一点点，什么都不会</li>
<li><strong>C++方面最好可以找一些相关的项目</strong>，赚点钱，才能有真正的提升，技能才不会丢</li>
</ul>
<p>目前呢，打算前两年还是好好做科研任务（<strong>前两年按照正规学术标准去规划</strong>），争取在前两年就可以写好毕业论文，毕竟毕业是头等大事，无论是否读博，都要把毕业论文好好完成，在保证能毕业的情况下，再谈其他的。</p>
<p>每半年分成一个部分，越早起步越好，然后开学前还有半年，打好基础，基础很重要（ <strong><font color="red"> 勿在浮沙筑高台 </font></strong> ）。</p>
<ul>
<li><p><strong><font color="red"> 安排好自己的生活，在学习的同时又能兼顾自己的兴趣爱好 </font></strong></p>
<ul>
<li>保证每日的任务量</li>
<li>但是不熬夜，11点之前可以睡着（当然这需要室友的配合，希望未来的室友不打游戏，可以早点睡觉）</li>
<li>有时间去玩，锻炼身体</li>
</ul>
<p>看似简单，其实也不容易。</p></li>
<li><p><strong><font color="red"> 养成专注的习惯 </font></strong></p>
<p>学习就是学习，学习的时候就不要看手机，每天专心学习<code>7-8</code>个小时，完全可以完成要求，也完全有时间去玩。</p></li>
<li><p><strong><font color="red"> 成熟稳重</font></strong></p>
<ul>
<li>一个人出去旅游，出去玩</li>
<li>一个人在陌生的城市里立足</li>
</ul></li>
</ul>
<p><strong>尽快的独立起来，做事不要依靠任何人，可以独当一面，成熟稳重起来</strong></p>
<hr>
<ol type="1">
<li><p><code>2022.5.12-2022.9</code> <strong><font color="red"> 研究生开学前 </font></strong></p>
<ul>
<li><strong>打好编程基础。学习C++课程</strong></li>
<li>目前基础语法学完了，总结一下，上传。</li>
<li>正在学<code>STL</code>，有<code>46</code>节课，一天<code>2-3</code>节</li>
<li><strong>一定要动手去写代码</strong></li>
<li><strong>计算机网络</strong></li>
<li><strong>计算机组成原理</strong> <a href="https://www.bilibili.com/video/BV1BE411D7ii?p=4">王道计算机考研 计算机组成原理_哔哩哔哩_bilibili</a></li>
<li>一共<code>97</code>节，<code>45</code>天，一天<code>2</code>节课就可以，</li>
<li><strong>复习很重要</strong>，第一天学过之后，第二天复习，那么后面会复习的越来越多，前面的以前可能有的学过，所以前面尽可能多看，后面重要的放慢进度。</li>
<li><strong>操作系统</strong></li>
<li><strong>英语学习。</strong>英语在面试，生活中用处还是非常大的，<strong>英语一定要坚持学</strong>。
<ul>
<li>做六级，六级考的也不太高</li>
</ul></li>
<li><strong>确定自己的研究方向，看论文，记笔记</strong> ---</li>
</ul></li>
<li><p><code>2022.9-2023.3</code><strong><font color="red"> 研一上半年 </font></strong></p>
<ul>
<li>应该会有很多专业课程</li>
<li>看论文，对于研究背景什么的，平时就记录自己的想法，到时候写开题报告，论文的时候可以直接拿来用。不要让写论文、改论文这些事去耽误找工作的时间</li>
</ul></li>
<li><p>先写到这里吧，到时候再具体看情况，毕竟计划赶不上变化，但是一个大致的规划还是要有的~</p></li>
</ol>
<hr>
]]></content>
      <categories>
        <category>随笔与个人文集</category>
      </categories>
      <tags>
        <tag>人生规划</tag>
      </tags>
  </entry>
  <entry>
    <title>数电</title>
    <url>/2021/05/21/%E6%99%B6%E4%BD%93%E7%AE%A1/%E6%95%B0%E7%94%B5/</url>
    <content><![CDATA[<h1 id="数电">数电</h1>
<p>请观看pdf</p>


	<div class="row">
    <embed src="数电.pdf" width="100%" height="550" type="application/pdf">
	</div>



<p>==注：此笔记结合课本、配套PPT看==</p>
<h2 id="第一章"><strong>第一章</strong></h2>
<h3 id="二进制数的补码"><strong>1. 二进制数的补码：</strong></h3>
<ol type="1">
<li>最高位为符号位（0为正，1为负）</li>
<li>正数的补码和它的原码相同</li>
<li>负数的补码=数值位迟位求反+1</li>
</ol>
<h3 id="为什么有这种原则"><strong>2. 为什么有这种原则？</strong></h3>
<ul>
<li>还是为了<span class="math inline">\(5+(-5)=0\)</span>可以实现</li>
</ul>
<p>编码的目的：区分信息和事物，为数字电路处理信息打基础</p>
<ul>
<li>0、1编码是为了信息处理，最后还要解码</li>
<li>在进入数字电路世界之前，要进行编码，编码的目的是把一个现实世界转换成二进制</li>
<li><img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20210424095505689.png" title="fig:" alt="image-20210424095505689"></li>
</ul>
<h2 id="第二章-逻辑代数基础"><strong>第二章 逻辑代数基础</strong></h2>
<h3 id="学习重点"><strong>学习重点</strong></h3>
<ul>
<li>基本逻辑运算</li>
<li>公式表示方法</li>
<li>逻辑函数的化简</li>
</ul>
<h3 id="知识点"><strong>知识点</strong></h3>
<ul>
<li>香农提出了电子电路和0 1的关联</li>
</ul>
<p><img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20210424100327691.png" alt="image-20210424100327691" style="zoom: 67%;"></p>
<ul>
<li><strong>基本公式和常见公式</strong></li>
<li>代入定理</li>
<li>反演定理(在逻辑代数中有一定意义，但在数字电路实现中，意义不大)</li>
</ul>
<p><img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20210424205701745.png" alt="image-20210424205701745" style="zoom:50%;"></p>
<h3 id="逻辑代数描述方法"><strong>逻辑代数描述方法</strong></h3>
<ul>
<li><p>真值表——抽象度不高，但描述是确定的</p></li>
<li><p>逻辑式——表达最简洁</p></li>
<li><p>逻辑图——跟电路对应关系最好</p></li>
<li><p>波形图——实验室最容易得到</p></li>
<li><p>卡诺图</p></li>
<li><p>硬件描述语言</p>
<p><strong>同一中逻辑关系在不同形式下的编码方式</strong></p></li>
</ul>
<p>表示方法可以不同，但是对同一个逻辑关系来讲，是可以相互转化的</p>
<p><img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20210424110606155.png" alt="image-20210424110606155" style="zoom:67%;"></p>
<p>根据搭建电路所需要的器件类型，对逻辑函数进行一定化简（德摩根+常用公式）</p>
<ul>
<li>真值表<span class="math inline">\(\Leftrightarrow\)</span>逻辑式 $ $</li>
<li>逻辑式<span class="math inline">\(\Leftrightarrow\)</span>逻辑图 <span class="math inline">\(\checkmark\)</span>
<ul>
<li>逻辑式<span class="math inline">\(\rightarrow\)</span>逻辑图，需要根据所有的门类型，对逻辑式进行转化</li>
<li>逻辑图<span class="math inline">\(\rightarrow\)</span>逻辑式，在分析中常用，拿到别人设计的电路图，想知道功能时
<ul>
<li>实验室</li>
<li>写出逻辑式</li>
</ul></li>
</ul></li>
<li>波形图<span class="math inline">\(\rightarrow\)</span>真值表 <span class="math inline">\(\checkmark\)</span>
<ul>
<li>要看波形图是否完整，要遍历所有值，波形图一列对应真值表一行</li>
</ul></li>
<li>波形图<span class="math inline">\(\rightarrow\)</span>逻辑式 <span class="math inline">\(\checkmark\)</span></li>
</ul>
<h3 id="逻辑函数两种标准形式">逻辑函数两种标准形式</h3>
<ul>
<li><p>最小项<span class="math inline">\(m\)</span>之和</p>
<ul>
<li>最小项是乘积项，值为<span class="math inline">\(1\)</span>，来源于真值表。<strong>与</strong>得<span class="math inline">\(0\)</span>容易，得<span class="math inline">\(1\)</span>难，得<span class="math inline">\(1\)</span>只对应一种情况，写<span class="math inline">\(1\)</span>的式子</li>
<li>有<span class="math inline">\(n\)</span>个变量，均以原变量与反变量的形式出现一次</li>
<li>最小项一定取了真值表的某一行</li>
<li>最小项编号的时候，以令最小项为<span class="math inline">\(1\)</span>的取值为编号，因为只有唯一一种情况，使最小项为<span class="math inline">\(1\)</span></li>
</ul>
<p><strong>最小项性质：</strong></p>
<ul>
<li>在任意输入变量取值下，有且仅有一个最小项为<span class="math inline">\(1\)</span></li>
<li>全体最小项之和为<span class="math inline">\(1\)</span></li>
<li>==<strong>任意两个最小项之积为<span class="math inline">\(0\)</span>。因为任何取值，无法使两个最小项同时为<span class="math inline">\(1\)</span></strong>==</li>
<li>==<strong>两个相邻的最小项之和可以合并</strong>==。<strong>相邻：仅有一个变量不同的最小项</strong></li>
</ul>
<p><img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20210424205551903.png" alt="image-20210424205551903" style="zoom: 50%;"></p></li>
<li><p>最大项<span class="math inline">\(M\)</span>之积</p>
<ul>
<li>最大项是<strong>或</strong>项、相加项。<strong>或</strong>得<span class="math inline">\(1\)</span>容易，得<span class="math inline">\(0\)</span>难，得<span class="math inline">\(0\)</span>只对应一种情况，写<span class="math inline">\(0\)</span>的式子</li>
<li>一个最大项也对应真值表某一行</li>
<li>最大项编号的时候，以令最大项为<span class="math inline">\(0\)</span>的取值为编号，因为只有唯一一种情况，使最小项为<span class="math inline">\(0\)</span></li>
</ul>
<p><img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20210424205111833.png" alt="image-20210424205111833" style="zoom: 50%;"></p></li>
</ul>
<p><img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20210424205146673.png" alt="image-20210424205146673" style="zoom:50%;"></p>
<h3 id="卡诺图化简用对称展开的方式理解对称的方块都是相邻的">卡诺图化简（用对称展开的方式理解，<strong>对称的方块都是相邻的</strong>）</h3>
<ul>
<li><p>实质：将逻辑函数的最小项之和以图形方式表示</p></li>
<li><p>最小项用方块表示，逻辑相邻用几何相邻表示，<strong>运用了相邻最小项可以合并的原理</strong></p></li>
<li><p><img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20210424205219633.png" alt="image-20210424205219633" style="zoom: 50%;"></p></li>
<li><p><img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20210424205248745.png" alt="image-20210424205248745" style="zoom: 50%;"></p></li>
<li><p>卡诺图和真值表一样，逻辑式不写成最小项的形式，一样可以填卡诺图</p></li>
<li><p>画卡诺图不必把逻辑式化成最小项的形式，可以直接画</p>
<ul>
<li><p><span class="math inline">\(example:Y(A,B,C,D)=A&#39;B&#39;C&#39;D+A&#39;BD&#39;+AB&#39;\)</span></p>
<ul>
<li><span class="math inline">\(AB&#39;\)</span>对应<span class="math inline">\(4\)</span>个最小项：</li>
</ul>
<p><span class="math display">\[
\begin{align}
AB&#39;&amp; =  AB&#39;(C+C&#39;)=AB&#39;C+AB&#39;C&#39;\\
   &amp; =AB&#39;C(D+D&#39;)+AB&#39;C&#39;(D+D&#39;)\\
   &amp; =AB&#39;CD+AB&#39;CD&#39;+AB&#39;C&#39;D+AB&#39;C&#39;D&#39;\\
   &amp; = \sum(m_{11},m_{10},m_9,m_8)
\end{align}
\]</span></p>
<ul>
<li><span class="math inline">\(A&#39;BD&#39;\)</span>对应<span class="math inline">\(2\)</span>个最小项</li>
<li><span class="math inline">\(A&#39;B&#39;C&#39;D\)</span>对应<span class="math inline">\(1\)</span>个最小项</li>
</ul></li>
</ul></li>
</ul>
<p><img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20210424152406666.png" alt="image-20210424152406666" style="zoom:50%;"></p>
<ul>
<li>合并最小项的原则：
<ul>
<li>两个相邻最小项可合并为一项，消去一对因子</li>
<li>四个排成矩形的相邻最小项可合并为一项，消去两对因子</li>
<li>八个相邻最小项可合并为一项，消去三对因子</li>
</ul></li>
<li>化简原则
<ul>
<li>圈尽可能地大('或'少)</li>
<li>一个圈包围的方块尽可能的多(‘与’少)</li>
</ul></li>
<li>两变量卡诺图最多可以含有<span class="math inline">\(2\)</span>个最小项，且不能化简</li>
<li>三变量卡诺图最多可以含有<span class="math inline">\(4\)</span>个最小项，且不能化简</li>
<li>四变量卡诺图最多可以含有<span class="math inline">\(8\)</span>个最小项，且不能化简(<strong>对折展开原理</strong>)</li>
<li>==一个逻辑函数如果可以表示成最小项之和，也一定能表达成最大项之积，而最小项和最大项的标号是<strong>互补</strong>的==</li>
</ul>
<h3 id="具有无关项的逻辑函数及其化简">具有无关项的逻辑函数及其化简</h3>
<ul>
<li><p><strong>约束项</strong>：逻辑函数中对输入变量的取值有限制，与这些被限制的取值对应的最小项称为约束项</p></li>
<li><p><strong>任意项</strong>：在输入变量某些取值下，函数值为1或0不影响逻辑电路的功能，与这些取值对应的最小项称为任意项</p></li>
<li><p><strong>无关项</strong>：约束项和任意项统称为无关项，它们可以写入逻辑式，也可以不写入逻辑式。</p></li>
<li><p>无关项是设计人员基于一定物理背景下的应用</p></li>
</ul>
<h2 id="第三章-门电路"><strong>第三章 门电路</strong></h2>
<h3 id="简单介绍"><strong>1. 简单介绍</strong></h3>
<ul>
<li><p>选择离散的电压信号（离散的电压序列）表示信息</p>
<ul>
<li><p>电压容易产生、测量</p></li>
<li><p>低功耗，有电压可以没电流</p></li>
<li><p>易受环境的影响</p></li>
<li><p>需要直流</p></li>
<li><p>电压遇到<span class="math inline">\(RC\)</span>网络慢</p></li>
</ul></li>
<li><p><strong>Voltage pros:</strong></p>
<ul>
<li>easy generation, detection</li>
<li>lots of engineering knowledge</li>
<li>potentially low power in steady state zero</li>
</ul></li>
<li><p><strong>Voltage cons:</strong></p></li>
<li><p>easily affected by environment</p></li>
<li><p>DC connectivity required?</p></li>
<li><p>R &amp; C effects slow things down</p></li>
</ul>
<p><img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20210424195054922.png" alt="image-20210424195054922" style="zoom: 50%;"></p>
<ul>
<li><p><strong>Noise and inaccuracy are inevitable</strong>: we can't reliably reproduce infinite information--we must design our system to tolerate some amount of error if it is to process information reliably.</p></li>
<li><p>在模拟系统中，<span class="math inline">\(0.37和0.369\)</span>是不一样的，最后造成误差</p></li>
<li><p><strong>Why digital?</strong></p>
<ul>
<li>because it keeps the contracts simple. 可靠，具有<strong>tolerate some amount of error</strong>的能力</li>
<li><strong>But the price we pay for this robustness</strong>: All the information that we transfer between modules is only 1 crummy bit!</li>
</ul></li>
<li><p><span class="math inline">\(example:\)</span>要传<span class="math inline">\(0.37\mathrm{volt}\)</span>的信号，模拟系统中一根线就可以，而在数字系统中，要<span class="math inline">\(0.37\rightarrow\)</span>二进制(<span class="math inline">\(010100....\)</span>)</p>
<ul>
<li>要么多根线传输，牺牲空间</li>
<li>要么一根线，<span class="math inline">\(1bit、1bit\)</span>的传输，牺牲时间</li>
</ul></li>
<li><p>表面上<span class="math inline">\(0、1\)</span>，实际上传的还是电压信号，那为什么还能有tolerate some amount of error的能力？</p>
<ul>
<li>所有的数字器件必须签合同。</li>
<li><span class="math inline">\(Contract\)</span> : I will only output $1's $ and <span class="math inline">\(0&#39;s\)</span>. and they will be <span class="math inline">\(GOOD\)</span> <span class="math inline">\(1&#39;s\)</span> and <span class="math inline">\(0&#39;s\)</span>, Yet. I will tolerate inputs that are not quite up to my high standards.​</li>
</ul></li>
<li><p>Using Voltages "Digitally"</p>
<ul>
<li>Key idea: don't allow <span class="math inline">\(“0”\)</span> to be mistaken for a <span class="math inline">\(“1”\)</span> or vice versa</li>
<li><strong>Use the same "uniform representation convention" for every component</strong> <strong>and wire</strong> in our digital system to implement devices with high reliability, we outlaw "close calls" via a representation convention which forbids a range of voltages between "0" and "1"</li>
<li><img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20210424203813475.png" alt="image-20210424203813475" style="zoom:67%;"></li>
</ul>
<h3 id="数字电路中也丢失了一些东西"><strong>数字电路中，也丢失了一些东西</strong></h3>
<ul>
<li>当逻辑函数的真值表从一行变到另一行的时候，每一行都是确定的值，但变化的时候每一个值都在经过<span class="math inline">\(Forbidden \ Zone\)</span>这个区。即只知道真值表（稳定时候的值），并不是每时每刻输出都有意义，逻辑代数没有描述非静态下的表达</li>
</ul></li>
<li><p><img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20210424204945891.png" alt="image-20210424204945891" style="zoom:80%;"></p></li>
<li><p><span class="math inline">\(CMOS\)</span>制造工艺中，<span class="math inline">\(sio_2\)</span>层很薄，薄到要去数原子个数，所以很容易被击穿，因此要加保护电路</p></li>
<li><p>==<strong>输出低电平时，希望<span class="math inline">\(MOS\)</span>管工作在哪个区？</strong>==</p></li>
<li><figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20210426212511021.png" alt="image-20210426212511021"><figcaption aria-hidden="true">image-20210426212511021</figcaption>
</figure>
<ul>
<li>输出电平，导通的<span class="math inline">\(MOS\)</span>管起开关作用，目的是把<strong>"地"</strong>拉出来，起下拉的作用，希望在这个器件上的压降小，<strong>即<span class="math inline">\(v_{ds}\)</span>小，故<span class="math inline">\(MOS\)</span>管工作在线性区</strong></li>
</ul></li>
<li><p>所有的信号，只有流经电路，就一定会在时间上留下痕迹——==<strong>延迟</strong>==</p></li>
<li><p><span class="math inline">\(CMOS\)</span>反相器由于上下两个管子的互补特性，在给出了理想的高低电平的同时，也带来了一个问题：==<strong>在过渡区时，两个管子同时导通</strong>==，不是工作在我们所期望的截止区和线性电阻区，而是工作在恒流区，有一个==<strong>尖峰电流(是动态功耗的来源)，导致动态功耗一定不为0</strong>==。<span class="math inline">\(CMOS\)</span>反相器静态功耗近乎为0，动态功耗一定不为0。动态，即在<span class="math inline">\(0 \rightarrow1 \ and\ 1\rightarrow0\)</span>之间跳变的时候，尖峰电流是动态功耗的来源。</p></li>
<li><p>数字电路的电源电压<span class="math inline">\(V_{DD}\)</span>一直在下降，动态功耗会降低很多，因为动态功耗是数字电路主要的功耗。<strong>但降低电源电压，数字化的'0'和'1'会很接近</strong></p></li>
<li><p><span class="math inline">\(CMOS\)</span>电路原则</p>
<ul>
<li>由上拉(<span class="math inline">\(PMOS\)</span>)和下拉(<span class="math inline">\(NMOS\)</span>)两部分组成，上拉负责输出1，下拉负责输出0，上拉和下拉要覆盖真值表的所有行。</li>
<li>上拉和下拉不能同时导通</li>
<li>上拉由<span class="math inline">\(PMOS\)</span>构成，下拉由<span class="math inline">\(NMOS\)</span>构成，就注定了，上拉全由反变量控制(<span class="math inline">\(PMOS\)</span>由反变量控制)，下拉全由原变量控制</li>
</ul></li>
<li><p><span class="math inline">\(CMOS\)</span>器件在构成逻辑运算的时候，都是...非，不能直接得到与门，或门。因为<span class="math inline">\(NMOS\)</span>通过控制原变量，下拉出地，输出反变量。而与、或运算是逻辑原变量的运算，输出还是原变量。</p></li>
<li><p>串联拓扑结构天生代表逻辑'与'运算，并联拓扑结构天生代表逻辑'或'运算</p></li>
<li><p>==<strong>反相器是<span class="math inline">\(CMOS\)</span>电路中最小的逻辑单元</strong>==</p></li>
<li></li>
</ul>
<h2 id="第四章组合逻辑电路"><strong>第四章、组合逻辑电路</strong></h2>
<h3 id="看书和笔记"><strong>1. 看书和笔记</strong></h3>
<ul>
<li>编码器
<ul>
<li>普通编码器</li>
<li>优先编码器</li>
</ul></li>
<li>译码器</li>
<li>数据选择器</li>
<li>加法器</li>
<li>竞争—冒险</li>
</ul>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20210515165122396.png" alt="image-20210515165122396"><figcaption aria-hidden="true">image-20210515165122396</figcaption>
</figure>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20210515165529756.png" alt="image-20210515165529756"><figcaption aria-hidden="true">image-20210515165529756</figcaption>
</figure>
<ul>
<li>第一个图，当A，B=1时，出现了固定的竞争冒险，不是同时向相反变化偶然出现的。</li>
<li>当卡诺图中出现相切时，就会出现固定的竞争冒险现象。与Y=A+A'的方法一样。因为当出现相切的时候，就是一个变量在变的时候，就会有A和A接反相器的电路，出现时间差</li>
</ul>
<h3 id="eda工具"><strong>2. EDA工具</strong></h3>
<ul>
<li><img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20210515170338966.png" title="fig:" alt="image-20210515170338966"></li>
</ul>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20210515170702622.png" alt="image-20210515170702622"><figcaption aria-hidden="true">image-20210515170702622</figcaption>
</figure>
<ul>
<li><p>希望把所有的硬件连线等都放在芯片中，需要EDA工作来做</p></li>
<li><p>用EDA工具来设计，跟EDA配合使用的是可编程逻辑器件</p></li>
<li><p>器件</p>
<ul>
<li>门电路，通用性好</li>
<li>中规模器件，译码器、编码器等。都有自己的编号，功能表，不能改</li>
</ul></li>
<li><figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20210515171858606.png" alt="image-20210515171858606"><figcaption aria-hidden="true">image-20210515171858606</figcaption>
</figure></li>
<li><p>用一种语言来描述我们所要设计和实现的电路</p></li>
<li><figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20210515172544196.png" alt="image-20210515172544196"><figcaption aria-hidden="true">image-20210515172544196</figcaption>
</figure></li>
<li><p>将通用型和专用型结合起来</p>
<ul>
<li>厂家在生产的时候是通用的，成本低，时间短</li>
<li>芯片内部是自己定制的。在芯片内部放大量的门、运算器，如何连线，由用户定义</li>
</ul>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20210515172847467.png" alt="image-20210515172847467"><figcaption aria-hidden="true">image-20210515172847467</figcaption>
</figure></li>
<li><p>在用通用型器件时，最烦的就是器件之间的连线</p></li>
<li><p>可编程逻辑器件就像一个电子面包板，在器件的内部，准备好了大量的数字电路的基本模块，而基本模块的连接由EDA工具连接--------逻辑综合，把一个电路的描述和电路的实现挂钩</p></li>
<li><figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20210515173602836.png" alt="image-20210515173602836"><figcaption aria-hidden="true">image-20210515173602836</figcaption>
</figure></li>
<li><p>逻辑综合类似于：高级语言到机器码，由编译器完成。硬件描述语言描述的电路到电路连接实现，由EDA工具完成。我的描述告诉电路------&gt;电路进行综合-------&gt;电路告诉芯片</p></li>
<li><figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20210515174309350.png" alt="image-20210515174309350"><figcaption aria-hidden="true">image-20210515174309350</figcaption>
</figure></li>
</ul>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20210515174707872.png" alt="image-20210515174707872"><figcaption aria-hidden="true">image-20210515174707872</figcaption>
</figure>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20210515175202228.png" alt="image-20210515175202228"><figcaption aria-hidden="true">image-20210515175202228</figcaption>
</figure>
<ul>
<li>硬件描述语言，写的程序看似有前有后，一逻辑综合完，就没有顺序，所有输入都被拉到前面，并行</li>
<li><img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20210515175708834.png" title="fig:" alt="image-20210515175708834"></li>
</ul>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20210515175905095.png" alt="image-20210515175905095"><figcaption aria-hidden="true">image-20210515175905095</figcaption>
</figure>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20210515180025891.png" alt="image-20210515180025891"><figcaption aria-hidden="true">image-20210515180025891</figcaption>
</figure>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20210515180226919.png" alt="image-20210515180226919"><figcaption aria-hidden="true">image-20210515180226919</figcaption>
</figure>
<ul>
<li>微电子行业的人喜欢用verilog</li>
<li>可编程逻辑器件的人喜欢用VHDL，因为侧重从上往下，并不关心电路是如何实现的</li>
<li>Verilog偏底层，VHDL系统级</li>
<li><img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20210515181027954.png" title="fig:" alt="image-20210515181027954"></li>
</ul>
<h2 id="第五章-时序逻辑电路"><strong>第五章 时序逻辑电路</strong></h2>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20210515181120392.png" alt="image-20210515181120392"><figcaption aria-hidden="true">image-20210515181120392</figcaption>
</figure>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20210515203541206.png" alt="image-20210515203541206"><figcaption aria-hidden="true">image-20210515203541206</figcaption>
</figure>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20210515204224905.png" alt="image-20210515204224905"><figcaption aria-hidden="true">image-20210515204224905</figcaption>
</figure>
<ul>
<li><p>时序逻辑电路中，不是所有信号都是有效信号，当认为是有效信号时，才开启load存入记忆系统</p></li>
<li><figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20210515210523093.png" alt="image-20210515210523093"><figcaption aria-hidden="true">image-20210515210523093</figcaption>
</figure></li>
<li><p>上图这个电路没有输入，不能把0、1放进去。要把输入引出来，但反相器没发引</p></li>
</ul>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20210517095836570.png" alt="image-20210517095836570"><figcaption aria-hidden="true">image-20210517095836570</figcaption>
</figure>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20210517095911924.png" alt="image-20210517095911924"><figcaption aria-hidden="true">image-20210517095911924</figcaption>
</figure>
<figure>
<img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20210517101045077.png" alt="image-20210517101045077"><figcaption aria-hidden="true">image-20210517101045077</figcaption>
</figure>
<ul>
<li>通过两条反馈线，与S=1, R=1的情况相与，变成S=0, R=1或S=1,R=0的信号，避免了SR同时为1</li>
<li>==<span class="math inline">\(Q:\)</span>但这两条反馈线对<span class="math inline">\(SR\  flip-flop\)</span>的<strong>置1、置0、保持</strong>功能有影响吗？==</li>
</ul>
<p>​</p>
]]></content>
      <categories>
        <category>硬件</category>
      </categories>
      <tags>
        <tag>数电</tag>
      </tags>
  </entry>
  <entry>
    <title>MOS电容总结</title>
    <url>/2022/03/23/%E6%99%B6%E4%BD%93%E7%AE%A1/MOS%E7%AE%A1%E7%94%B5%E5%AE%B9/</url>
    <content><![CDATA[<h2 id="mos电容"><span class="math inline">\(MOS\)</span>电容</h2>
<h3 id="栅沟电容c_gc与mos管工作状态有关">1. 栅沟电容<span class="math inline">\(C_{GC}\)</span>(与<span class="math inline">\(MOS\)</span>管工作状态有关)</h3>
<table>
<thead>
<tr class="header">
<th style="text-align: center;"><span class="math inline">\(MOS\)</span>工作状态</th>
<th style="text-align: left;">电容分布</th>
<th>大小</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">截止区</td>
<td style="text-align: left;"><strong>栅—衬底</strong><span class="math inline">\(C_{GCB}\)</span> 电容</td>
<td><span class="math inline">\(C_{ox}WL\)</span></td>
</tr>
<tr class="even">
<td style="text-align: center;">线性区</td>
<td style="text-align: left;"><strong>栅—源</strong>+<strong>栅—漏 </strong><span class="math inline">\(C_{GCD}\)</span> 电容</td>
<td><span class="math inline">\(C_{ox}WL\)</span></td>
</tr>
<tr class="odd">
<td style="text-align: center;">饱和区</td>
<td style="text-align: left;"><strong>栅—源 </strong><span class="math inline">\(C_{GCS}\)</span>电容</td>
<td><span class="math inline">\(\frac{2}{3}C_{ox}WL\)</span></td>
</tr>
</tbody>
</table>
<p><span class="math display">\[
C_{GC}=C_{GCD}+C_{GCB}+C_{GCS}
\]</span></p>
<p><img src="https://cdn.staticaly.com/gh/peirsist/blog_img@master/image-20210421184251631.3uvmhlhrmbq0.webp" style="zoom:150%;"></p>
<h3 id="覆盖电容栅源栅漏">2. 覆盖电容(栅—源、栅—漏)</h3>
<table>
<thead>
<tr class="header">
<th>分布</th>
<th>符号</th>
<th>大小</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>栅—源</td>
<td><span class="math inline">\(C_{GSO}\)</span></td>
<td><span class="math inline">\(C_{ox}x_dW=C_oW\)</span></td>
</tr>
<tr class="even">
<td>栅—漏</td>
<td><span class="math inline">\(C_{GDO}\)</span></td>
<td><span class="math inline">\(C_{ox}x_dW=C_oW\)</span></td>
</tr>
</tbody>
</table>
<h3 id="结电容扩散电容">3. 结电容(扩散电容)</h3>
<table>
<thead>
<tr class="header">
<th></th>
<th>电容分布</th>
<th>大小</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>底板电容</td>
<td>源—衬底、漏—衬底</td>
<td><span class="math inline">\(C_jWL_s\)</span></td>
</tr>
<tr class="even">
<td>侧壁电容</td>
<td>源—衬底、漏—衬底</td>
<td><span class="math inline">\(C&#39;_{sw}x_j(2L_s+W)\)</span> <br> <span class="math inline">\(=C_{jsw}(2L_s+W)\)</span></td>
</tr>
</tbody>
</table>
<p><span class="math display">\[
C_{diff}= C_{bottom}+C_{sidewall}=C_j×面积+C_{jsw}×周长\\
\quad=C_jWL_s+C_{jsw}(2L_s+W)
\]</span></p>
<p><strong>注：</strong></p>
<table>
<thead>
<tr class="header">
<th>符号</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><span class="math inline">\(C_j\)</span></td>
<td>每单位面积的结电容</td>
</tr>
<tr class="even">
<td><span class="math inline">\(C_{jsw}\)</span></td>
<td><span class="math inline">\(sidewall\)</span>每单位周长的结电容</td>
</tr>
<tr class="odd">
<td></td>
<td></td>
</tr>
<tr class="even">
<td></td>
<td></td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>硬件</category>
      </categories>
      <tags>
        <tag>MOS</tag>
      </tags>
  </entry>
  <entry>
    <title>test.md</title>
    <url>/2022/10/20/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<p>低通滤波</p>
]]></content>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title>打高远球无力</title>
    <url>/2021/12/25/%E9%9A%8F%E7%AC%94%E4%B8%8E%E4%B8%AA%E4%BA%BA%E6%96%87%E9%9B%86/01-3%E6%89%93%E9%AB%98%E8%BF%9C%E7%90%83%E6%97%A0%E5%8A%9B/</url>
    <content><![CDATA[<p>2021年冬天和高个子球员打球，遇到以下问题： 被限制在后场，总是感觉没力气，经常被逼到球场的边缘，后场高远球又打的不到位，用力打但是总是打不远，只能打高是怎么回事，打到前场又被抓。🙁</p>
<p>以下答案来自<a href="https://www.zhihu.com/question/458575065">怎么样才能把羽毛球打得有力？ - 知乎 (zhihu.com)</a></p>
<hr>
<p>🔴 网友1</p>
<p><strong>无力感原因有三：</strong></p>
<ol type="1">
<li>没步伐，没被压在边缘的时候感觉击球有力吧！压在底线的时候，<strong>球在人后面，后仰去够球，拍面朝上，当然见高不见远。</strong></li>
</ol>
<blockquote>
<p>注：就在被吊那一天，和一个学长打双打，他告诉我最好的击球点在肩部正上方，球会往前走，球过头顶，再击球，球只会往上走。那天他还交了我如何后场吊到前场，但是后场吊到前场不要经常用。</p>
</blockquote>
<ol start="2" type="1">
<li>打不远那球的前一拍球打的太渣（后场不到位，网前球太高，过网速度慢），给自己挖了个坑，没有能力跳出坑。</li>
<li>对手实力比你强。打比自己强的对手有这种感觉非常正常。</li>
</ol>
<p><strong>解决方式：</strong></p>
<ol type="1">
<li>练习回位脚步，后退步伐，在<strong>合适位置</strong>击球当然能打得出力量，球速。</li>
<li>被压到底线要学会变通，没有能力回后场球，可以吊两个网前，如果过网质量尚可，下个球还能挣扎。</li>
<li><strong>练习力量</strong>，增强击球效率，平时要有在底线轻松将球打出界的能力。</li>
<li>感谢对手给你这种无力感，会激励你进步。</li>
</ol>
<p>想击球有力，和挥拍动作，步伐，发力方式，击球点息息相关，想要变得更强，单单网上问，看视频不行。<strong>一定要将纸面知识运用于实战，不断重复不断练习，没有捷径，只能少点弯路。</strong></p>
<hr>
<p>🟠 网友2</p>
<p>首先，你说这个是 <strong><u>单打虐菜的基本拉吊打法，拉高远逼你去后场，再吊网前逼你救球；最大幅度调动你满场跑，耗你体力。一般这么打，通常水平上是碾压你的。</u></strong></p>
<p>你的问题是对的，对于这种打法，只要你水平上去了，对方拉吊不过你，自然可以和他硬钢.</p>
<ol type="1">
<li>多练，练高远球（<strong>练到后场能回到对方后场</strong>），正反手挑球（中场挑到对方后场）</li>
<li><strong>全场步伐</strong></li>
<li>战术应对，打羽毛球节奏很重要，对方拉吊你，基本上都能预判到你的回球路线了，你不能再顺着对方打了。<strong>回球路线要灵活多变</strong>，他给你后场，你可以吊个网前，他吊你网前，你可以钩个对角；把对方也调动起来，你得分的机会可能更多一些。</li>
<li><strong>发力</strong>：全套的高远球发力是： 架拍瞄准&gt;转体侧身&gt;右脚蹬地&gt;扭腰转身&gt;轮大臂&gt;转小臂&gt;掰手腕&gt;搓手指&gt;击球</li>
</ol>
<p>激烈对抗是可能没有充足的时间做全套动作；随着你技术提升，可以逐渐依次省略前续步骤，请量力而行；但想铆足了劲儿全力一击，还请做全套动作。</p>
<figure>
<img src="https://pic1.zhimg.com/50/v2-ffa298d217a485fdf6afca4b8f2f59e2_720w.webp?source=1940ef5c" alt="击球姿势"><figcaption aria-hidden="true">击球姿势</figcaption>
</figure>
<hr>
<p>🟡 网友3</p>
<p>一个完整的击球流程可以分为四步：启动、移动、击球、回动，很多人只重视移动和击球这两步，却忽视启动和回动的重要性，这是非常错误的。事实上，启动步是步法中最重要的一环没有之一，只要能在合适的时间做合适的启动，移动的步法就是水到渠成的； <strong><font color="red">而回动和下一球启动间的衔接，是步法的精髓。</font></strong>相信有一定球龄和水平的球友都能理解我的话</p>
<p><img src="https://cdn.staticaly.com/gh/peirsist/blog_img@master/启动移动击球回动.4r0yxw3ky7m0.webp"></p>
<hr>
<p>🟢 网友4</p>
<p>打羽毛球不只是看哪一方面的</p>
<p>光有力气不行，光有技术没力量也不行</p>
<p>技术力量都有了，没有步伐也不行</p>
<p>你经常被逼到边缘说明技术不如对面</p>
<p>被近球搞定说明步伐没练</p>
<p>用力打但总打不远是因为发力不对</p>
<p>这些问题都不是一个窍门能解决的</p>
<p>要么找个教练学</p>
<p>要么自己网上找教程，<strong>从基础步伐开始练</strong></p>
<p>步伐练好了，你说的被近球搞定就基本解决了</p>
<p><a href="https://www.zhihu.com/search?q=发力技巧&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2097489538%7D">发力技巧</a>那些等基本步伐练好在练也不晚，网上也有很多教程</p>
]]></content>
      <categories>
        <category>随笔与个人文集</category>
      </categories>
      <tags>
        <tag>羽毛球</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown表情</title>
    <url>/2022/10/27/%E9%9A%8F%E7%AC%94%E4%B8%8E%E4%B8%AA%E4%BA%BA%E6%96%87%E9%9B%86/markdown%E8%A1%A8%E6%83%85/</url>
    <content><![CDATA[<ol>
<li><a href="https://www.emojiall.com/zh-hans/categories/I">分类:🛑符号相关的Emoji大全 | EmojiAll</a></li>
<li><a href="https://apps.timwhitlock.info/emoji/tables/unicode#">Emoji unicode characters for use on the web (timwhitlock.info)</a></li>
<li><a href="https://www.unicode.org/emoji/charts/full-emoji-list.html">Full Emoji List, v15.0 (unicode.org)</a></li>
<li></li>
</ol>
]]></content>
      <categories>
        <category>随笔与个人文集</category>
      </categories>
  </entry>
</search>
